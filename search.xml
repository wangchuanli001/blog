<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git学习</title>
    <url>/posts/3151.html</url>
    <content><![CDATA[<pre><code>分布式版本控制git的学习、工作流、分支管理、SSH等</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#学习资料">学习资料</a></li>
<li><a href="#集中式与分布式">集中式与分布式</a></li>
<li><a href="#git-的中心服务器">Git 的中心服务器</a></li>
<li><a href="#git-工作流">Git 工作流</a></li>
<li><a href="#分支实现">分支实现</a></li>
<li><a href="#冲突">冲突</a></li>
<li><a href="#fast-forward">Fast forward</a></li>
<li><a href="#分支管理策略">分支管理策略</a></li>
<li><a href="#储藏stashing">储藏（Stashing）</a></li>
<li><a href="#ssh-传输设置">SSH 传输设置</a></li>
<li><a href="#gitignore-文件">.gitignore 文件</a></li>
<li><a href="#git-命令一览">Git 命令一览</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener external nofollow noreferrer">Git - 简明指南</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener external nofollow noreferrer">图解 Git</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener external nofollow noreferrer">廖雪峰 : Git 教程</a></li>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener external nofollow noreferrer">Learn Git Branching</a></li>
</ul>
<h1 id="集中式与分布式"><a href="#集中式与分布式" class="headerlink" title="集中式与分布式"></a>集中式与分布式</h1><p>Git 属于分布式版本控制系统，而 SVN 属于集中式。</p>
<p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</p>
<p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p>
<p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。</p>
<p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。</p>
<h1 id="Git-的中心服务器"><a href="#Git-的中心服务器" class="headerlink" title="Git 的中心服务器"></a>Git 的中心服务器</h1><p>Git 的中心服务器用来交换每个用户的修改。没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。Github 就是一种 Git 中心服务器。</p>
<h1 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h1><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///a1198642-9159-4d88-8aec-c3b04e7a2563.jpg"/> </div><br>

<p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。</p>
<p>Git 版本库有一个称为 stage 的暂存区，还有自动创建的 master 分支以及指向分支的 HEAD 指针。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///46f66e88-e65a-4ad0-a060-3c63fe22947c.png"/> </div><br>

<ul>
<li>git add files 把文件的修改添加到暂存区</li>
<li>git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了</li>
<li>git reset – files 使用当前分支上的修改覆盖暂缓区，用来撤销最后一次 git add files</li>
<li>git checkout – files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///17976404-95f5-480e-9cb4-250e6aa1d55f.png"/> </div><br>

<p>可以跳过暂存区域直接从分支中取出修改或者直接提交修改到分支中</p>
<ul>
<li>git commit -a 直接把所有文件的修改添加到暂缓区然后执行提交</li>
<li>git checkout HEAD – files 取出最后一次修改，可以用来进行回滚操作</li>
</ul>
<h1 id="分支实现"><a href="#分支实现" class="headerlink" title="分支实现"></a>分支实现</h1><p>Git 把每次提交都连成一条时间线。分支使用指针来实现，例如 master 分支指针指向时间线的最后一个节点，也就是最后一次提交。HEAD 指针指向的是当前分支。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///fb546e12-e1fb-4b72-a1fb-8a7f5000dce6.jpg"/> </div><br>

<p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支表示新分支成为当前分支。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///bc775758-89ab-4805-9f9c-78b8739cf780.jpg"/> </div><br>

<p>每次提交只会让当前分支向前移动，而其它分支不会移动。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///5292faa6-0141-4638-bf0f-bb95b081dcba.jpg"/> </div><br>

<p>合并分支也只需要改变指针即可。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///1164a71f-413d-494a-9cc8-679fb6a2613d.jpg"/> </div><br>

<h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///58e57a21-6b6b-40b6-af85-956dd4e0f55a.jpg"/> </div><br>

<p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>

<h1 id="Fast-forward"><a href="#Fast-forward" class="headerlink" title="Fast forward"></a>Fast forward</h1><p>“快进式合并”（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。</p>
<p>可以在合并时加上 –no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///dd78a1fe-1ff3-4bcf-a56f-8c003995beb6.jpg"/> </div><br>

<h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><p>master 分支应该是非常稳定的，只用来发布新版本；</p>
<p>日常开发在开发分支 dev 上进行。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///245fd2fb-209c-4ad5-bc5e-eb5664966a0e.jpg"/> </div><br>

<h1 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h1><p>在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。</p>
<p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state \ &quot;WIP on master: 049d078 added the index file&quot;</span><br><span class="line">HEAD is now at 049d078 added the index file (To restore them type &quot;git stash apply&quot;)</span><br></pre></td></tr></table></figure>

<p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。</p>
<h1 id="SSH-传输设置"><a href="#SSH-传输设置" class="headerlink" title="SSH 传输设置"></a>SSH 传输设置</h1><p>Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p>
<p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>然后把公钥 id_rsa.pub 的内容复制到 Github “Account settings” 的 SSH Keys 中。</p>
<h1 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h1><p>忽略以下文件：</p>
<ul>
<li>操作系统自动生成的文件，比如缩略图；</li>
<li>编译生成的中间文件，比如 Java 编译产生的 .class 文件；</li>
<li>自己的敏感信息，比如存放口令的配置文件。</li>
</ul>
<p>不需要全部自己编写，可以到 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/github/gitignore</a> 中进行查询。</p>
<h1 id="Git-命令一览"><a href="#Git-命令一览" class="headerlink" title="Git 命令一览"></a>Git 命令一览</h1><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics///7a29acce-f243-4914-9f00-f2988c528412.jpg"/> </div><br>

<p>比较详细的地址：<a href="http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf" target="_blank" rel="noopener external nofollow noreferrer">http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP相关学习</title>
    <url>/posts/39368.html</url>
    <content><![CDATA[<pre><code>Http基础知识、方法、状态码、具体应用等</code></pre><ul>
<li><a href="#一-基础概念">一 、基础概念</a><ul>
<li><a href="#url">URL</a></li>
<li><a href="#请求和响应报文">请求和响应报文</a></li>
</ul>
</li>
<li><a href="#二http-方法">二、HTTP 方法</a><ul>
<li><a href="#get">GET</a></li>
<li><a href="#head">HEAD</a></li>
<li><a href="#post">POST</a></li>
<li><a href="#put">PUT</a></li>
<li><a href="#patch">PATCH</a></li>
<li><a href="#delete">DELETE</a></li>
<li><a href="#options">OPTIONS</a></li>
<li><a href="#connect">CONNECT</a></li>
<li><a href="#trace">TRACE</a></li>
</ul>
</li>
<li><a href="#三http-状态码">三、HTTP 状态码</a><ul>
<li><a href="#1xx-信息">1XX 信息</a></li>
<li><a href="#2xx-成功">2XX 成功</a></li>
<li><a href="#3xx-重定向">3XX 重定向</a></li>
<li><a href="#4xx-客户端错误">4XX 客户端错误</a></li>
<li><a href="#5xx-服务器错误">5XX 服务器错误</a></li>
</ul>
</li>
<li><a href="#四http-首部">四、HTTP 首部</a><ul>
<li><a href="#通用首部字段">通用首部字段</a></li>
<li><a href="#请求首部字段">请求首部字段</a></li>
<li><a href="#响应首部字段">响应首部字段</a></li>
<li><a href="#实体首部字段">实体首部字段</a></li>
</ul>
</li>
<li><a href="#五具体应用">五、具体应用</a><ul>
<li><a href="#cookie">Cookie</a></li>
<li><a href="#缓存">缓存</a></li>
<li><a href="#连接管理">连接管理</a></li>
<li><a href="#内容协商">内容协商</a></li>
<li><a href="#内容编码">内容编码</a></li>
<li><a href="#范围请求">范围请求</a></li>
<li><a href="#分块传输编码">分块传输编码</a></li>
<li><a href="#多部分对象集合">多部分对象集合</a></li>
<li><a href="#虚拟主机">虚拟主机</a></li>
<li><a href="#通信数据转发">通信数据转发</a></li>
</ul>
</li>
<li><a href="#六https">六、HTTPs</a><ul>
<li><a href="#加密">加密</a></li>
<li><a href="#认证">认证</a></li>
<li><a href="#完整性保护">完整性保护</a></li>
<li><a href="#https-的缺点">HTTPs 的缺点</a></li>
<li><a href="#配置-https">配置 HTTPs</a></li>
</ul>
</li>
<li><a href="#七http20">七、HTTP/2.0</a><ul>
<li><a href="#http1x-缺陷">HTTP/1.x 缺陷</a></li>
<li><a href="#二进制分帧层">二进制分帧层</a></li>
<li><a href="#服务端推送">服务端推送</a></li>
<li><a href="#首部压缩">首部压缩</a></li>
</ul>
</li>
<li><a href="#八get-和-post-的区别">八、GET 和 POST 的区别</a><ul>
<li><a href="#作用">作用</a></li>
<li><a href="#参数">参数</a></li>
<li><a href="#安全">安全</a></li>
<li><a href="#幂等性">幂等性</a></li>
<li><a href="#可缓存">可缓存</a></li>
<li><a href="#xmlhttprequest">XMLHttpRequest</a></li>
</ul>
</li>
<li><a href="#九http10-与-http11-的区别">九、HTTP/1.0 与 HTTP/1.1 的区别</a></li>
<li><a href="#参考资料">参考资料</a></li>
</ul>
<h1 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul>
<li>URI（Uniform Resource Identifier，统一资源标识符）</li>
<li>URL（Uniform Resource Locator，统一资源定位符）</li>
<li>URN（Uniform Resource Name，统一资源名称），例如 urn:isbn:0-486-27557-4。</li>
</ul>
<p>URI 包含 URL 和 URN，目前 WEB 只有 URL 比较流行，所以见到的基本都是 URL。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//f716427a-94f2-4875-9c86-98793cf5dcc3.jpg" width="400"/> </div><br>

<h2 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h2><h3 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="1. 请求报文"></a>1. 请求报文</h3><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//HTTP_RequestMessageExample.png" width=""/> </div><br>

<h3 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="2. 响应报文"></a>2. 响应报文</h3><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//HTTP_ResponseMessageExample.png" width=""/> </div><br>

<h1 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h1><p>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><blockquote>
<p>获取资源</p>
</blockquote>
<p>当前网络请求中，绝大部分使用的是 GET 方法。</p>
<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><blockquote>
<p>获取报文首部</p>
</blockquote>
<p>和 GET 方法一样，但是不返回报文实体主体部分。</p>
<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote>
<p>传输实体主体</p>
</blockquote>
<p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p>
<p>更多 POST 与 GET 的比较请见第八章。</p>
<h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><blockquote>
<p>上传文件</p>
</blockquote>
<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h2><blockquote>
<p>对资源进行部分修改</p>
</blockquote>
<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure>

<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><blockquote>
<p>删除文件</p>
</blockquote>
<p>与 PUT 功能相反，并且同样不带验证机制。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure>

<h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><blockquote>
<p>查询支持的方法</p>
</blockquote>
<p>查询指定的 URL 能够支持的方法。</p>
<p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p>
<h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><blockquote>
<p>要求在与代理服务器通信时建立隧道</p>
</blockquote>
<p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//dc00f70e-c5c8-4d20-baf1-2d70014a97e3.jpg" width=""/> </div><br>

<h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><blockquote>
<p>追踪路径</p>
</blockquote>
<p>服务器会将通信路径返回给客户端。</p>
<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>
<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p>
<h1 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h1><p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="center">类别</th>
<th align="center">原因短语</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1XX</td>
<td align="center">Informational（信息性状态码）</td>
<td align="center">接收的请求正在处理</td>
</tr>
<tr>
<td align="center">2XX</td>
<td align="center">Success（成功状态码）</td>
<td align="center">请求正常处理完毕</td>
</tr>
<tr>
<td align="center">3XX</td>
<td align="center">Redirection（重定向状态码）</td>
<td align="center">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td align="center">4XX</td>
<td align="center">Client Error（客户端错误状态码）</td>
<td align="center">服务器无法处理请求</td>
</tr>
<tr>
<td align="center">5XX</td>
<td align="center">Server Error（服务器错误状态码）</td>
<td align="center">服务器处理请求出错</td>
</tr>
</tbody></table>
<h2 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h2><ul>
<li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li>
</ul>
<h2 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h2><ul>
<li><p><strong>200 OK</strong> </p>
</li>
<li><p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>
</li>
<li><p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</p>
</li>
</ul>
<h2 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h2><ul>
<li><p><strong>301 Moved Permanently</strong> ：永久性重定向</p>
</li>
<li><p><strong>302 Found</strong> ：临时性重定向</p>
</li>
<li><p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>
</li>
<li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p>
</li>
<li><p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p>
</li>
<li><p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p>
</li>
</ul>
<h2 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h2><ul>
<li><p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p>
</li>
<li><p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>
</li>
<li><p><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p>
</li>
<li><p><strong>404 Not Found</strong> </p>
</li>
</ul>
<h2 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h2><ul>
<li><p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p>
</li>
<li><p><strong>503 Service Unavailable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>
</li>
</ul>
<h1 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h1><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p>
<p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p>
<h2 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Cache-Control</td>
<td align="center">控制缓存的行为</td>
</tr>
<tr>
<td align="center">Connection</td>
<td align="center">控制不再转发给代理的首部字段、管理持久连接</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">创建报文的日期时间</td>
</tr>
<tr>
<td align="center">Pragma</td>
<td align="center">报文指令</td>
</tr>
<tr>
<td align="center">Trailer</td>
<td align="center">报文末端的首部一览</td>
</tr>
<tr>
<td align="center">Transfer-Encoding</td>
<td align="center">指定报文主体的传输编码方式</td>
</tr>
<tr>
<td align="center">Upgrade</td>
<td align="center">升级为其他协议</td>
</tr>
<tr>
<td align="center">Via</td>
<td align="center">代理服务器的相关信息</td>
</tr>
<tr>
<td align="center">Warning</td>
<td align="center">错误通知</td>
</tr>
</tbody></table>
<h2 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Accept</td>
<td align="center">用户代理可处理的媒体类型</td>
</tr>
<tr>
<td align="center">Accept-Charset</td>
<td align="center">优先的字符集</td>
</tr>
<tr>
<td align="center">Accept-Encoding</td>
<td align="center">优先的内容编码</td>
</tr>
<tr>
<td align="center">Accept-Language</td>
<td align="center">优先的语言（自然语言）</td>
</tr>
<tr>
<td align="center">Authorization</td>
<td align="center">Web 认证信息</td>
</tr>
<tr>
<td align="center">Expect</td>
<td align="center">期待服务器的特定行为</td>
</tr>
<tr>
<td align="center">From</td>
<td align="center">用户的电子邮箱地址</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">请求资源所在服务器</td>
</tr>
<tr>
<td align="center">If-Match</td>
<td align="center">比较实体标记（ETag）</td>
</tr>
<tr>
<td align="center">If-Modified-Since</td>
<td align="center">比较资源的更新时间</td>
</tr>
<tr>
<td align="center">If-None-Match</td>
<td align="center">比较实体标记（与 If-Match 相反）</td>
</tr>
<tr>
<td align="center">If-Range</td>
<td align="center">资源未更新时发送实体 Byte 的范围请求</td>
</tr>
<tr>
<td align="center">If-Unmodified-Since</td>
<td align="center">比较资源的更新时间（与 If-Modified-Since 相反）</td>
</tr>
<tr>
<td align="center">Max-Forwards</td>
<td align="center">最大传输逐跳数</td>
</tr>
<tr>
<td align="center">Proxy-Authorization</td>
<td align="center">代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td align="center">Range</td>
<td align="center">实体的字节范围请求</td>
</tr>
<tr>
<td align="center">Referer</td>
<td align="center">对请求中 URI 的原始获取方</td>
</tr>
<tr>
<td align="center">TE</td>
<td align="center">传输编码的优先级</td>
</tr>
<tr>
<td align="center">User-Agent</td>
<td align="center">HTTP 客户端程序的信息</td>
</tr>
</tbody></table>
<h2 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Accept-Ranges</td>
<td align="center">是否接受字节范围请求</td>
</tr>
<tr>
<td align="center">Age</td>
<td align="center">推算资源创建经过时间</td>
</tr>
<tr>
<td align="center">ETag</td>
<td align="center">资源的匹配信息</td>
</tr>
<tr>
<td align="center">Location</td>
<td align="center">令客户端重定向至指定 URI</td>
</tr>
<tr>
<td align="center">Proxy-Authenticate</td>
<td align="center">代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td align="center">Retry-After</td>
<td align="center">对再次发起请求的时机要求</td>
</tr>
<tr>
<td align="center">Server</td>
<td align="center">HTTP 服务器的安装信息</td>
</tr>
<tr>
<td align="center">Vary</td>
<td align="center">代理服务器缓存的管理信息</td>
</tr>
<tr>
<td align="center">WWW-Authenticate</td>
<td align="center">服务器对客户端的认证信息</td>
</tr>
</tbody></table>
<h2 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h2><table>
<thead>
<tr>
<th align="center">首部字段名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Allow</td>
<td align="center">资源可支持的 HTTP 方法</td>
</tr>
<tr>
<td align="center">Content-Encoding</td>
<td align="center">实体主体适用的编码方式</td>
</tr>
<tr>
<td align="center">Content-Language</td>
<td align="center">实体主体的自然语言</td>
</tr>
<tr>
<td align="center">Content-Length</td>
<td align="center">实体主体的大小</td>
</tr>
<tr>
<td align="center">Content-Location</td>
<td align="center">替代对应资源的 URI</td>
</tr>
<tr>
<td align="center">Content-MD5</td>
<td align="center">实体主体的报文摘要</td>
</tr>
<tr>
<td align="center">Content-Range</td>
<td align="center">实体主体的位置范围</td>
</tr>
<tr>
<td align="center">Content-Type</td>
<td align="center">实体主体的媒体类型</td>
</tr>
<tr>
<td align="center">Expires</td>
<td align="center">实体主体过期的日期时间</td>
</tr>
<tr>
<td align="center">Last-Modified</td>
<td align="center">资源的最后修改日期时间</td>
</tr>
</tbody></table>
<h1 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p>
<p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p>
<p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB。</p>
<h3 id="1-用途"><a href="#1-用途" class="headerlink" title="1. 用途"></a>1. 用途</h3><ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>
</ul>
<h3 id="2-创建过程"><a href="#2-创建过程" class="headerlink" title="2. 创建过程"></a>2. 创建过程</h3><p>服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>

<p>客户端之后对同一个服务器发送请求时，会从浏览器中读出 Cookie 信息通过 Cookie 请求首部字段发送给服务器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>

<h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h3><ul>
<li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li>
<li>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure>

<h3 id="4-JavaScript-获取-Cookie"><a href="#4-JavaScript-获取-Cookie" class="headerlink" title="4. JavaScript 获取 Cookie"></a>4. JavaScript 获取 Cookie</h3><p>通过 <code>Document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.cookie = "yummy_cookie=choco";</span><br><span class="line">document.cookie = "tasty_cookie=strawberry";</span><br><span class="line">console.log(document.cookie);</span><br></pre></td></tr></table></figure>

<h3 id="5-Secure-和-HttpOnly"><a href="#5-Secure-和-HttpOnly" class="headerlink" title="5. Secure 和 HttpOnly"></a>5. Secure 和 HttpOnly</h3><p>标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p>
<p>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 <code>Document.cookie</code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure>

<h3 id="6-作用域"><a href="#6-作用域" class="headerlink" title="6. 作用域"></a>6. 作用域</h3><p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p>
<p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“/“) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：</p>
<ul>
<li>/docs</li>
<li>/docs/Web/</li>
<li>/docs/Web/HTTP</li>
</ul>
<h3 id="7-Session"><a href="#7-Session" class="headerlink" title="7. Session"></a>7. Session</h3><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p>
<p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在内存型数据库中，比如 Redis，效率会更高。</p>
<p>使用 Session 维护用户登录的过程如下：</p>
<ul>
<li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li>
<li>服务器验证该用户名和密码；</li>
<li>如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li>
<li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li>
<li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li>
</ul>
<p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p>
<h3 id="8-浏览器禁用-Cookie"><a href="#8-浏览器禁用-Cookie" class="headerlink" title="8. 浏览器禁用 Cookie"></a>8. 浏览器禁用 Cookie</h3><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。</p>
<h3 id="9-Cookie-与-Session-选择"><a href="#9-Cookie-与-Session-选择" class="headerlink" title="9. Cookie 与 Session 选择"></a>9. Cookie 与 Session 选择</h3><ul>
<li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存取任何类型的数据，因此在考虑数据复杂性时首选 Session；</li>
<li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</li>
<li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ul>
<li>缓解服务器压力；</li>
<li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li>
</ul>
<h3 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><ul>
<li>让代理服务器进行缓存；</li>
<li>让客户端浏览器进行缓存。</li>
</ul>
<h3 id="3-Cache-Control"><a href="#3-Cache-Control" class="headerlink" title="3. Cache-Control"></a>3. Cache-Control</h3><p>HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。</p>
<p><strong>（一）禁止进行缓存</strong> </p>
<p>no-store 指令规定不能对请求或响应的任何一部分进行缓存。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></table></figure>

<p><strong>（二）强制确认缓存</strong> </p>
<p>no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效才将能使用该缓存对客户端的请求进行响应。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure>

<p><strong>（三）私有缓存和公共缓存</strong> </p>
<p>private 指令规定了将资源作为私有缓存，只能被单独用户所使用，一般存储在用户浏览器中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: private</span><br></pre></td></tr></table></figure>

<p>public 指令规定了将资源作为公共缓存，可以被多个用户所使用，一般存储在代理服务器中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: public</span><br></pre></td></tr></table></figure>

<p><strong>（四）缓存过期机制</strong> </p>
<p>max-age 指令出现在请求报文中，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p>
<p>max-age 指令出现在响应报文中，表示缓存资源在缓存服务器中保存的时间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure>

<p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p>
<ul>
<li>在 HTTP/1.1 中，会优先处理 max-age 指令；</li>
<li>在 HTTP/1.0 中，max-age 指令会被忽略掉。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Expires: Wed, 04 Jul 2012 08:26:05 GMT</span><br></pre></td></tr></table></figure>

<h3 id="4-缓存验证"><a href="#4-缓存验证" class="headerlink" title="4. 缓存验证"></a>4. 缓存验证</h3><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <code>http://www.google.com/</code> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ETag: "82e22293907ce725faf67773957acd12"</span><br></pre></td></tr></table></figure>

<p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">If-None-Match: "82e22293907ce725faf67773957acd12"</span><br></pre></td></tr></table></figure>

<p>Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的 304 Not Modified 响应。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>

<h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><div align="center"> <img src= "/img/loading.gif" data-src="https://aotu.io/notes/2016/08/16/nginx-https/index.html//HTTP1_x_Connections.png" width="800"/> </div><br>

<h3 id="1-短连接与长连接"><a href="#1-短连接与长连接" class="headerlink" title="1. 短连接与长连接"></a>1. 短连接与长连接</h3><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要断开一次 TCP 连接，连接建立和断开的开销会很大。</p>
<p>长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p>
<ul>
<li>从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；</li>
<li>在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 <code>Connection : Keep-Alive</code>。</li>
</ul>
<h3 id="2-流水线"><a href="#2-流水线" class="headerlink" title="2. 流水线"></a>2. 流水线</h3><p>默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于会受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</p>
<p>流水线是在同一条长连接上发出连续的请求，而不用等待响应返回，这样可以避免连接延迟。</p>
<h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p>
<h3 id="1-类型"><a href="#1-类型" class="headerlink" title="1. 类型"></a>1. 类型</h3><p><strong>（一）服务端驱动型</strong> </p>
<p>客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Languag，服务器根据这些字段返回特定的资源。</p>
<p>它存在以下问题：</p>
<ul>
<li>服务器很难知道客户端浏览器的全部信息；</li>
<li>客户端提供的信息相当冗长（HTTP/2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）；</li>
<li>给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。</li>
</ul>
<p><strong>（二）代理驱动型</strong> </p>
<p>服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。</p>
<h3 id="2-Vary"><a href="#2-Vary" class="headerlink" title="2. Vary"></a>2. Vary</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure>

<p>在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。</p>
<p>例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 <code>Vary: Accept-Language</code> 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。</p>
<h2 id="内容编码"><a href="#内容编码" class="headerlink" title="内容编码"></a>内容编码</h2><p>内容编码将实体主体进行压缩，从而减少传输的数据量。</p>
<p>常用的内容编码有：gzip、compress、deflate、identity。</p>
<p>浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，在响应的 Vary 首部至少要包含 Content-Encoding。</p>
<h2 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h2><p>如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。</p>
<h3 id="1-Range"><a href="#1-Range" class="headerlink" title="1. Range"></a>1. Range</h3><p>在请求报文中添加 Range 首部字段指定请求的范围。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure>

<p>请求成功的话服务器返回的响应包含 206 Partial Content 状态码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure>

<h3 id="2-Accept-Ranges"><a href="#2-Accept-Ranges" class="headerlink" title="2. Accept-Ranges"></a>2. Accept-Ranges</h3><p>响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>

<h3 id="3-响应状态码"><a href="#3-响应状态码" class="headerlink" title="3. 响应状态码"></a>3. 响应状态码</h3><ul>
<li>在请求成功的情况下，服务器会返回 206 Partial Content 状态码。</li>
<li>在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。</li>
<li>在不支持范围请求的情况下，服务器会返回 200 OK 状态码。</li>
</ul>
<h2 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h2><p>Chunked Transfer Coding，可以把数据分割成多块，让浏览器逐步显示页面。</p>
<h2 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h2><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p>
<p>例如，上传多个表单时可以使用如下方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure>

<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p>
<h2 id="通信数据转发"><a href="#通信数据转发" class="headerlink" title="通信数据转发"></a>通信数据转发</h2><h3 id="1-代理"><a href="#1-代理" class="headerlink" title="1. 代理"></a>1. 代理</h3><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p>
<p>使用代理的主要目的是：</p>
<ul>
<li>缓存</li>
<li>负载均衡</li>
<li>网络访问控制</li>
<li>访问日志记录</li>
</ul>
<p>代理服务器分为正向代理和反向代理两种：</p>
<ul>
<li>用户察觉得到正向代理的存在。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//a314bb79-5b18-4e63-a976-3448bffa6f1b.png" width=""/> </div><br>

<ul>
<li>而反向代理一般位于内部网络中，用户察觉不到。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//2d09a847-b854-439c-9198-b29c65810944.png" width=""/> </div><br>

<h3 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h3><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p>
<h3 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h3><p>使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。</p>
<h1 id="六、HTTPs"><a href="#六、HTTPs" class="headerlink" title="六、HTTPs"></a>六、HTTPs</h1><p>HTTP 有以下安全性问题：</p>
<ul>
<li>使用明文进行通信，内容可能会被窃听；</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li>
<li>无法证明报文的完整性，报文有可能遭篡改。</li>
</ul>
<p>HTTPs 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPs 使用了隧道进行通信。</p>
<p>通过使用 SSL，HTTPs 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//ssl-offloading.jpg" width="700"/> </div><br>

<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h3 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h3><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：无法安全地将密钥传输给通信方。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//7fffa4b8-b36d-471f-ad0c-a88ee763bb76.png" width="600"/> </div><br>

<h3 id="2-非对称密钥加密"><a href="#2-非对称密钥加密" class="headerlink" title="2.非对称密钥加密"></a>2.非对称密钥加密</h3><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p>
<p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p>
<p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p>
<ul>
<li>优点：可以更安全地将公开密钥传输给通信发送方；</li>
<li>缺点：运算速度慢。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//39ccb299-ee99-4dd1-b8b4-2f9ec9495cb4.png" width="600"/> </div><br>

<h3 id="3-HTTPs-采用的加密方式"><a href="#3-HTTPs-采用的加密方式" class="headerlink" title="3. HTTPs 采用的加密方式"></a>3. HTTPs 采用的加密方式</h3><p>HTTPs 采用混合的加密机制，使用非对称密钥加密用于传输对称密钥来保证安全性，之后使用对称密钥加密进行通信来保证效率。（下图中的 Session Key 就是对称密钥）</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//How-HTTPS-Works.png" width="600"/> </div><br>

<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>通过使用  <strong>证书</strong>  来对通信方进行认证。</p>
<p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p>
<p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p>
<p>进行 HTTPs 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p>
<p>通信开始时，客户端需要使用服务器的公开密钥将自己的私有密钥传输给服务器，之后再进行对称密钥加密。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//2017-06-11-ca.png" width=""/> </div><br>

<h2 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h2><p>SSL 提供报文摘要功能来进行完整性保护。</p>
<p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p>
<p>HTTPs 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p>
<h2 id="HTTPs-的缺点"><a href="#HTTPs-的缺点" class="headerlink" title="HTTPs 的缺点"></a>HTTPs 的缺点</h2><ul>
<li>因为需要进行加密解密等过程，因此速度会更慢；</li>
<li>需要支付证书授权的高费用。</li>
</ul>
<h2 id="配置-HTTPs"><a href="#配置-HTTPs" class="headerlink" title="配置 HTTPs"></a>配置 HTTPs</h2><p><a href="https://aotu.io/notes/2016/08/16/nginx-https/index.html" target="_blank" rel="noopener external nofollow noreferrer">Nginx 配置 HTTPS 服务器</a></p>
<h1 id="七、HTTP-2-0"><a href="#七、HTTP-2-0" class="headerlink" title="七、HTTP/2.0"></a>七、HTTP/2.0</h1><h2 id="HTTP-1-x-缺陷"><a href="#HTTP-1-x-缺陷" class="headerlink" title="HTTP/1.x 缺陷"></a>HTTP/1.x 缺陷</h2><p> HTTP/1.x 实现简单是以牺牲应用性能为代价的：</p>
<ul>
<li>客户端需要使用多个连接才能实现并发和缩短延迟；</li>
<li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li>
<li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li>
</ul>
<h2 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h2><p>HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//86e6a91d-a285-447a-9345-c5484b8d0c47.png" width="400"/> </div><br>

<p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p>
<ul>
<li>一个数据流都有一个唯一标识符和可选的优先级信息，用于承载双向信息。</li>
<li>消息（Message）是与逻辑请求或响应消息对应的完整的一系列帧。</li>
<li>帧（Fram）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://aotu.io/notes/2016/08/16/nginx-https/index.html//af198da1-2480-4043-b07f-a3b91a88b815.png" width="600"/> </div><br>

<h2 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h2><p>HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//e3f1657c-80fc-4dfa-9643-bf51abd201c6.png" width="800"/> </div><br>

<h2 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h2><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。</p>
<p>HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p>
<p>不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//_u4E0B_u8F7D.png" width="600"/> </div><br>

<h1 id="八、GET-和-POST-的区别"><a href="#八、GET-和-POST-的区别" class="headerlink" title="八、GET 和 POST 的区别"></a>八、GET 和 POST 的区别</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>GET 用于获取资源，而 POST 用于传输实体主体。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。</p>
<p>因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 <code>中文</code> 会转换为 <code>%E4%B8%AD%E6%96%87</code>，而空格会转换为 <code>%20</code>。POST 参考支持标准字符集。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test&#x2F;demo_form.asp?name1&#x3D;value1&amp;name2&#x3D;value2 HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;test&#x2F;demo_form.asp HTTP&#x2F;1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1&#x3D;value1&amp;name2&#x3D;value2</span><br></pre></td></tr></table></figure>

<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p>
<p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p>
<p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p>
<p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p>
<h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p>
<p>所有的安全方法也都是幂等的。</p>
<p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p>
<p>GET /pageX HTTP/1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p>POST /add_row HTTP/1.1 不是幂等的，如果调用多次，就会增加多行记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 1nd row</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></table></figure>

<p>DELETE /idX/delete HTTP/1.1 是幂等的，即便不同的请求接收到的状态码不一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404</span><br></pre></td></tr></table></figure>

<h2 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h2><p>如果要对响应进行缓存，需要满足以下条件：</p>
<ul>
<li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li>
<li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li>
<li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li>
</ul>
<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p>
<blockquote>
<p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p>
</blockquote>
<ul>
<li>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li>
<li>而 GET 方法 Header 和 Data 会一起发送。</li>
</ul>
<h1 id="九、HTTP-1-0-与-HTTP-1-1-的区别"><a href="#九、HTTP-1-0-与-HTTP-1-1-的区别" class="headerlink" title="九、HTTP/1.0 与 HTTP/1.1 的区别"></a>九、HTTP/1.0 与 HTTP/1.1 的区别</h1><blockquote>
<p>详细内容请见上文</p>
</blockquote>
<ul>
<li><p>HTTP/1.1 默认是长连接</p>
</li>
<li><p>HTTP/1.1 支持管线化处理</p>
</li>
<li><p>HTTP/1.1 支持同时打开多个 TCP 连接</p>
</li>
<li><p>HTTP/1.1 支持虚拟主机</p>
</li>
<li><p>HTTP/1.1 新增状态码 100</p>
</li>
<li><p>HTTP/1.1 支持分块传输编码</p>
</li>
<li><p>HTTP/1.1 新增缓存处理指令 max-age</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>上野宣. 图解 HTTP[M]. 人民邮电出版社, 2014.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener external nofollow noreferrer">MDN : HTTP</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener external nofollow noreferrer">HTTP/2 简介</a></li>
<li><a href="http://php.net/manual/zh/function.htmlspecialchars.php" target="_blank" rel="noopener external nofollow noreferrer">htmlspecialchars</a></li>
<li><a href="https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement" target="_blank" rel="noopener external nofollow noreferrer">How to Fix SQL Injection Using Java PreparedStatement &amp; CallableStatement</a></li>
<li><a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="noopener external nofollow noreferrer">浅谈 HTTP 中 Get 与 Post 的区别</a></li>
<li><a href="https://www.webdancers.com/are-http-and-www-necesary/" target="_blank" rel="noopener external nofollow noreferrer">Are http:// and www really necessary?</a></li>
<li><a href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener external nofollow noreferrer">HTTP (HyperText Transfer Protocol)</a></li>
<li><a href="https://www.igvita.com/2011/12/01/web-vpn-secure-proxies-with-spdy-chrome/" target="_blank" rel="noopener external nofollow noreferrer">Web-VPN: Secure Proxies with SPDY &amp; Chrome</a></li>
<li><a href="http://en.wikipedia.org/wiki/File:HTTP_persistent_connection.svg" target="_blank" rel="noopener external nofollow noreferrer">File:HTTP persistent connection.svg</a></li>
<li><a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener external nofollow noreferrer">Proxy server</a></li>
<li><a href="https://www.x-cart.com/blog/what-is-https-and-ssl.html" target="_blank" rel="noopener external nofollow noreferrer">What Is This HTTPS/SSL Thing And Why Should You Care?</a></li>
<li><a href="https://securebox.comodo.com/ssl-sniffing/ssl-offloading/" target="_blank" rel="noopener external nofollow noreferrer">What is SSL Offloading?</a></li>
<li><a href="https://docs.oracle.com/cd/E19424-01/820-4811/6ng8i26bn/index.html" target="_blank" rel="noopener external nofollow noreferrer">Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption</a></li>
<li><a href="https://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication" target="_blank" rel="noopener external nofollow noreferrer">An Introduction to Mutual SSL Authentication</a></li>
<li><a href="https://danielmiessler.com/study/url-uri/" target="_blank" rel="noopener external nofollow noreferrer">The Difference Between URLs and URIs</a></li>
<li><a href="https://juejin.im/entry/5766c29d6be3ff006a31b84e#comment" target="_blank" rel="noopener external nofollow noreferrer">Cookie 与 Session 的区别</a></li>
<li><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener external nofollow noreferrer">COOKIE 和 SESSION 有什么区别</a></li>
<li><a href="https://harttle.land/2015/08/10/cookie-session.html" target="_blank" rel="noopener external nofollow noreferrer">Cookie/Session 的机制与安全</a></li>
<li><a href="https://shijianan.com/2017/06/11/https/" target="_blank" rel="noopener external nofollow noreferrer">HTTPS 证书原理</a></li>
<li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn" target="_blank" rel="noopener external nofollow noreferrer">What is the difference between a URI, a URL and a URN?</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener external nofollow noreferrer">XMLHttpRequest</a></li>
<li><a href="https://blog.josephscott.org/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/" target="_blank" rel="noopener external nofollow noreferrer">XMLHttpRequest (XHR) Uses Multiple Packets for HTTP POST?</a></li>
<li><a href="https://www.ssl2buy.com/wiki/symmetric-vs-asymmetric-encryption-what-are-differences" target="_blank" rel="noopener external nofollow noreferrer">Symmetric vs. Asymmetric Encryption – What are differences?</a></li>
<li><a href="https://www.kancloud.cn/digest/web-performance-http2" target="_blank" rel="noopener external nofollow noreferrer">Web 性能优化与 HTTP/2</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener external nofollow noreferrer">HTTP/2 简介</a></li>
</ul>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/posts/43648.html</url>
    <content><![CDATA[<pre><code>IDEA的快捷键整理记录</code></pre><ol>
<li>———–自动代码——– </li>
</ol>
<p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码<br>例如要输入for(User user : users)只需输入user.for+Tab<br>再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。代码标签输入完成后，按Tab，生成代码。</p>
<p>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等)   或者右键（Generate）<br>fori/sout/psvm + Tab<br>Ctrl+Alt+T  生成try catch  或者 Alt+enter<br>CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{} 里<br>Ctrl + O 重写方法<br>Ctrl + I 实现方法<br>Ctr+shift+U 大小写转化<br>ALT+回车    导入包,自动修正<br>ALT+/       代码提示<br>CTRL+J      自动代码<br>Ctrl+Shift+J，整合两行为一行<br>CTRL+空格   代码提示<br>CTRL+SHIFT+SPACE 自动补全代码<br>CTRL+ALT+L  格式化代码<br>CTRL+ALT+I  自动缩进<br>CTRL+ALT+O  优化导入的类和包<br>ALT+INSERT  生成代码(如GET,SET方法,构造函数等)<br>CTRL+E      最近更改的代码<br>CTRL+ALT+SPACE  类名或接口名提示<br>CTRL+P   方法参数提示<br>CTRL+Q，可以看到当前方法的声明 </p>
<p>Shift+F6  重构-重命名 (包、类、方法、变量、甚至注释等)<br>Ctrl+Alt+V 提取变量 </p>
<ol start="2">
<li>———–查询快捷键——–<br>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地<br>CTRL+ALT+ left/right 前后导航编辑过的地方<br>ALT+7  靠左窗口显示当前文件的结构<br>Ctrl+F12 浮动显示当前文件的结构<br>ALT+F7 找到你的函数或者变量或者类的所有引用到的地方<br>CTRL+ALT+F7  找到你的函数或者变量或者类的所有引用到的地方 </li>
</ol>
<p>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>双击SHIFT 在项目的所有目录查找文件<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>CTRL+G   定位行<br>CTRL+F   在当前窗口查找文本<br>CTRL+SHIFT+F  在指定窗口查找文本<br>CTRL+R   在 当前窗口替换文本<br>CTRL+SHIFT+R  在指定窗口替换文本<br>ALT+SHIFT+C  查找修改的文件<br>CTRL+E   最近打开的文件<br>F3   向下查找关键字出现位置<br>SHIFT+F3  向上一个关键字出现位置<br>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本<br>F4   查找变量来源  </p>
<p>CTRL+SHIFT+O  弹出显示查找内容<br>Ctrl+W 选中代码，连续按会有其他效果<br>F2 或Shift+F2 高亮错误或警告快速定位<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下 </p>
<p>Ctrl+B 快速打开光标处的类或方法<br>CTRL+ALT+B  找所有的子类<br>CTRL+SHIFT+B  找变量的类  </p>
<p>Ctrl+Shift+上下键  上下移动代码<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ） </p>
<p>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档 </p>
<p>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板 </p>
<p>Alt+ left/right 切换代码视图<br>ALT+ ↑/↓  在方法间快速移动定位<br>CTRL+ALT+ left/right 前后导航编辑过的地方<br>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地<br>Alt+6    查找TODO </p>
<p>3.———————其他快捷键——————-<br>SHIFT+ENTER 另起一行<br>CTRL+Z   倒退(撤销)<br>CTRL+SHIFT+Z  向前(取消撤销)<br>CTRL+ALT+F12  资源管理器打开文件夹<br>ALT+F1   查找文件所在目录位置<br>SHIFT+ALT+INSERT 竖编辑模式<br>CTRL+F4  关闭当前窗口<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单） </p>
<p>4.————–svn快捷键————— </p>
<p>ctrl+k 提交代码到SVN </p>
<p>ctrl+t 更新代码<br>5.————–调试快捷键—————<br>其实常用的 就是F8 F7 F9 最值得一提的 就是Drop Frame  可以让运行过的代码从头再来<br>alt+F8        debug时选中查看值<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F8，查看断点 </p>
<p>F7，步入<br>Shift+F7，智能步入<br>Alt+Shift+F7，强制步入<br>F8，步过<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过 </p>
<p>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点 </p>
<p>6.————–重构—————<br>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联  </p>
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>I/O模型及其复用</title>
    <url>/posts/5058.html</url>
    <content><![CDATA[<pre><code>I/O的阻塞与非阻塞、同步与异步、I/O的复用、工作模式</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一io-模型">一、I/O 模型</a><ul>
<li><a href="#阻塞式-io">阻塞式 I/O</a></li>
<li><a href="#非阻塞式-io">非阻塞式 I/O</a></li>
<li><a href="#io-复用">I/O 复用</a></li>
<li><a href="#信号驱动-io">信号驱动 I/O</a></li>
<li><a href="#异步-io">异步 I/O</a></li>
<li><a href="#同步-io-与异步-io">同步 I/O 与异步 I/O</a></li>
<li><a href="#五大-io-模型比较">五大 I/O 模型比较</a></li>
</ul>
</li>
<li><a href="#二io-复用">二、I/O 复用</a><ul>
<li><a href="#select">select</a></li>
<li><a href="#poll">poll</a></li>
<li><a href="#比较">比较</a></li>
<li><a href="#epoll">epoll</a></li>
<li><a href="#工作模式">工作模式</a></li>
<li><a href="#应用场景">应用场景</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、I-O-模型"><a href="#一、I-O-模型" class="headerlink" title="一、I/O 模型"></a>一、I/O 模型</h1><p>一个输入操作通常包括两个阶段：</p>
<ul>
<li>等待数据准备好</li>
<li>从内核向进程复制数据</li>
</ul>
<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p>
<p>Unix 下有五种 I/O 模型：</p>
<ul>
<li>阻塞式 I/O</li>
<li>非阻塞式 I/O</li>
<li>I/O 复用（select 和 poll）</li>
<li>信号驱动式 I/O（SIGIO）</li>
<li>异步 I/O（AIO）</li>
</ul>
<h2 id="阻塞式-I-O"><a href="#阻塞式-I-O" class="headerlink" title="阻塞式 I/O"></a>阻塞式 I/O</h2><p>应用进程被阻塞，直到数据复制到应用进程缓冲区中才返回。</p>
<p>应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，因此不消耗 CPU 时间，这种模型的执行效率会比较高。</p>
<p>下图中，recvfrom 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492928416812_4.png"/> </div><br>

<h2 id="非阻塞式-I-O"><a href="#非阻塞式-I-O" class="headerlink" title="非阻塞式 I/O"></a>非阻塞式 I/O</h2><p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。</p>
<p>由于 CPU 要处理更多的系统调用，因此这种模型是比较低效的。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492929000361_5.png"/> </div><br>

<h2 id="I-O-复用"><a href="#I-O-复用" class="headerlink" title="I/O 复用"></a>I/O 复用</h2><p>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读，这一过程会被阻塞，当某一个套接字可读时返回。之后再使用 recvfrom 把数据从内核复制到进程中。</p>
<p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</p>
<p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。并且相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492929444818_6.png"/> </div><br>

<h2 id="信号驱动-I-O"><a href="#信号驱动-I-O" class="headerlink" title="信号驱动 I/O"></a>信号驱动 I/O</h2><p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p>
<p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492929553651_7.png"/> </div><br>

<h2 id="异步-I-O"><a href="#异步-I-O" class="headerlink" title="异步 I/O"></a>异步 I/O</h2><p>进行 aio_read 系统调用会立即返回，应用进程继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p>
<p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492930243286_8.png"/> </div><br>

<h2 id="同步-I-O-与异步-I-O"><a href="#同步-I-O-与异步-I-O" class="headerlink" title="同步 I/O 与异步 I/O"></a>同步 I/O 与异步 I/O</h2><ul>
<li>同步 I/O：应用进程在调用 recvfrom 操作时会阻塞。</li>
<li>异步 I/O：不会阻塞。</li>
</ul>
<p>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，虽然非阻塞式 I/O 和信号驱动 I/O 在等待数据阶段不会阻塞，但是在之后的将数据从内核复制到应用进程这个操作会阻塞。</p>
<h2 id="五大-I-O-模型比较"><a href="#五大-I-O-模型比较" class="headerlink" title="五大 I/O 模型比较"></a>五大 I/O 模型比较</h2><p>前四种 I/O 模型的主要区别在于第一个阶段，而第二个阶段是一样的：将数据从内核复制到应用进程过程中，应用进程会被阻塞。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1492928105791_3.png"/> </div><br>

<h1 id="二、I-O-复用"><a href="#二、I-O-复用" class="headerlink" title="二、I/O 复用"></a>二、I/O 复用</h1><p>select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。</p>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义。</p>
<p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。</p>
<p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd_set fd_in, fd_out;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset the sets</span></span><br><span class="line">FD_ZERO( &amp;fd_in );</span><br><span class="line">FD_ZERO( &amp;fd_out );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock1 for input events</span></span><br><span class="line">FD_SET( sock1, &amp;fd_in );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock2 for output events</span></span><br><span class="line">FD_SET( sock2, &amp;fd_out );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find out which socket has the largest numeric value as select requires it</span></span><br><span class="line"><span class="keyword">int</span> largest_sock = sock1 &gt; sock2 ? sock1 : sock2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait up to 10 seconds</span></span><br><span class="line">tv.tv_sec = <span class="number">10</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call the select</span></span><br><span class="line"><span class="keyword">int</span> ret = select( largest_sock + <span class="number">1</span>, &amp;fd_in, &amp;fd_out, <span class="literal">NULL</span>, &amp;tv );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if select actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == <span class="number">-1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( FD_ISSET( sock1, &amp;fd_in ) )</span><br><span class="line">        <span class="comment">// input event on sock1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( FD_ISSET( sock2, &amp;fd_out ) )</span><br><span class="line">        <span class="comment">// output event on sock2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>pollfd 使用链表实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The structure for two events</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock1 for input</span></span><br><span class="line">fds[<span class="number">0</span>].fd = sock1;</span><br><span class="line">fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock2 for output</span></span><br><span class="line">fds[<span class="number">1</span>].fd = sock2;</span><br><span class="line">fds[<span class="number">1</span>].events = POLLOUT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait 10 seconds</span></span><br><span class="line"><span class="keyword">int</span> ret = poll( &amp;fds, <span class="number">2</span>, <span class="number">10000</span> );</span><br><span class="line"><span class="comment">// Check if poll actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == <span class="number">-1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// If we detect the event, zero it out so we can reuse the structure</span></span><br><span class="line">    <span class="keyword">if</span> ( pfd[<span class="number">0</span>].revents &amp; POLLIN )</span><br><span class="line">        pfd[<span class="number">0</span>].revents = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// input event on sock1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( pfd[<span class="number">1</span>].revents &amp; POLLOUT )</span><br><span class="line">        pfd[<span class="number">1</span>].revents = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// output event on sock2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h3><p>select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。</p>
<ul>
<li>select 会修改描述符，而 poll 不会；</li>
<li>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 的描述符类型使用链表实现，没有描述符的数量的限制；</li>
<li>poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。</li>
<li>如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。</li>
</ul>
<h3 id="2-速度"><a href="#2-速度" class="headerlink" title="2. 速度"></a>2. 速度</h3><p>select 和 poll 速度都比较慢。</p>
<ul>
<li>select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</li>
<li>select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符。</li>
</ul>
<h3 id="3-可移植性"><a href="#3-可移植性" class="headerlink" title="3. 可移植性"></a>3. 可移植性</h3><p>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</p>
<h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。</p>
<p>从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</p>
<p>epoll 仅适用于 Linux OS。</p>
<p>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</p>
<p>epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.</span></span><br><span class="line"><span class="comment">// The function argument is ignored (it was not before, but now it is), so put your favorite number here</span></span><br><span class="line"><span class="keyword">int</span> pollingfd = epoll_create( <span class="number">0xCAFE</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( pollingfd &lt; <span class="number">0</span> )</span><br><span class="line"> <span class="comment">// report error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the epoll structure in case more members are added in future</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span> = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Associate the connection class instance with the event. You can associate anything</span></span><br><span class="line"><span class="comment">// you want, epoll does not use this information. We store a connection class pointer, pConnection1</span></span><br><span class="line">ev.data.ptr = pConnection1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor for input, and do not automatically rearm the descriptor after the event</span></span><br><span class="line">ev.events = EPOLLIN | EPOLLONESHOT;</span><br><span class="line"><span class="comment">// Add the descriptor into the monitoring list. We can do it even if another thread is</span></span><br><span class="line"><span class="comment">// waiting in epoll_wait - the descriptor will be properly added</span></span><br><span class="line"><span class="keyword">if</span> ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1-&gt;<span class="built_in">getSocket</span>(), &amp;ev ) != <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// report error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">pevents</span>[ 20 ];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">ready</span> = epoll_wait( pollingfd, pevents, <span class="number">20</span>, <span class="number">10000</span> );</span><br><span class="line"><span class="comment">// Check if epoll actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == <span class="number">-1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Check if any events detected</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( pevents[i].events &amp; EPOLLIN )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Get back our connection pointer</span></span><br><span class="line">            Connection * c = (Connection*) pevents[i].data.ptr;</span><br><span class="line">            c-&gt;handleReadEvent();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。</p>
<h3 id="1-LT-模式"><a href="#1-LT-模式" class="headerlink" title="1. LT 模式"></a>1. LT 模式</h3><p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p>
<h3 id="2-ET-模式"><a href="#2-ET-模式" class="headerlink" title="2. ET 模式"></a>2. ET 模式</h3><p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p>
<p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p>
<h3 id="1-select-应用场景"><a href="#1-select-应用场景" class="headerlink" title="1. select 应用场景"></a>1. select 应用场景</h3><p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时要求更高的场景，比如核反应堆的控制。</p>
<p>select 可移植性更好，几乎被所有主流平台所支持。</p>
<h3 id="2-poll-应用场景"><a href="#2-poll-应用场景" class="headerlink" title="2. poll 应用场景"></a>2. poll 应用场景</h3><p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p>
<p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p>
<p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且epoll 的描述符存储在内核，不容易调试。</p>
<h3 id="3-epoll-应用场景"><a href="#3-epoll-应用场景" class="headerlink" title="3. epoll 应用场景"></a>3. epoll 应用场景</h3><p>只需要运行在 Linux 平台上，并且有非常大量的描述符需要同时轮询，而且这些连接最好是长连接。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004.</li>
<li><a href="https://www.ibm.com/developerworks/linux/library/l-async/" target="_blank" rel="noopener external nofollow noreferrer">Boost application performance using asynchronous I/O</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365683(v=vs.85).aspx" target="_blank" rel="noopener external nofollow noreferrer">Synchronous and Asynchronous I/O</a></li>
<li><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener external nofollow noreferrer">Linux IO 模式及 select、poll、epoll 详解</a></li>
<li><a href="https://daniel.haxx.se/docs/poll-vs-select.html" target="_blank" rel="noopener external nofollow noreferrer">poll vs select vs event-based</a></li>
<li><a href="http://www.ulduzsoft.com/2014/01/select-poll-epoll-practical-difference-for-system-architects/" target="_blank" rel="noopener external nofollow noreferrer">select / poll / epoll: practical difference for system architects</a></li>
<li><a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/" target="_blank" rel="noopener external nofollow noreferrer">Browse the source code of userspace/glibc/sysdeps/unix/sysv/linux/ online</a></li>
</ul>
]]></content>
      <tags>
        <tag>I/O</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA--IO知识整理</title>
    <url>/posts/42610.html</url>
    <content><![CDATA[<pre><code>Java  I/O  的知识内容        磁盘操作、字节操作、字符操作、网络操作、缓冲。。。</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一概览">一、概览</a></li>
<li><a href="#二磁盘操作">二、磁盘操作</a></li>
<li><a href="#三字节操作">三、字节操作</a></li>
<li><a href="#四字符操作">四、字符操作</a></li>
<li><a href="#五对象操作">五、对象操作</a></li>
<li><a href="#六网络操作">六、网络操作</a><ul>
<li><a href="#inetaddress">InetAddress</a></li>
<li><a href="#url">URL</a></li>
<li><a href="#sockets">Sockets</a></li>
<li><a href="#datagram">Datagram</a></li>
</ul>
</li>
<li><a href="#七nio">七、NIO</a><ul>
<li><a href="#流与块">流与块</a></li>
<li><a href="#通道与缓冲区">通道与缓冲区</a></li>
<li><a href="#缓冲区状态变量">缓冲区状态变量</a></li>
<li><a href="#文件-nio-实例">文件 NIO 实例</a></li>
<li><a href="#选择器">选择器</a></li>
<li><a href="#套接字-nio-实例">套接字 NIO 实例</a></li>
<li><a href="#内存映射文件">内存映射文件</a></li>
<li><a href="#对比">对比</a></li>
</ul>
</li>
<li><a href="#八参考资料">八、参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h1><p>Java 的 I/O 大概可以分成以下几类：</p>
<ul>
<li>磁盘操作：File</li>
<li>字节操作：InputStream 和 OutputStream</li>
<li>字符操作：Reader 和 Writer</li>
<li>对象操作：Serializable</li>
<li>网络操作：Socket</li>
<li>新的输入/输出：NIO</li>
</ul>
<h1 id="二、磁盘操作"><a href="#二、磁盘操作" class="headerlink" title="二、磁盘操作"></a>二、磁盘操作</h1><p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。</p>
<p>递归地输出一个目录下所有文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="keyword">null</span> || !dir.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dir.isFile()) &#123;</span><br><span class="line">        System.out.println(dir.getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (File file : dir.listFiles()) &#123;</span><br><span class="line">        listAllFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、字节操作"><a href="#三、字节操作" class="headerlink" title="三、字节操作"></a>三、字节操作</h1><p>使用字节流操作进行文件复制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String src, String dist)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(dist);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span> * <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read() 最多读取 buffer.length 个字节</span></span><br><span class="line">    <span class="comment">// 返回的是实际读取的个数</span></span><br><span class="line">    <span class="comment">// 返回 -1 的时候表示读到 eof，即文件尾</span></span><br><span class="line">    <span class="keyword">while</span> (in.read(buffer, <span class="number">0</span>, buffer.length) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="../pics//DP-Decorator-java.io.png" width="500"/> </div><br>

<p>Java I/O 使用了装饰者模式来实现。以 InputStream 为例，</p>
<ul>
<li>InputStream 是抽象组件；</li>
<li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li>
<li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能，例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</li>
</ul>
<p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br></pre></td></tr></table></figure>

<p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。</p>
<h1 id="四、字符操作"><a href="#四、字符操作" class="headerlink" title="四、字符操作"></a>四、字符操作</h1><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符。但是在程序中操作的通常是字符形式的数据，因此需要提供对字符进行操作的方法。</p>
<ul>
<li>InputStreamReader 实现从字节流解码成字符流；</li>
<li>OutputStreamWriter 实现字符流编码成为字节流。</li>
</ul>
<p>逐行输出文本文件的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileContent</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(fileReader);</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></span><br><span class="line">    <span class="comment">// 在调用 BufferedReader 的 close() 方法时会去调用 fileReader 的 close() 方法</span></span><br><span class="line">    <span class="comment">// 因此只要一个 close() 调用即可</span></span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p>
<p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p>
<ul>
<li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li>
<li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li>
<li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li>
</ul>
<p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。</p>
<p>Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p>
<p>String 可以看成一个字符序列，可以指定一个编码方式将它编码为字节序列，也可以指定一个编码方式将一个字节序列解码为 String。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"中文"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure>

<p>在调用无参数 getBytes() 方法时，默认的编码方式不是 UTF-16be。双字节编码的好处是可以使用一个 char 存储中文和英文，而将 String 转为 bytes[] 字节数组就不再需要这个好处，因此也就不再需要双字节编码。getBytes() 的默认编码方式与平台有关，一般为 UTF-8。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes();</span><br></pre></td></tr></table></figure>

<h1 id="五、对象操作"><a href="#五、对象操作" class="headerlink" title="五、对象操作"></a>五、对象操作</h1><p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p>
<ul>
<li>序列化：ObjectOutputStream.writeObject()</li>
<li>反序列化：ObjectInputStream.readObject()</li>
</ul>
<p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    A a1 = <span class="keyword">new</span> A(<span class="number">123</span>, <span class="string">"abc"</span>);</span><br><span class="line">    String objectFile = <span class="string">"file/a1"</span>;</span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(objectFile));</span><br><span class="line">    objectOutputStream.writeObject(a1);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">    ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(objectFile));</span><br><span class="line">    A a2 = (A) objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line">    System.out.println(a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> String y;</span><br><span class="line"></span><br><span class="line">    A(<span class="keyword">int</span> x, String y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x = "</span> + x + <span class="string">"  "</span> + <span class="string">"y = "</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p>
<p>transient 关键字可以使一些属性不会被序列化。</p>
<p>ArrayList 中存储数据的数组是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure>

<h1 id="六、网络操作"><a href="#六、网络操作" class="headerlink" title="六、网络操作"></a>六、网络操作</h1><p>Java 中的网络支持：</p>
<ul>
<li>InetAddress：用于表示网络上的硬件资源，即 IP 地址；</li>
<li>URL：统一资源定位符；</li>
<li>Sockets：使用 TCP 协议实现网络通信；</li>
<li>Datagram：使用 UDP 协议实现网络通信。</li>
</ul>
<h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><p>没有公有的构造函数，只能通过静态方法来创建实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InetAddress.getByName(String host);</span><br><span class="line">InetAddress.getByAddress(<span class="keyword">byte</span>[] address);</span><br></pre></td></tr></table></figure>

<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>可以直接从 URL 中读取字节流数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 字节流 */</span></span><br><span class="line">    InputStream is = url.openStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 字符流 */</span></span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 提供缓存功能 */</span></span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sockets"><a href="#Sockets" class="headerlink" title="Sockets"></a>Sockets</h2><ul>
<li>ServerSocket：服务器端类</li>
<li>Socket：客户端类</li>
<li>服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//ClienteServidorSockets1521731145260.jpg"/> </div><br>

<h2 id="Datagram"><a href="#Datagram" class="headerlink" title="Datagram"></a>Datagram</h2><ul>
<li>DatagramPacket：数据包类</li>
<li>DatagramSocket：通信类</li>
</ul>
<h1 id="七、NIO"><a href="#七、NIO" class="headerlink" title="七、NIO"></a>七、NIO</h1><ul>
<li><a href="http://tutorials.jenkov.com/java-nio/index.html" target="_blank" rel="noopener external nofollow noreferrer">Java NIO Tutorial</a></li>
<li><a href="https://tech.meituan.com/nio.html" target="_blank" rel="noopener external nofollow noreferrer">Java NIO 浅析</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html" target="_blank" rel="noopener external nofollow noreferrer">IBM: NIO 入门</a></li>
</ul>
<p>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>
<h2 id="流与块"><a href="#流与块" class="headerlink" title="流与块"></a>流与块</h2><p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p>
<p>面向流的 I/O 一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p>
<p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p>
<p>I/O 包和 NIO 已经很好地集成了，java.io.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，java.io.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p>
<h2 id="通道与缓冲区"><a href="#通道与缓冲区" class="headerlink" title="通道与缓冲区"></a>通道与缓冲区</h2><h3 id="1-通道"><a href="#1-通道" class="headerlink" title="1. 通道"></a>1. 通道</h3><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p>
<p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p>
<p>通道包括以下类型：</p>
<ul>
<li>FileChannel：从文件中读写数据；</li>
<li>DatagramChannel：通过 UDP 读写网络中数据；</li>
<li>SocketChannel：通过 TCP 读写网络中数据；</li>
<li>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li>
</ul>
<h3 id="2-缓冲区"><a href="#2-缓冲区" class="headerlink" title="2. 缓冲区"></a>2. 缓冲区</h3><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p>
<p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p>
<p>缓冲区包括以下类型：</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
</ul>
<h2 id="缓冲区状态变量"><a href="#缓冲区状态变量" class="headerlink" title="缓冲区状态变量"></a>缓冲区状态变量</h2><ul>
<li>capacity：最大容量；</li>
<li>position：当前已经读写的字节数；</li>
<li>limit：还可以读写的字节数。</li>
</ul>
<p>状态变量的改变过程举例：</p>
<p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png"/> </div><br>

<p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//80804f52-8815-4096-b506-48eef3eed5c6.png"/> </div><br>

<p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//952e06bd-5a65-4cab-82e4-dd1536462f38.png"/> </div><br>

<p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png"/> </div><br>

<p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//67bf5487-c45d-49b6-b9c0-a058d8c68902.png"/> </div><br>

<h2 id="文件-NIO-实例"><a href="#文件-NIO-实例" class="headerlink" title="文件 NIO 实例"></a>文件 NIO 实例</h2><p>以下展示了使用 NIO 快速复制文件的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fastCopy</span><span class="params">(String src, String dist)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获得源文件的输入字节流 */</span></span><br><span class="line">    FileInputStream fin = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取输入字节流的文件通道 */</span></span><br><span class="line">    FileChannel fcin = fin.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取目标文件的输出字节流 */</span></span><br><span class="line">    FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(dist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取输出字节流的通道 */</span></span><br><span class="line">    FileChannel fcout = fout.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为缓冲区分配 1024 个字节 */</span></span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 从输入通道中读取数据到缓冲区中 */</span></span><br><span class="line">        <span class="keyword">int</span> r = fcin.read(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* read() 返回 -1 表示 EOF */</span></span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 切换读写 */</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把缓冲区的内容写入输出文件中 */</span></span><br><span class="line">        fcout.write(buffer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 清空缓冲区 */</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p>
<p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p>
<p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p>
<p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件具有更好的性能。</p>
<p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//4d930e22-f493-49ae-8dff-ea21cd6895dc.png"/> </div><br>

<h3 id="1-创建选择器"><a href="#1-创建选择器" class="headerlink" title="1. 创建选择器"></a>1. 创建选择器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure>

<h3 id="2-将通道注册到选择器上"><a href="#2-将通道注册到选择器上" class="headerlink" title="2. 将通道注册到选择器上"></a>2. 将通道注册到选择器上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">ssChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure>

<p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p>
<p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：</p>
<ul>
<li>SelectionKey.OP_CONNECT</li>
<li>SelectionKey.OP_ACCEPT</li>
<li>SelectionKey.OP_READ</li>
<li>SelectionKey.OP_WRITE</li>
</ul>
<p>它们在 SelectionKey 的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_READ = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_WRITE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_CONNECT = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_ACCEPT = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>

<h3 id="3-监听事件"><a href="#3-监听事件" class="headerlink" title="3. 监听事件"></a>3. 监听事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = selector.select();</span><br></pre></td></tr></table></figure>

<p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p>
<h3 id="4-获取到达的事件"><a href="#4-获取到达的事件" class="headerlink" title="4. 获取到达的事件"></a>4. 获取到达的事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line"><span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line">    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-事件循环"><a href="#5-事件循环" class="headerlink" title="5. 事件循环"></a>5. 事件循环</h3><p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = selector.select();</span><br><span class="line">    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line">    <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">        SelectionKey key = keyIterator.next();</span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="套接字-NIO-实例"><a href="#套接字-NIO-实例" class="headerlink" title="套接字 NIO 实例"></a>套接字 NIO 实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">        ssChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = ssChannel.socket();</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                    ServerSocketChannel ssChannel1 = (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 服务器会为每个新连接创建一个 SocketChannel</span></span><br><span class="line">                    SocketChannel sChannel = ssChannel1.accept();</span><br><span class="line">                    sChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 这个新连接主要用于从客户端读取数据</span></span><br><span class="line">                    sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">                    SocketChannel sChannel = (SocketChannel) key.channel();</span><br><span class="line">                    System.out.println(readDataFromSocketChannel(sChannel));</span><br><span class="line">                    sChannel.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readDataFromSocketChannel</span><span class="params">(SocketChannel sChannel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        StringBuilder data = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            buffer.clear();</span><br><span class="line">            <span class="keyword">int</span> n = sChannel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">int</span> limit = buffer.limit();</span><br><span class="line">            <span class="keyword">char</span>[] dst = <span class="keyword">new</span> <span class="keyword">char</span>[limit];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                dst[i] = (<span class="keyword">char</span>) buffer.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            data.append(dst);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        String s = <span class="string">"hello world"</span>;</span><br><span class="line">        out.write(s.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h2><p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。</p>
<p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p>
<p>下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>NIO 与普通 I/O 的区别主要有以下两点：</p>
<ul>
<li>NIO 是非阻塞的</li>
<li>NIO 面向块，I/O 面向流</li>
</ul>
<h1 id="八、参考资料"><a href="#八、参考资料" class="headerlink" title="八、参考资料"></a>八、参考资料</h1><ul>
<li>Eckel B, 埃克尔, 昊鹏, 等. Java 编程思想 [M]. 机械工业出版社, 2002.</li>
<li><a href="https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html" target="_blank" rel="noopener external nofollow noreferrer">IBM: NIO 入门</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html" target="_blank" rel="noopener external nofollow noreferrer">IBM: 深入分析 Java I/O 的工作机制</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.htm" target="_blank" rel="noopener external nofollow noreferrer">IBM: 深入分析 Java 中的中文编码问题</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="noopener external nofollow noreferrer">IBM: Java 序列化的高级认识</a></li>
<li><a href="http://blog.csdn.net/shimiso/article/details/24990499" target="_blank" rel="noopener external nofollow noreferrer">NIO 与传统 IO 的区别</a></li>
<li><a href="http://stg-tud.github.io/sedc/Lecture/ws13-14/5.3-Decorator.html#mode=document" target="_blank" rel="noopener external nofollow noreferrer">Decorator Design Pattern</a></li>
<li><a href="http://labojava.blogspot.com/2012/12/socket-multicast.html" target="_blank" rel="noopener external nofollow noreferrer">Socket Multicast</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础知识</title>
    <url>/posts/19072.html</url>
    <content><![CDATA[<pre><code>Java相关的基础知识、数据类型、String、特性、关键字、反射、异常、泛型、注解等</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一数据类型">一、数据类型</a><ul>
<li><a href="#包装类型">包装类型</a></li>
<li><a href="#缓存池">缓存池</a></li>
</ul>
</li>
<li><a href="#二string">二、String</a><ul>
<li><a href="#概览">概览</a></li>
<li><a href="#不可变的好处">不可变的好处</a></li>
<li><a href="#string,-stringbuffer-and-stringbuilder">String, StringBuffer and StringBuilder</a></li>
<li><a href="#stringintern">String.intern()</a></li>
</ul>
</li>
<li><a href="#三运算">三、运算</a><ul>
<li><a href="#参数传递">参数传递</a></li>
<li><a href="#float-与-double">float 与 double</a></li>
<li><a href="#隐式类型转换">隐式类型转换</a></li>
<li><a href="#switch">switch</a></li>
</ul>
</li>
<li><a href="#四继承">四、继承</a><ul>
<li><a href="#访问权限">访问权限</a></li>
<li><a href="#抽象类与接口">抽象类与接口</a></li>
<li><a href="#super">super</a></li>
<li><a href="#重写与重载">重写与重载</a></li>
</ul>
</li>
<li><a href="#五object-通用方法">五、Object 通用方法</a><ul>
<li><a href="#概览">概览</a></li>
<li><a href="#equals">equals()</a></li>
<li><a href="#hashcode">hashCode()</a></li>
<li><a href="#tostring">toString()</a></li>
<li><a href="#clone">clone()</a></li>
</ul>
</li>
<li><a href="#六关键字">六、关键字</a><ul>
<li><a href="#final">final</a></li>
<li><a href="#static">static</a></li>
</ul>
</li>
<li><a href="#七反射">七、反射</a></li>
<li><a href="#八异常">八、异常</a></li>
<li><a href="#九泛型">九、泛型</a></li>
<li><a href="#十注解">十、注解</a></li>
<li><a href="#十一特性">十一、特性</a><ul>
<li><a href="#java-各版本的新特性">Java 各版本的新特性</a></li>
<li><a href="#java-与-c-的区别">Java 与 C++ 的区别</a></li>
<li><a href="#jre-or-jdk">JRE or JDK</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h1><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>八个基本类型：</p>
<ul>
<li>boolean/1</li>
<li>byte/8</li>
<li>char/16</li>
<li>short/16</li>
<li>int/32</li>
<li>float/32</li>
<li>long/64</li>
<li>double/64</li>
</ul>
<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱</span></span><br></pre></td></tr></table></figure>

<h2 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h2><p>new Integer(123) 与 Integer.valueOf(123) 的区别在于，new Integer(123) 每次都会新建一个对象，而 Integer.valueOf(123) 可能会使用缓存对象，因此多次使用 Integer.valueOf(123) 会取得同一个对象的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">System.out.println(x == y);    <span class="comment">// false</span></span><br><span class="line">Integer z = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">Integer k = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">System.out.println(z == k);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>编译器会在自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer m = <span class="number">123</span>;</span><br><span class="line">Integer n = <span class="number">123</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Java 8 中，Integer 缓存池的大小默认为 -128~127。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// high value may be configured by property</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    String integerCacheHighPropValue =</span><br><span class="line">        sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">    <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">            i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">            <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    high = h;</span><br><span class="line"></span><br><span class="line">    cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> j = low;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">        cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 还将一些其它基本类型的值放在缓冲池中，包含以下这些：</p>
<ul>
<li>boolean values true and false</li>
<li>all byte values</li>
<li>short values between -128 and 127</li>
<li>int values between -128 and 127</li>
<li>char in the range \u0000 to \u007F</li>
</ul>
<p>因此在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。</p>
<p><a href="https://stackoverflow.com/questions/9030817/differences-between-new-integer123-integer-valueof123-and-just-123" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow : Differences between new Integer(123), Integer.valueOf(123) and just 123
</a></p>
<h1 id="二、String"><a href="#二、String" class="headerlink" title="二、String"></a>二、String</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>String 被声明为 final，因此它不可被继承。</p>
<p>内部使用 char 数组存储数据，该数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure>

<h2 id="不可变的好处"><a href="#不可变的好处" class="headerlink" title="不可变的好处"></a>不可变的好处</h2><p><strong>1. 可以缓存 hash 值</strong> </p>
<p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</p>
<p><strong>2. String Pool 的需要</strong> </p>
<p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//f76067a5-7d5f-4135-9549-8199c77d8f1c.jpg" width=""/> </div><br>

<p><strong>3. 安全性</strong> </p>
<p>String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</p>
<p><strong>4. 线程安全</strong> </p>
<p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p>
<p><a href="https://www.programcreek.com/2013/04/why-string-is-immutable-in-java/" target="_blank" rel="noopener external nofollow noreferrer">Program Creek : Why String is immutable in Java?</a></p>
<h2 id="String-StringBuffer-and-StringBuilder"><a href="#String-StringBuffer-and-StringBuilder" class="headerlink" title="String, StringBuffer and StringBuilder"></a>String, StringBuffer and StringBuilder</h2><p><strong>1. 可变性</strong> </p>
<ul>
<li>String 不可变</li>
<li>StringBuffer 和 StringBuilder 可变</li>
</ul>
<p><strong>2. 线程安全</strong> </p>
<ul>
<li>String 不可变，因此是线程安全的</li>
<li>StringBuilder 不是线程安全的</li>
<li>StringBuffer 是线程安全的，内部使用 synchronized 来同步</li>
</ul>
<p><a href="https://stackoverflow.com/questions/2971315/string-stringbuffer-and-stringbuilder" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow : String, StringBuffer, and StringBuilder</a></p>
<h2 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h2><p>使用 String.intern() 可以保证相同内容的字符串变量引用相同的内存对象。</p>
<p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用，这个方法首先把 s1 引用的对象放到 String Pool（字符串常量池）中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"aaa"</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"aaa"</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果是采用 “bbb” 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s4 = <span class="string">"bbb"</span>;</span><br><span class="line">String s5 = <span class="string">"bbb"</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在 Java 7 之前，字符串常量池被放在运行时常量池中，它属于永久代。而在 Java 7，字符串常量池被移到 Native Method 中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/10578984/what-is-string-interning" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow : What is String interning?</a> </li>
<li><a href="https://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="noopener external nofollow noreferrer">深入解析 String#intern</a></li>
</ul>
<h1 id="三、运算"><a href="#三、运算" class="headerlink" title="三、运算"></a>三、运算</h1><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>Java 的参数是以值传递的形式传入方法中，而不是引用传递。</p>
<p>以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。但是如果在方法中改变对象的字段值会改变原对象该字段值，因为改变的是同一个地址指向的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Dog(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getObjectAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassByValueExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">"A"</span>);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="comment">// Dog@4554617c</span></span><br><span class="line">        func(dog);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="comment">// Dog@4554617c</span></span><br><span class="line">        System.out.println(dog.getName());          <span class="comment">// A</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="comment">// Dog@4554617c</span></span><br><span class="line">        dog = <span class="keyword">new</span> Dog(<span class="string">"B"</span>);</span><br><span class="line">        System.out.println(dog.getObjectAddress()); <span class="comment">// Dog@74a14482</span></span><br><span class="line">        System.out.println(dog.getName());          <span class="comment">// B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow: Is Java “pass-by-reference” or “pass-by-value”?</a></p>
<h2 id="float-与-double"><a href="#float-与-double" class="headerlink" title="float 与 double"></a>float 与 double</h2><p>1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。Java 不能隐式执行向下转型，因为这会使得精度降低。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// float f = 1.1;</span></span><br></pre></td></tr></table></figure>

<p>1.1f 字面量才是 float 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">1.1f</span>;</span><br></pre></td></tr></table></figure>

<h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// s1 = s1 + 1;</span></span><br></pre></td></tr></table></figure>

<p>但是使用 += 运算符可以执行隐式类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s1 += <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s1 = (<span class="keyword">short</span>) (s1 + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/8710619/why-dont-javas-compound-assignment-operators-require-casting" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow : Why don’t Java’s +=, -=, *=, /= compound assignment operators require casting?</a></p>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">switch</span> (s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">        System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">        System.out.println(<span class="string">"bbb"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch 不支持 long，是因为 switch 的设计初衷是为那些只需要对少数的几个值进行等值判断，如果值过于复杂，那么还是用 if 比较合适。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// long x = 111;</span></span><br><span class="line"><span class="comment">// switch (x) &#123; // Incompatible types. Found: 'long', required: 'char, byte, short, int, Character, Byte, Short, Integer, String, or an enum'</span></span><br><span class="line"><span class="comment">//     case 111:</span></span><br><span class="line"><span class="comment">//         System.out.println(111);</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//     case 222:</span></span><br><span class="line"><span class="comment">//         System.out.println(222);</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/2676210/why-cant-your-switch-statement-data-type-be-long-java" target="_blank" rel="noopener external nofollow noreferrer">StackOverflow : Why can’t your switch statement data type be long, Java?</a></p>
<h1 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h1><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。</p>
<p>可以对类或类中的成员（字段以及方法）加上访问修饰符。</p>
<ul>
<li>成员可见表示其它类可以用这个类的实例对象访问到该成员；</li>
<li>类可见表示其它类可以用这个类创建实例对象。</li>
</ul>
<p>protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。</p>
<p>设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。</p>
<p>如果子类的方法覆盖了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。</p>
<p>字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。可以使用公有的 getter 和 setter 方法来替换公有字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessWithInnerClassExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InnerClass innerClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessWithInnerClassExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        innerClass = <span class="keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> innerClass.x; <span class="comment">// 直接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><p><strong>1. 抽象类</strong> </p>
<p>抽象类和抽象方法都使用 abstract 进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。</p>
<p>抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClassExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExtendClassExample</span> <span class="keyword">extends</span> <span class="title">AbstractClassExample</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractClassExample ac1 = new AbstractClassExample(); // 'AbstractClassExample' is abstract; cannot be instantiated</span></span><br><span class="line">AbstractClassExample ac2 = <span class="keyword">new</span> AbstractExtendClassExample();</span><br><span class="line">ac2.func1();</span><br></pre></td></tr></table></figure>

<p><strong>2. 接口</strong> </p>
<p>接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。</p>
<p>从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。</p>
<p>接口的成员（字段 + 方法）默认都是 public 的，并且不允许定义为 private 或者 protected。</p>
<p>接口的字段默认都是 static 和 final 的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// int y;                // Variable 'y' might not have been initialized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> z = <span class="number">0</span>;       <span class="comment">// Modifier 'public' is redundant for interface fields</span></span><br><span class="line">    <span class="comment">// private int k = 0;   // Modifier 'private' not allowed here</span></span><br><span class="line">    <span class="comment">// protected int l = 0; // Modifier 'protected' not allowed here</span></span><br><span class="line">    <span class="comment">// private void fun3(); // Modifier 'private' not allowed here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceImplementExample</span> <span class="keyword">implements</span> <span class="title">InterfaceExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"func1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// InterfaceExample ie1 = new InterfaceExample(); // 'InterfaceExample' is abstract; cannot be instantiated</span></span><br><span class="line">InterfaceExample ie2 = <span class="keyword">new</span> InterfaceImplementExample();</span><br><span class="line">ie2.func1();</span><br><span class="line">System.out.println(InterfaceExample.x);</span><br></pre></td></tr></table></figure>

<p><strong>3. 比较</strong> </p>
<ul>
<li>从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。</li>
<li>从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。</li>
<li>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</li>
<li>接口的方法只能是 public 的，而抽象类的方法可以有多种访问权限。</li>
</ul>
<p><strong>4. 使用选择</strong> </p>
<p>使用抽象类：</p>
<ul>
<li>需要在几个相关的类中共享代码。</li>
<li>需要能控制继承来的成员的访问权限，而不是都为 public。</li>
<li>需要继承非静态（non-static）和非常量（non-final）字段。</li>
</ul>
<p>使用接口：</p>
<ul>
<li>需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；</li>
<li>需要使用多重继承。</li>
</ul>
<p>在很多情况下，接口优先于抽象类，因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。</p>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/l-javainterface-abstract/" target="_blank" rel="noopener external nofollow noreferrer">深入理解 abstract class 和 interface</a></li>
<li><a href="https://dzone.com/articles/when-to-use-abstract-class-and-intreface" target="_blank" rel="noopener external nofollow noreferrer">When to Use Abstract Class and Interface</a></li>
</ul>
<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul>
<li>访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而完成一些初始化的工作。</li>
<li>访问父类的成员：如果子类覆盖了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperExample.func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperExtendExample</span> <span class="keyword">extends</span> <span class="title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperExtendExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.func();</span><br><span class="line">        System.out.println(<span class="string">"SuperExtendExample.func()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SuperExample e = <span class="keyword">new</span> SuperExtendExample(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">e.func();</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">SuperExample.func()</span><br><span class="line">SuperExtendExample.func()</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/super.html" target="_blank" rel="noopener external nofollow noreferrer">Using the Keyword super</a></p>
<h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><ul>
<li><p>重写（Override）存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法，子类的返回值类型要等于或者小于父类的返回值；</p>
</li>
<li><p>重载（Overload）存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。应该注意的是，返回值不同，其它都相同不算是重载。</p>
</li>
</ul>
<h1 id="五、Object-通用方法"><a href="#五、Object-通用方法" class="headerlink" title="五、Object 通用方法"></a>五、Object 通用方法</h1><h2 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p><strong>1. 等价关系</strong> </p>
<p>（一）自反性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(x); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>（二）对称性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(y) == y.equals(x); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>（三）传递性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class="line">    x.equals(z); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure>

<p>（四）一致性</p>
<p>多次调用 equals() 方法结果不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(y) == x.equals(y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>（五）与 null 的比较</p>
<p>对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.equals(<span class="keyword">null</span>); <span class="comment">// false;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. equals() 与 ==</strong> </p>
<ul>
<li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li>
<li>对于引用类型，== 判断两个实例是否引用同一个对象，而 equals() 判断引用的对象是否等价，根据引用对象 equals() 方法的具体实现来进行比较。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">System.out.println(x == y);      <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 实现</strong> </p>
<ul>
<li>检查是否为同一个对象的引用，如果是直接返回 true；</li>
<li>检查是否是同一个类型，如果不是，直接返回 false；</li>
<li>将 Object 实例进行转型；</li>
<li>判断每个关键域是否相等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EqualExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        EqualExample that = (EqualExample) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x != that.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y != that.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> z == that.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h2><p>hasCode() 返回散列值，而 equals() 是用来判断两个实例是否等价。等价的两个实例散列值一定要相同，但是散列值相同的两个实例不一定等价。</p>
<p>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个实例散列值也相等。</p>
<p>下面的代码中，新建了两个等价的实例，并将它们添加到 HashSet 中。我们希望将这两个实例当成一样的，只在集合中添加一个实例，但是因为 EqualExample 没有实现 hasCode() 方法，因此这两个实例的散列值是不同的，最终导致集合添加了两个等价的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EqualExample e1 = <span class="keyword">new</span> EqualExample(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">EqualExample e2 = <span class="keyword">new</span> EqualExample(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(e1.equals(e2)); <span class="comment">// true</span></span><br><span class="line">HashSet&lt;EqualExample&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(e1);</span><br><span class="line">set.add(e2);</span><br><span class="line">System.out.println(set.size());   <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>理想的散列函数应当具有均匀性，即不相等的实例应当均匀分布到所有可能的散列值上。这就要求了散列函数要把所有域的值都考虑进来，可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。</p>
<p>一个数与 31 相乘可以转换成移位和减法：<code>31*x == (x&lt;&lt;5)-x</code>，编译器会自动进行这个优化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">    result = <span class="number">31</span> * result + x;</span><br><span class="line">    result = <span class="number">31</span> * result + y;</span><br><span class="line">    result = <span class="number">31</span> * result + z;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>默认返回 ToStringExample@4554617c 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToStringExample</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ToStringExample example = <span class="keyword">new</span> ToStringExample(<span class="number">123</span>);</span><br><span class="line">System.out.println(example.toString());</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ToStringExample@4554617c</span><br></pre></td></tr></table></figure>

<h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p><strong>1. cloneable</strong> </p>
<p>clone() 是 Object 的 protect 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CloneExample e1 = <span class="keyword">new</span> CloneExample();</span><br><span class="line"><span class="comment">// CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'</span></span><br></pre></td></tr></table></figure>

<p>重写 clone() 得到以下实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> CloneExample <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (CloneExample)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CloneExample e1 = <span class="keyword">new</span> CloneExample();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    CloneExample e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">java.lang.CloneNotSupportedException: CloneExample</span><br></pre></td></tr></table></figure>

<p>以上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneExample</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。</p>
<p><strong>2. 深拷贝与浅拷贝</strong> </p>
<ul>
<li>浅拷贝：拷贝实例和原始实例的引用类型引用同一个对象；</li>
<li>深拷贝：拷贝实例和原始实例的引用类型引用不同对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShallowCloneExample</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShallowCloneExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ShallowCloneExample <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ShallowCloneExample) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ShallowCloneExample e1 = <span class="keyword">new</span> ShallowCloneExample();</span><br><span class="line">ShallowCloneExample e2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 222</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneExample</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepCloneExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeepCloneExample <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepCloneExample result = (DeepCloneExample) <span class="keyword">super</span>.clone();</span><br><span class="line">        result.arr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            result.arr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DeepCloneExample e1 = <span class="keyword">new</span> DeepCloneExample();</span><br><span class="line">DeepCloneExample e2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneConstructorExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloneConstructorExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloneConstructorExample</span><span class="params">(CloneConstructorExample original)</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[original.arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; original.arr.length; i++) &#123;</span><br><span class="line">            arr[i] = original.arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CloneConstructorExample e1 = <span class="keyword">new</span> CloneConstructorExample();</span><br><span class="line">CloneConstructorExample e2 = <span class="keyword">new</span> CloneConstructorExample(e1);</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h1 id="六、关键字"><a href="#六、关键字" class="headerlink" title="六、关键字"></a>六、关键字</h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><strong>1. 数据</strong> </p>
<p>声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p>
<ul>
<li>对于基本类型，final 使数值不变；</li>
<li>对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// x = 2;  // cannot assign value to final variable 'x'</span></span><br><span class="line"><span class="keyword">final</span> A y = <span class="keyword">new</span> A();</span><br><span class="line">y.a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2. 方法</strong> </p>
<p>声明方法不能被子类重写。</p>
<p>private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p>
<p><strong>3. 类</strong> </p>
<p>声明类不允许被继承。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><strong>1. 静态变量</strong> </p>
<ul>
<li>静态变量：类所有的实例都共享静态变量，可以直接通过类名来访问它；静态变量在内存中只存在一份。</li>
<li>实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;         <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> y;  <span class="comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int x = A.x;  // Non-static field 'x' cannot be referenced from a static context</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="keyword">int</span> x = a.x;</span><br><span class="line">        <span class="keyword">int</span> y = A.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 静态方法</strong> </p>
<p>静态方法在类加载的时候就存在了，它不依赖于任何实例，所以静态方法必须有实现，也就是说它不能是抽象方法（abstract）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public abstract static void func2();  // Illegal combination of modifiers: 'abstract' and 'static'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = x;</span><br><span class="line">        <span class="comment">// int b = y;  // Non-static field 'y' cannot be referenced from a static context</span></span><br><span class="line">        <span class="comment">// int b = this.y;     // 'A.this' cannot be referenced from a static context</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 静态语句块</strong> </p>
<p>静态语句块在类初始化时运行一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>

<p><strong>4. 静态内部类</strong> </p>
<p>非静态内部类依赖于外部类的实例，而静态内部类不需要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// InnerClass innerClass = new InnerClass(); // 'OuterClass.this' cannot be referenced from a static context</span></span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        InnerClass innerClass = outerClass.<span class="keyword">new</span> InnerClass();</span><br><span class="line">        StaticInnerClass staticInnerClass = <span class="keyword">new</span> StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态内部类不能访问外部类的非静态的变量和方法。</p>
<p><strong>5. 静态导包</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.xxx.ClassName.*</span><br></pre></td></tr></table></figure>

<p>在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。</p>
<p><strong>6. 初始化顺序</strong> </p>
<p>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String staticField = <span class="string">"静态变量"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"静态语句块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String field = <span class="string">"实例变量"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"普通语句块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后才是构造函数的初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InitialOrderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在继承的情况下，初始化顺序为：</p>
<ul>
<li>父类（静态变量、静态语句块）</li>
<li>子类（静态变量、静态语句块）</li>
<li>父类（实例变量、普通语句块）</li>
<li>父类（构造函数）</li>
<li>子类（实例变量、普通语句块）</li>
<li>子类（构造函数）</li>
</ul>
<h1 id="七、反射"><a href="#七、反射" class="headerlink" title="七、反射"></a>七、反射</h1><p>每个类都有一个  <strong>Class</strong>  对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p>
<p>类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 Class.forName(“com.mysql.jdbc.Driver”) 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p>
<p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。</p>
<p>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：</p>
<ul>
<li><strong>Field</strong> ：可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；</li>
<li><strong>Method</strong> ：可以使用 invoke() 方法调用与 Method 对象关联的方法；</li>
<li><strong>Constructor</strong> ：可以用 Constructor 创建新的对象。</li>
</ul>
<p><strong>Advantages of Using Reflection:</strong> </p>
<ul>
<li><strong>Extensibility Features</strong>  : An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.</li>
<li><strong>Class Browsers and Visual Development Environments</strong>  :  A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.</li>
<li><strong>Debuggers and Test Tools</strong>  : Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.</li>
</ul>
<p><strong>Drawbacks of Reflection:</strong> </p>
<p>Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</p>
<ul>
<li><strong>Performance Overhead</strong>  : Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</li>
<li><strong>Security Restrictions</strong>  : Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.</li>
<li><strong>Exposure of Internals</strong>  :Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</li>
</ul>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/reflect/index.html" target="_blank" rel="noopener external nofollow noreferrer">Trail: The Reflection API</a></li>
<li><a href="http://www.sczyh30.com/posts/Java/java-reflection-1/" target="_blank" rel="noopener external nofollow noreferrer">深入解析 Java 反射（1）- 基础</a></li>
</ul>
<h1 id="八、异常"><a href="#八、异常" class="headerlink" title="八、异常"></a>八、异常</h1><p>Throwable 可以用来表示任何可以作为异常抛出的类，分为两种： <strong>Error</strong>  和 <strong>Exception</strong>。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种：</p>
<ul>
<li><strong>受检异常</strong> ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；</li>
<li><strong>非受检异常</strong> ：是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//PPjwP.png" width="600"/> </div><br>

<ul>
<li><a href="https://www.tianmaying.com/tutorial/Java-Exception" target="_blank" rel="noopener external nofollow noreferrer">Java 入门之异常处理</a></li>
<li><a href="http://www.importnew.com/7383.html" target="_blank" rel="noopener external nofollow noreferrer">Java 异常的面试问题及答案 -Part 1</a></li>
</ul>
<h1 id="九、泛型"><a href="#九、泛型" class="headerlink" title="九、泛型"></a>九、泛型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// T stands for "Type"</span></span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123; <span class="keyword">this</span>.t = t; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> t; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.importnew.com/24029.html" target="_blank" rel="noopener external nofollow noreferrer">Java 泛型详解</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1033693" target="_blank" rel="noopener external nofollow noreferrer">10 道 Java 泛型面试题</a></li>
</ul>
<h1 id="十、注解"><a href="#十、注解" class="headerlink" title="十、注解"></a>十、注解</h1><p>Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。</p>
<p><a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html" target="_blank" rel="noopener external nofollow noreferrer">注解 Annotation 实现原理与自定义注解例子</a></p>
<h1 id="十一、特性"><a href="#十一、特性" class="headerlink" title="十一、特性"></a>十一、特性</h1><h2 id="Java-各版本的新特性"><a href="#Java-各版本的新特性" class="headerlink" title="Java 各版本的新特性"></a>Java 各版本的新特性</h2><p><strong>New highlights in Java SE 8</strong> </p>
<ol>
<li>Lambda Expressions</li>
<li>Pipelines and Streams</li>
<li>Date and Time API</li>
<li>Default Methods</li>
<li>Type Annotations</li>
<li>Nashhorn JavaScript Engine</li>
<li>Concurrent Accumulators</li>
<li>Parallel operations</li>
<li>PermGen Error Removed</li>
</ol>
<p><strong>New highlights in Java SE 7</strong> </p>
<ol>
<li>Strings in Switch Statement</li>
<li>Type Inference for Generic Instance Creation</li>
<li>Multiple Exception Handling</li>
<li>Support for Dynamic Languages</li>
<li>Try with Resources</li>
<li>Java nio Package</li>
<li>Binary Literals, Underscore in literals</li>
<li>Diamond Syntax</li>
</ol>
<ul>
<li><a href="http://www.selfgrowth.com/articles/difference-between-java-18-and-java-17" target="_blank" rel="noopener external nofollow noreferrer">Difference between Java 1.8 and Java 1.7?</a></li>
<li><a href="http://www.importnew.com/19345.html" target="_blank" rel="noopener external nofollow noreferrer">Java 8 特性</a></li>
</ul>
<h2 id="Java-与-C-的区别"><a href="#Java-与-C-的区别" class="headerlink" title="Java 与 C++ 的区别"></a>Java 与 C++ 的区别</h2><ul>
<li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。</li>
<li>Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。</li>
<li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li>
<li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li>
<li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li>
<li>Java 不支持操作符重载，虽然可以对两个 String 对象支持加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。</li>
<li>Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。</li>
<li>Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。</li>
</ul>
<p><a href="http://cs-fundamentals.com/tech-interview/java/differences-between-java-and-cpp.php" target="_blank" rel="noopener external nofollow noreferrer">What are the main differences between Java and C++?</a></p>
<h2 id="JRE-or-JDK"><a href="#JRE-or-JDK" class="headerlink" title="JRE or JDK"></a>JRE or JDK</h2><ul>
<li>JRE is the JVM program, Java application need to run on JRE.</li>
<li>JDK is a superset of JRE, JRE + tools for developing java programs. e.g, it provides the compiler “javac”</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Eckel B. Java 编程思想[M]. 机械工业出版社, 2002.</li>
<li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA集合</title>
    <url>/posts/18925.html</url>
    <content><![CDATA[<pre><code>java集合框架相关知识、    集合容器的设计模式、集合接口和实现类源码分析</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一概览">一、概览</a><ul>
<li><a href="#collection">Collection</a></li>
<li><a href="#map">Map</a></li>
</ul>
</li>
<li><a href="#二容器中的设计模式">二、容器中的设计模式</a><ul>
<li><a href="#迭代器模式">迭代器模式</a></li>
<li><a href="#适配器模式">适配器模式</a></li>
</ul>
</li>
<li><a href="#三源码分析">三、源码分析</a><ul>
<li><a href="#arraylist">ArrayList</a></li>
<li><a href="#vector">Vector</a></li>
<li><a href="#copyonwritearraylist">CopyOnWriteArrayList</a></li>
<li><a href="#linkedlist">LinkedList</a></li>
<li><a href="#hashmap">HashMap</a></li>
<li><a href="#concurrenthashmap">ConcurrentHashMap</a></li>
<li><a href="#linkedhashmap">LinkedHashMap</a></li>
<li><a href="#weekhashmap">WeekHashMap</a></li>
</ul>
</li>
<li><a href="#附录">附录</a></li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h1><p>容器主要包括 Collection 和 Map 两种，Collection 又包含了 List、Set 以及 Queue。</p>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//NP4z3i8m38Ntd28NQ4_0KCJ2q044Oez.png"/> </div><br>

<h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1. Set"></a>1. Set</h3><ul>
<li><p>HashSet：基于哈希表实现，支持快速查找。但不支持有序性操作，例如根据一个范围查找元素的操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p>
</li>
<li><p>TreeSet：基于红黑树实现，支持有序性操作，但是查找效率不如 HashSet，HashSet 查找时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p>
</li>
<li><p>LinkedHashSet：具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p>
</li>
</ul>
<h3 id="2-List"><a href="#2-List" class="headerlink" title="2. List"></a>2. List</h3><ul>
<li><p>ArrayList：基于动态数组实现，支持随机访问。</p>
</li>
<li><p>Vector：和 ArrayList 类似，但它是线程安全的。</p>
</li>
<li><p>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p>
</li>
</ul>
<h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3. Queue"></a>3. Queue</h3><ul>
<li><p>LinkedList：可以用它来实现双向队列。</p>
</li>
<li><p>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</p>
</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuUBAp2j9BKfBJ4vLy4q.png"/> </div><br>

<ul>
<li><p>HashMap：基于哈希表实现；</p>
</li>
<li><p>HashTable：和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p>
</li>
<li><p>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</p>
</li>
<li><p>TreeMap：基于红黑树实现。</p>
</li>
</ul>
<h1 id="二、容器中的设计模式"><a href="#二、容器中的设计模式" class="headerlink" title="二、容器中的设计模式"></a>二、容器中的设计模式</h1><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuUBAp2j9BKfBJ4vLy0G.png"/> </div><br>

<p>Collection 实现了 Iterable 接口，其中的 iterator() 方法能够产生一个 Iterator 对象，通过这个对象就可以迭代遍历 Collection 中的元素。</p>
<p>从 JDK 1.5 之后可以使用 foreach 方法来遍历实现了 Iterable 接口的聚合对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>java.util.Arrays#asList() 可以把数组类型转换为 List 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span></span></span><br></pre></td></tr></table></figure>

<p>应该注意的是 asList() 的参数为泛型的变长参数，不能使用基本类型数组作为参数，只能使用相应的包装类型数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure>

<p>也可以使用以下方式调用 asList()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h1><p>如果没有特别说明，以下源码分析基于 JDK 1.8。</p>
<p>在 IDEA 中 double shift 调出 Search EveryWhere，查找源码文件，找到之后就可以阅读源码。</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h3><p>实现了 RandomAccess 接口，因此支持随机访问。这是理所当然的，因为 ArrayList 是基于数组实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>

<p>数组的默认大小为 10。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-序列化"><a href="#2-序列化" class="headerlink" title="2. 序列化"></a>2. 序列化</h3><p>ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。</p>
<p>保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。ArrayList 重写了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>

<h3 id="3-扩容"><a href="#3-扩容" class="headerlink" title="3. 扩容"></a>3. 扩容</h3><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是旧容量的 1.5 倍。</p>
<p>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h3><p>需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看出 ArrayList 删除元素的代价是非常高的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Fail-Fast"><a href="#5-Fail-Fast" class="headerlink" title="5. Fail-Fast"></a>5. Fail-Fast</h3><p>modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p>
<p>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><h3 id="1-同步"><a href="#1-同步" class="headerlink" title="1. 同步"></a>1. 同步</h3><p>它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-与-ArrayList-的区别"><a href="#2-与-ArrayList-的区别" class="headerlink" title="2. 与 ArrayList 的区别"></a>2. 与 ArrayList 的区别</h3><ul>
<li>Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是 Vector，因为同步操作完全可以由程序员自己来控制；</li>
<li>Vector 每次扩容请求其大小的 2 倍空间，而 ArrayList 是 1.5 倍。</li>
</ul>
<h3 id="3-替代方案"><a href="#3-替代方案" class="headerlink" title="3. 替代方案"></a>3. 替代方案</h3><p>为了获得线程安全的 ArrayList，可以使用 <code>Collections.synchronizedList();</code> 得到一个线程安全的 ArrayList。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; synList = Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure>

<p>也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p>
<p>写操作需要加锁，防止同时并发写入时导致的写入数据丢失。</p>
<p>写操作结束之后需要把原始数组指向新的复制数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。</p>
<p>但是 CopyOnWriteArrayList 有其缺陷：</p>
<ul>
<li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li>
<li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。</li>
</ul>
<p>所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。</p>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="1-概览-1"><a href="#1-概览-1" class="headerlink" title="1. 概览"></a>1. 概览</h3><p>基于双向链表实现，使用 Node 存储链表节点信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个链表存储了 first 和 last 指针：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="../pics//49495c95-52e5-4c9a-b27b-92cf235ff5ec.png"/> </div><br>

<h3 id="2-ArrayList-与-LinkedList"><a href="#2-ArrayList-与-LinkedList" class="headerlink" title="2. ArrayList 与 LinkedList"></a>2. ArrayList 与 LinkedList</h3><ul>
<li>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现；</li>
<li>ArrayList 支持随机访问，LinkedList 不支持；</li>
<li>LinkedList 在任意位置添加删除元素更快。</li>
</ul>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>为了便于理解，以下源码分析以 JDK 1.7 为主。</p>
<h3 id="1-存储结构"><a href="#1-存储结构" class="headerlink" title="1. 存储结构"></a>1. 存储结构</h3><p>内部包含了一个 Entry 类型的数组 table。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br></pre></td></tr></table></figure>

<p>其中，Entry 就是存储数据的键值对，它包含了四个字段。从 next 字段我们可以看出 Entry 是一个链表，即数组中的每个位置被当成一个桶，一个桶存放一个链表，链表中存放哈希值相同的 Entry。也就是说，HashMap 使用拉链法来解决冲突。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//8fe838e3-ef77-4f63-bf45-417b6bc5c6bb.png" width="600"/> </div><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked whenever the value in an entry is</span></span><br><span class="line"><span class="comment">     * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class="line"><span class="comment">     * in the HashMap.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked whenever the entry is</span></span><br><span class="line"><span class="comment">     * removed from the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-拉链法的工作原理"><a href="#2-拉链法的工作原理" class="headerlink" title="2. 拉链法的工作原理"></a>2. 拉链法的工作原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"K1"</span>, <span class="string">"V1"</span>);</span><br><span class="line">map.put(<span class="string">"K2"</span>, <span class="string">"V2"</span>);</span><br><span class="line">map.put(<span class="string">"K3"</span>, <span class="string">"V3"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>新建一个 HashMap，默认大小为 16；</li>
<li>插入 &lt;K1,V1&gt; 键值对，先计算 K1 的 hashCode 为 115，使用除留余数法得到所在的桶下标 115%16=3。</li>
<li>插入 &lt;K2,V2&gt; 键值对，先计算 K2 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6。</li>
<li>插入 &lt;K3,V3&gt; 键值对，先计算 K3 的 hashCode 为 118，使用除留余数法得到所在的桶下标 118%16=6，插在 &lt;K2,V2&gt; 前面。</li>
</ul>
<p>应该注意到链表的插入是以头插法方式进行的，例如上面的 &lt;K3,V3&gt; 不是插在 &lt;K2,V2&gt; 后面，而是插入在链表头部。</p>
<p>查找需要分成两步进行：</p>
<ul>
<li>计算键值对所在的桶；</li>
<li>在链表上顺序查找，时间复杂度显然和链表的长度成正比。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//49d6de7b-0d0d-425c-9e49-a1559dc23b10.png" width="600"/> </div><br>

<h3 id="3-put-操作"><a href="#3-put-操作" class="headerlink" title="3. put 操作"></a>3. put 操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 键为 null 单独处理</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 确定桶下标</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 先找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 插入新键值对</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HashMap 允许插入键为 null 的键值对。但是因为无法调用 null 的 hashCode() 方法，也就无法确定该键值对的桶下标，只能通过强制指定一个桶下标来存放。HashMap 使用第 0 个桶存放键为 null 的键值对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用链表的头插法，也就是新的键值对插在链表的头部，而不是链表的尾部。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 头插法，链表头部指向新的键值对</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">    value = v;</span><br><span class="line">    next = n;</span><br><span class="line">    key = k;</span><br><span class="line">    hash = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-确定桶下标"><a href="#4-确定桶下标" class="headerlink" title="4. 确定桶下标"></a>4. 确定桶下标</h3><p>很多操作都需要先确定一个键值对所在的桶下标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = hash(key);</span><br><span class="line"><span class="keyword">int</span> i = indexFor(hash, table.length);</span><br></pre></td></tr></table></figure>

<p>（一）计算 hash 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（二）取模</p>
<p>令 x = 1&lt;&lt;4，即 x 为 2 的 4 次方，它具有以下性质：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x   : 00010000</span><br><span class="line">x-1 : 00001111</span><br></pre></td></tr></table></figure>

<p>令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y       : 10110010</span><br><span class="line">x-1     : 00001111</span><br><span class="line">y&amp;(x-1) : 00000010</span><br></pre></td></tr></table></figure>

<p>这个性质和 y 对 x 取模效果是一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x   : 00010000</span><br><span class="line">y   : 10110010</span><br><span class="line">y%x : 00000010</span><br></pre></td></tr></table></figure>

<p>我们知道，位运算的代价比求模运算小的多，因此在进行这种计算时用位运算的话能带来更高的性能。</p>
<p>确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-扩容-基本原理"><a href="#5-扩容-基本原理" class="headerlink" title="5. 扩容-基本原理"></a>5. 扩容-基本原理</h3><p>设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此平均查找次数的复杂度为 O(N/M)。</p>
<p>为了让查找的成本降低，应该尽可能使得 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证。</p>
<p>和扩容相关的参数主要有：capacity、size、threshold 和 load_factor。</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">capacity</td>
<td align="left">table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。</td>
</tr>
<tr>
<td align="center">size</td>
<td align="left">table 的实际使用量。</td>
</tr>
<tr>
<td align="center">threshold</td>
<td align="left">size 的临界值，size 必须小于 threshold，如果大于等于，就必须进行扩容操作。</td>
</tr>
<tr>
<td align="center">loadFactor</td>
<td align="left">装载因子，table 能够使用的比例，threshold = capacity * loadFactor。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure>

<p>从下面的添加元素代码中可以看出，当需要扩容时，令 capacity 为原来的两倍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把旧 table 的所有键值对重新插入新的 table 中，因此这一步是很费时的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-扩容-重新计算桶下标"><a href="#6-扩容-重新计算桶下标" class="headerlink" title="6. 扩容-重新计算桶下标"></a>6. 扩容-重新计算桶下标</h3><p>在进行扩容时，需要把键值对重新放到对应的桶上。HashMap 使用了一个特殊的机制，可以降低重新计算桶下标的操作。</p>
<p>假设原数组长度 capacity 为 16，扩容之后 new capacity 为 32：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">capacity     : 00010000</span><br><span class="line">new capacity : 00100000</span><br></pre></td></tr></table></figure>

<p>对于一个 Key，它的哈希值如果在第 6 位上为 0，那么取模得到的结果和之前一样；如果为 1，那么得到的结果为原来的结果 +16。</p>
<h3 id="7-扩容-计算数组容量"><a href="#7-扩容-计算数组容量" class="headerlink" title="7. 扩容-计算数组容量"></a>7. 扩容-计算数组容量</h3><p>HashMap 构造函数允许用户传入的容量不是 2 的 n 次方，因为它可以自动地将传入的容量转换为 2 的 n 次方。</p>
<p>先考虑如何求一个数的掩码，对于 10010000，它的掩码为 11111111，可以使用以下方法得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mask |&#x3D; mask &gt;&gt; 1    11011000</span><br><span class="line">mask |&#x3D; mask &gt;&gt; 2    11111100</span><br><span class="line">mask |&#x3D; mask &gt;&gt; 4    11111111</span><br></pre></td></tr></table></figure>

<p>mask+1 是大于原始数字的最小的 2 的 n 次方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num     10010000</span><br><span class="line">mask+1 100000000</span><br></pre></td></tr></table></figure>

<p>以下是 HashMap 中计算数组容量的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-链表转红黑树"><a href="#8-链表转红黑树" class="headerlink" title="8. 链表转红黑树"></a>8. 链表转红黑树</h3><p>从 JDK 1.8 开始，一个桶存储的链表长度大于 8 时会将链表转换为红黑树。</p>
<h3 id="9-HashMap-与-HashTable"><a href="#9-HashMap-与-HashTable" class="headerlink" title="9. HashMap 与 HashTable"></a>9. HashMap 与 HashTable</h3><ul>
<li>HashTable 使用 synchronized 来进行同步。</li>
<li>HashMap 可以插入键为 null 的 Entry。</li>
<li>HashMap 的迭代器是 fail-fast 迭代器。</li>
<li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li>
</ul>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="1-存储结构-1"><a href="#1-存储结构-1" class="headerlink" title="1. 存储结构"></a>1. 存储结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。</p>
<p>Segment 继承自 ReentrantLock。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure>

<p>默认的并发级别为 16，也就是说默认创建 16 个 Segment。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="../pics//3fdfc89d-719e-4d93-b518-29fa612b3b18.png"/> </div><br>

<h3 id="2-size-操作"><a href="#2-size-操作" class="headerlink" title="2. size 操作"></a>2. size 操作</h3><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of elements. Accessed only either within locks</span></span><br><span class="line"><span class="comment"> * or among other volatile reads that maintain visibility.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br></pre></td></tr></table></figure>

<p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p>
<p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p>
<p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p>
<p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of unsynchronized retries in size and containsValue</span></span><br><span class="line"><span class="comment"> * methods before resorting to locking. This is used to avoid</span></span><br><span class="line"><span class="comment"> * unbounded retries if tables undergo continuous modification</span></span><br><span class="line"><span class="comment"> * which would make it impossible to obtain an accurate result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 超过尝试次数，则对每个 Segment 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 连续两次得到的结果一致，则认为这个结果是正确的</span></span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-JDK-1-8-的改动"><a href="#3-JDK-1-8-的改动" class="headerlink" title="3. JDK 1.8 的改动"></a>3. JDK 1.8 的改动</h3><p>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。</p>
<p>JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p>
<p>并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。</p>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>继承自 HashMap，因此具有和 HashMap 一样的快速查找特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>内存维护了一个双向链表，用来维护插入顺序或者 LRU 顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The head (eldest) of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The tail (youngest) of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure>

<p>accessOrder 决定了顺序，默认为 false，此时使用的是插入顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure>

<p>LinkedHashMap 最重要的是以下用于维护顺序的函数，它们会在 put、get 等方法中调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="afterNodeAccess"><a href="#afterNodeAccess" class="headerlink" title="afterNodeAccess()"></a>afterNodeAccess()</h3><p>当一个节点被访问时，如果 accessOrder 为 true，则会将 该节点移到链表尾部。也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="afterNodeInsertion"><a href="#afterNodeInsertion" class="headerlink" title="afterNodeInsertion()"></a>afterNodeInsertion()</h3><p>在 put 等操作之后执行，当 removeEldestEntry() 方法返回 ture 时会移除最晚的节点，也就是链表首部节点 first。</p>
<p>evict 只有在构建 Map 的时候才为 false，在这里为 true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="LRU-缓存"><a href="#LRU-缓存" class="headerlink" title="LRU 缓存"></a>LRU 缓存</h3><p>以下是使用 LinkedHashMap 实现的一个 LRU 缓存：</p>
<ul>
<li>设定最大缓存空间 MAX_ENTRIES  为 3；</li>
<li>使用 LinkedHashMap 的构造函数将 accessOrder 设置为 true，开启 LUR 顺序；</li>
<li>覆盖 removeEldestEntry() 方法实现，在节点多于 MAX_ENTRIES 就会将最近最久未使用的数据移除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ENTRIES = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; MAX_ENTRIES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LRUCache() &#123;</span><br><span class="line">        <span class="keyword">super</span>(MAX_ENTRIES, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LRUCache&lt;Integer, String&gt; cache = <span class="keyword">new</span> LRUCache&lt;&gt;();</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="string">"c"</span>);</span><br><span class="line">    cache.get(<span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="string">"d"</span>);</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[3, 1, 4]</span><br></pre></td></tr></table></figure>

<h2 id="WeekHashMap"><a href="#WeekHashMap" class="headerlink" title="WeekHashMap"></a>WeekHashMap</h2><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>WeakHashMap 的 Entry 继承自 WeakReference，被 WeakReference 关联的对象在下一次垃圾回收时会被回收。</p>
<p>WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由 JVM 对这部分缓存进行回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ConcurrentCache"><a href="#ConcurrentCache" class="headerlink" title="ConcurrentCache"></a>ConcurrentCache</h3><p>Tomcat 中的 ConcurrentCache 就使用了 WeakHashMap 来实现缓存功能。</p>
<p>ConcurrentCache 采取的是分代缓存：</p>
<ul>
<li>经常使用的对象放入 eden 中，eden 使用 ConcurrentHashMap 实现，不用担心会被回收（伊甸园）；</li>
<li>不常用的对象放入 longterm，longterm 使用 WeakHashMap 实现，这些老对象会被垃圾收集器回收。</li>
<li>当调用  get() 方法时，会先从 eden 区获取，如果没有找到的话再到 longterm 获取，当从 longterm 获取到就把对象放入 eden 中，保证频繁被访问的节点不容易被回收。</li>
<li>当调用 put() 方法时，如果缓存当前容量大小超过了 size，那么就将 eden 中的所有对象都放入 longterm 中，利用虚拟机回收掉一部分不经常使用的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; eden;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; longterm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentCache</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.eden = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">this</span>.longterm = <span class="keyword">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line">        V v = <span class="keyword">this</span>.eden.get(k);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            v = <span class="keyword">this</span>.longterm.get(k);</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">this</span>.eden.put(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eden.size() &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">this</span>.longterm.putAll(<span class="keyword">this</span>.eden);</span><br><span class="line">            <span class="keyword">this</span>.eden.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.eden.put(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>Collection 绘图源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Collection</span><br><span class="line">interface Set</span><br><span class="line">interface List</span><br><span class="line">interface Queue</span><br><span class="line">interface SortSet</span><br><span class="line"></span><br><span class="line">class HashSet</span><br><span class="line">class LinkedHashSet</span><br><span class="line">class TreeSet</span><br><span class="line">class ArrayList</span><br><span class="line">class Vector</span><br><span class="line">class LinkedList</span><br><span class="line">class PriorityQueue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Collection &lt;|-- Set</span><br><span class="line">Collection &lt;|-- List</span><br><span class="line">Collection &lt;|-- Queue</span><br><span class="line">Set &lt;|-- SortSet</span><br><span class="line"></span><br><span class="line">Set &lt;|.. HashSet</span><br><span class="line">Set &lt;|.. LinkedHashSet</span><br><span class="line">SortSet &lt;|.. TreeSet</span><br><span class="line">List &lt;|.. ArrayList</span><br><span class="line">List &lt;|.. Vector</span><br><span class="line">List &lt;|.. LinkeList</span><br><span class="line">Queue &lt;|.. LinkedList</span><br><span class="line">Queue &lt;|.. PriorityQueue</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>Map 绘图源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Map</span><br><span class="line">interface SortMap</span><br><span class="line"></span><br><span class="line">class HashTable</span><br><span class="line">class LinkedHashMap</span><br><span class="line">class HashMap</span><br><span class="line">class TreeMap</span><br><span class="line"></span><br><span class="line">Map &lt;|.. HashTable</span><br><span class="line">Map &lt;|.. LinkedHashMap</span><br><span class="line">Map &lt;|.. HashMap</span><br><span class="line">Map &lt;|-- SortMap</span><br><span class="line">SortMap &lt;|.. TreeMap</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>迭代器类图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">interface Iterable</span><br><span class="line">interface Collection</span><br><span class="line">interface List</span><br><span class="line">interface Set</span><br><span class="line">interface Queue</span><br><span class="line">interface Iterator</span><br><span class="line">interface ListIterator</span><br><span class="line"></span><br><span class="line">Iterable &lt;|-- Collection</span><br><span class="line">Collection &lt;|.. List</span><br><span class="line">Collection &lt;|.. Set</span><br><span class="line">Collection &lt;|-- Queue</span><br><span class="line">Iterator &lt;-- Iterable</span><br><span class="line">Iterator &lt;|.. ListIterator</span><br><span class="line">ListIterator &lt;-- List</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Eckel B. Java 编程思想 [M]. 机械工业出版社, 2002.</li>
<li><a href="https://www.w3resource.com/java-tutorial/java-collections.php" target="_blank" rel="noopener external nofollow noreferrer">Java Collection Framework</a></li>
<li><a href="https://openhome.cc/Gossip/DesignPattern/IteratorPattern.htm" target="_blank" rel="noopener external nofollow noreferrer">Iterator 模式</a></li>
<li><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener external nofollow noreferrer">Java 8 系列之重新认识 HashMap</a></li>
<li><a href="http://javarevisited.blogspot.hk/2010/10/difference-between-hashmap-and.html" target="_blank" rel="noopener external nofollow noreferrer">What is difference between HashMap and Hashtable in Java?</a></li>
<li><a href="http://www.zhangchangle.com/2018/02/07/Java%E9%9B%86%E5%90%88%E4%B9%8BHashMap/" target="_blank" rel="noopener external nofollow noreferrer">Java 集合之 HashMap</a></li>
<li><a href="http://www.programering.com/a/MDO3QDNwATM.html" target="_blank" rel="noopener external nofollow noreferrer">The principle of ConcurrentHashMap analysis</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/" target="_blank" rel="noopener external nofollow noreferrer">探索 ConcurrentHashMap 高并发性的实现机制</a></li>
<li><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener external nofollow noreferrer">HashMap 相关面试题及其解答</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-thirtysix.html" target="_blank" rel="noopener external nofollow noreferrer">Java 集合细节（二）：asList 的缺陷</a></li>
<li><a href="http://javaconceptoftheday.com/java-collection-framework-linkedlist-class/" target="_blank" rel="noopener external nofollow noreferrer">Java Collection Framework – The LinkedList Class</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA并发知识整理</title>
    <url>/posts/8329.html</url>
    <content><![CDATA[<pre><code>Java并发相关知识    线程的相关理论及其使用、基础线程操作、线程中断机制、还有线程的互斥与同步、JUC、Java内存模型、线程安全、线程锁的优化</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一线程状态转换">一、线程状态转换</a><ul>
<li><a href="#新建new">新建（New）</a></li>
<li><a href="#可运行runnable">可运行（Runnable）</a></li>
<li><a href="#阻塞blocking">阻塞（Blocking）</a></li>
<li><a href="#无限期等待waiting">无限期等待（Waiting）</a></li>
<li><a href="#限期等待timed-waiting">限期等待（Timed Waiting）</a></li>
<li><a href="#死亡terminated">死亡（Terminated）</a></li>
</ul>
</li>
<li><a href="#二使用线程">二、使用线程</a><ul>
<li><a href="#实现-runnable-接口">实现 Runnable 接口</a></li>
<li><a href="#实现-callable-接口">实现 Callable 接口</a></li>
<li><a href="#继承-thread-类">继承 Thread 类</a></li>
<li><a href="#实现接口-vs-继承-thread">实现接口 VS 继承 Thread</a></li>
</ul>
</li>
<li><a href="#三基础线程机制">三、基础线程机制</a><ul>
<li><a href="#executor">Executor</a></li>
<li><a href="#daemon">Daemon</a></li>
<li><a href="#sleep">sleep()</a></li>
<li><a href="#yield">yield()</a></li>
</ul>
</li>
<li><a href="#四中断">四、中断</a><ul>
<li><a href="#interruptedexception">InterruptedException</a></li>
<li><a href="#interrupted">interrupted()</a></li>
<li><a href="#executor-的中断操作">Executor 的中断操作</a></li>
</ul>
</li>
<li><a href="#五互斥同步">五、互斥同步</a><ul>
<li><a href="#synchronized">synchronized</a></li>
<li><a href="#reentrantlock">ReentrantLock</a></li>
<li><a href="#比较">比较</a></li>
<li><a href="#使用选择">使用选择</a></li>
</ul>
</li>
<li><a href="#六线程之间的协作">六、线程之间的协作</a><ul>
<li><a href="#join">join()</a></li>
<li><a href="#wait-notify-notifyall">wait() notify() notifyAll()</a></li>
<li><a href="#await-signal-signalall">await() signal() signalAll()</a></li>
</ul>
</li>
<li><a href="#七juc---aqs">七、J.U.C - AQS</a><ul>
<li><a href="#countdownlatch">CountdownLatch</a></li>
<li><a href="#cyclicbarrier">CyclicBarrier</a></li>
<li><a href="#semaphore">Semaphore</a></li>
</ul>
</li>
<li><a href="#八juc---其它组件">八、J.U.C - 其它组件</a><ul>
<li><a href="#futuretask">FutureTask</a></li>
<li><a href="#blockingqueue">BlockingQueue</a></li>
<li><a href="#forkjoin">ForkJoin</a></li>
</ul>
</li>
<li><a href="#九线程不安全示例">九、线程不安全示例</a></li>
<li><a href="#十java-内存模型">十、Java 内存模型</a><ul>
<li><a href="#主内存与工作内存">主内存与工作内存</a></li>
<li><a href="#内存间交互操作">内存间交互操作</a></li>
<li><a href="#内存模型三大特性">内存模型三大特性</a></li>
<li><a href="#先行发生原则">先行发生原则</a></li>
</ul>
</li>
<li><a href="#十一线程安全">十一、线程安全</a><ul>
<li><a href="#线程安全定义">线程安全定义</a></li>
<li><a href="#线程安全分类">线程安全分类</a></li>
<li><a href="#线程安全的实现方法">线程安全的实现方法</a></li>
</ul>
</li>
<li><a href="#十二锁优化">十二、锁优化</a><ul>
<li><a href="#自旋锁">自旋锁</a></li>
<li><a href="#锁消除">锁消除</a></li>
<li><a href="#锁粗化">锁粗化</a></li>
<li><a href="#轻量级锁">轻量级锁</a></li>
<li><a href="#偏向锁">偏向锁</a></li>
</ul>
</li>
<li><a href="#十三多线程开发良好的实践">十三、多线程开发良好的实践</a></li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、线程状态转换"><a href="#一、线程状态转换" class="headerlink" title="一、线程状态转换"></a>一、线程状态转换</h1><div align="center"> <img src= "/img/loading.gif" data-src="../pics//ace830df-9919-48ca-91b5-60b193f593d2.png" width=""/> </div><br>

<h2 id="新建（New）"><a href="#新建（New）" class="headerlink" title="新建（New）"></a>新建（New）</h2><p>创建后尚未启动。</p>
<h2 id="可运行（Runnable）"><a href="#可运行（Runnable）" class="headerlink" title="可运行（Runnable）"></a>可运行（Runnable）</h2><p>可能正在运行，也可能正在等待 CPU 时间片。</p>
<p>包含了操作系统线程状态中的 Running 和 Ready。</p>
<h2 id="阻塞（Blocking）"><a href="#阻塞（Blocking）" class="headerlink" title="阻塞（Blocking）"></a>阻塞（Blocking）</h2><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p>
<h2 id="无限期等待（Waiting）"><a href="#无限期等待（Waiting）" class="headerlink" title="无限期等待（Waiting）"></a>无限期等待（Waiting）</h2><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p>
<table>
<thead>
<tr>
<th>进入方法</th>
<th>退出方法</th>
</tr>
</thead>
<tbody><tr>
<td>没有设置 Timeout 参数的 Object.wait() 方法</td>
<td>Object.notify() / Object.notifyAll()</td>
</tr>
<tr>
<td>没有设置 Timeout 参数的 Thread.join() 方法</td>
<td>被调用的线程执行完毕</td>
</tr>
<tr>
<td>LockSupport.park() 方法</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="限期等待（Timed-Waiting）"><a href="#限期等待（Timed-Waiting）" class="headerlink" title="限期等待（Timed Waiting）"></a>限期等待（Timed Waiting）</h2><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。</p>
<p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p>
<p>调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p>
<p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p>
<p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。</p>
<table>
<thead>
<tr>
<th>进入方法</th>
<th>退出方法</th>
</tr>
</thead>
<tbody><tr>
<td>Thread.sleep() 方法</td>
<td>时间结束</td>
</tr>
<tr>
<td>设置了 Timeout 参数的 Object.wait() 方法</td>
<td>时间结束 / Object.notify() / Object.notifyAll()</td>
</tr>
<tr>
<td>设置了 Timeout 参数的 Thread.join() 方法</td>
<td>时间结束 / 被调用的线程执行完毕</td>
</tr>
<tr>
<td>LockSupport.parkNanos() 方法</td>
<td>-</td>
</tr>
<tr>
<td>LockSupport.parkUntil() 方法</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="死亡（Terminated）"><a href="#死亡（Terminated）" class="headerlink" title="死亡（Terminated）"></a>死亡（Terminated）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p>
<h1 id="二、使用线程"><a href="#二、使用线程" class="headerlink" title="二、使用线程"></a>二、使用线程</h1><p>有三种使用线程的方法：</p>
<ul>
<li>实现 Runnable 接口；</li>
<li>实现 Callable 接口；</li>
<li>继承 Thread 类。</li>
</ul>
<p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。</p>
<h2 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h2><p>需要实现 run() 方法。</p>
<p>通过 Thread 调用 start() 方法来启动线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyRunnable instance = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h2><p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runable 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">    mt.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口-VS-继承-Thread"><a href="#实现接口-VS-继承-Thread" class="headerlink" title="实现接口 VS 继承 Thread"></a>实现接口 VS 继承 Thread</h2><p>实现接口会更好一些，因为：</p>
<ul>
<li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li>
<li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li>
</ul>
<h1 id="三、基础线程机制"><a href="#三、基础线程机制" class="headerlink" title="三、基础线程机制"></a>三、基础线程机制</h1><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。</p>
<p>主要有三种 Executor：</p>
<ul>
<li>CachedThreadPool：一个任务创建一个线程；</li>
<li>FixedThreadPool：所有任务只能使用固定大小的线程；</li>
<li>SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">    &#125;</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h2><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。</p>
<p>当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。</p>
<p>main() 属于非守护线程。</p>
<p>使用 setDaemon() 方法将一个线程设置为守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">    thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h2><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p>
<p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h2><p>对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、中断"><a href="#四、中断" class="headerlink" title="四、中断"></a>四、中断</h1><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。</p>
<h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><p>通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</p>
<p>对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">"Thread run"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread thread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line">    thread1.start();</span><br><span class="line">    thread1.interrupt();</span><br><span class="line">    System.out.println(<span class="string">"Main run"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Main run</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at InterruptExample.lambda$main$0(InterruptExample.java:5)</span><br><span class="line">    at InterruptExample$$Lambda$1/713338599.run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>

<h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h2><p>如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。</p>
<p>但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!interrupted()) &#123;</span><br><span class="line">                <span class="comment">// ..</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Thread end"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread thread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">    thread2.start();</span><br><span class="line">    thread2.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Thread end</span><br></pre></td></tr></table></figure>

<h2 id="Executor-的中断操作"><a href="#Executor-的中断操作" class="headerlink" title="Executor 的中断操作"></a>Executor 的中断操作</h2><p>调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。</p>
<p>以下使用 Lambda 创建线程，相当于创建了一个匿名内部线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"Thread run"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    executorService.shutdownNow();</span><br><span class="line">    System.out.println(<span class="string">"Main run"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Main run</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)</span><br><span class="line">    at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>

<p>如果只想中断 Executor 中的一个线程，可以通过使用 submit() 方法来提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;);</span><br><span class="line">future.cancel(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h1 id="五、互斥同步"><a href="#五、互斥同步" class="headerlink" title="五、互斥同步"></a>五、互斥同步</h1><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>1. 同步一个代码块</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p>
<p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>

<p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e2.func1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9</span><br></pre></td></tr></table></figure>


<p><strong>2. 同步一个方法</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它和同步代码块一样，作用于同一个对象。</p>
<p><strong>3. 同步一个类</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedExample<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func2());</span><br><span class="line">    executorService.execute(() -&gt; e2.func2());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>

<p><strong>4. 同步一个静态方法</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用于整个类。</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">// 确保释放锁，从而避免发生死锁。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LockExample lockExample = <span class="keyword">new</span> LockExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>


<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><strong>1. 锁的实现</strong> </p>
<p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p>
<p><strong>2. 性能</strong> </p>
<p>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。</p>
<p><strong>3. 等待可中断</strong> </p>
<p>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。</p>
<p>ReentrantLock 可中断，而 synchronized 不行。</p>
<p><strong>4. 公平锁</strong> </p>
<p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。</p>
<p>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</p>
<p><strong>5. 锁绑定多个条件</strong> </p>
<p>一个 ReentrantLock 可以同时绑定多个 Condition 对象。</p>
<h2 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h2><p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
<h1 id="六、线程之间的协作"><a href="#六、线程之间的协作" class="headerlink" title="六、线程之间的协作"></a>六、线程之间的协作</h1><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。</p>
<h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p>
<p>对于以下代码，虽然 b 线程先启动，但是因为在 b 线程中调用了 a 线程的 join() 方法，b 线程会等待 a 线程结束才继续执行，因此最后能够保证 a 线程的输出先于 b 线程的输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">        B(A a) &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                a.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B(a);</span><br><span class="line">        b.start();</span><br><span class="line">        a.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    JoinExample example = <span class="keyword">new</span> JoinExample();</span><br><span class="line">    example.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure>

<h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait() notify() notifyAll()"></a>wait() notify() notifyAll()</h2><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p>
<p>它们都属于 Object 的一部分，而不属于 Thread。</p>
<p>只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。</p>
<p>使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    WaitNotifyExample example = <span class="keyword">new</span> WaitNotifyExample();</span><br><span class="line">    executorService.execute(() -&gt; example.after());</span><br><span class="line">    executorService.execute(() -&gt; example.before());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure>

<p><strong>wait() 和 sleep() 的区别</strong> </p>
<ul>
<li>wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；</li>
<li>wait() 会释放锁，sleep() 不会。</li>
</ul>
<h2 id="await-signal-signalAll"><a href="#await-signal-signalAll" class="headerlink" title="await() signal() signalAll()"></a>await() signal() signalAll()</h2><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p>
<p>使用 Lock 来获取一个 Condition 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitSignalExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"before"</span>);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    AwaitSignalExample example = <span class="keyword">new</span> AwaitSignalExample();</span><br><span class="line">    executorService.execute(() -&gt; example.after());</span><br><span class="line">    executorService.execute(() -&gt; example.before());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure>

<h1 id="七、J-U-C-AQS"><a href="#七、J-U-C-AQS" class="headerlink" title="七、J.U.C - AQS"></a>七、J.U.C - AQS</h1><p>java.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。</p>
<h2 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h2><p>用来控制一个线程等待多个线程。</p>
<p>维护了一个计数器 cnt，每次调用 countDown() 方法会让计数器的值减 1，减到 0 的时候，那些因为调用 await() 方法而在等待的线程就会被唤醒。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//CountdownLatch.png" width=""/> </div><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountdownLatchExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalThread = <span class="number">10</span>;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                System.out.print(<span class="string">"run.."</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"end"</span>);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">run..run..run..run..run..run..run..run..run..run..end</span><br></pre></td></tr></table></figure>

<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p>
<p>和 CountdownLatch 相似，都是通过维护计数器来实现的。但是它的计数器是递增的，每次执行 await() 方法之后，计数器会加 1，直到计数器的值和设置的值相等，等待的所有线程才会继续执行。和 CountdownLatch 的另一个区别是，CyclicBarrier 的计数器可以循环使用，所以它才叫做循环屏障。</p>
<p>下图应该从下往上看才正确。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//CyclicBarrier.png" width=""/> </div><br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalThread = <span class="number">10</span>;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                System.out.print(<span class="string">"before.."</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(<span class="string">"after.."</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">before..before..before..before..before..before..before..before..before..before..after..after..after..after..after..after..after..after..after..after..</span><br></pre></td></tr></table></figure>

<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore 就是操作系统中的信号量，可以控制对互斥资源的访问线程数。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//Semaphore.png" width=""/> </div><br>

<p>以下代码模拟了对某个服务的并发请求，每次只能有 3 个客户端同时访问，请求总数为 10。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> clientCount = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalRequestCount = <span class="number">10</span>;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(clientCount);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalRequestCount; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.print(semaphore.availablePermits() + <span class="string">" "</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">2 1 2 2 2 2 2 1 2 2</span><br></pre></td></tr></table></figure>

<h1 id="八、J-U-C-其它组件"><a href="#八、J-U-C-其它组件" class="headerlink" title="八、J.U.C - 其它组件"></a>八、J.U.C - 其它组件</h1><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>在介绍 Callable 时我们知道它可以有返回值，返回值通过 Future<V> 进行封装。FutureTask 实现了 RunnableFuture 接口，该接口继承自 Runnable 和 Future<V> 接口，这使得 FutureTask 既可以当做一个任务执行，也可以有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>FutureTask 可用于异步获取执行结果或取消执行任务的场景。当一个计算任务需要执行很长时间，那么就可以用 FutureTask 来封装这个任务，主线程在完成自己的任务之后再去获取结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    result += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread computeThread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        computeThread.start();</span><br><span class="line"></span><br><span class="line">        Thread otherThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"other task is running..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        otherThread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">other task is running...</span><br><span class="line">4950</span><br></pre></td></tr></table></figure>

<h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：</p>
<ul>
<li><strong>FIFO 队列</strong> ：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li>
<li><strong>优先级队列</strong> ：PriorityBlockingQueue</li>
</ul>
<p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p>
<p><strong>使用 BlockingQueue 实现生产者消费者问题</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.put(<span class="string">"product"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"produce.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String product = queue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"consume.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">produce..produce..consume..consume..produce..consume..produce..consume..produce..consume..</span><br></pre></td></tr></table></figure>

<h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><p>主要用于并行计算中，和 MapReduce 原理类似，都是把大的计算任务拆分成多个小任务并行计算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinExample</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinExample</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (last - first &lt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// 任务足够小则直接计算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 拆分成小任务</span></span><br><span class="line">            <span class="keyword">int</span> middle = first + (last - first) / <span class="number">2</span>;</span><br><span class="line">            ForkJoinExample leftTask = <span class="keyword">new</span> ForkJoinExample(first, middle);</span><br><span class="line">            ForkJoinExample rightTask = <span class="keyword">new</span> ForkJoinExample(middle + <span class="number">1</span>, last);</span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line">            result = leftTask.join() + rightTask.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    ForkJoinExample example = <span class="keyword">new</span> ForkJoinExample(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    Future result = forkJoinPool.submit(example);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ForkJoin 使用 ForkJoinPool 来启动，它是一个特殊的线程池，线程数量取决于 CPU 核数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinPool</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span></span></span><br></pre></td></tr></table></figure>

<p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。例如下图中，Thread2 从 Thread1 的队列中拿出最晚的 Task1 任务，Thread1 会拿出 Task2 来执行，这样就避免发生竞争。但是如果队列中只有一个任务时还是会发生竞争。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//15b45dc6-27aa-4519-9194-f4acfa2b077f.jpg" width=""/> </div><br>

<h1 id="九、线程不安全示例"><a href="#九、线程不安全示例" class="headerlink" title="九、线程不安全示例"></a>九、线程不安全示例</h1><p>如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p>
<p>以下代码演示了 1000 个线程同时对 cnt 执行自增操作，操作结束之后它的值为 997 而不是 1000。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafeExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadSize = <span class="number">1000</span>;</span><br><span class="line">    ThreadUnsafeExample example = <span class="keyword">new</span> ThreadUnsafeExample();</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">997</span><br></pre></td></tr></table></figure>

<h1 id="十、Java-内存模型"><a href="#十、Java-内存模型" class="headerlink" title="十、Java 内存模型"></a>十、Java 内存模型</h1><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p>
<h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。</p>
<p>加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//68778c1b-15ab-4826-99c0-3b4fd38cb9e9.png" width=""/> </div><br>

<p>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p>
<p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//47358f87-bc4c-496f-9a90-8d696de94cee.png" width=""/> </div><br>

<h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//536c6dfd-305a-4b95-b12c-28ca5e8aa043.png" width=""/> </div><br>

<ul>
<li>read：把一个变量的值从主内存传输到工作内存中</li>
<li>load：在 read 之后执行，把 read 得到的值放入工作内存的变量副本中</li>
<li>use：把工作内存中一个变量的值传递给执行引擎</li>
<li>assign：把一个从执行引擎接收到的值赋给工作内存的变量</li>
<li>store：把工作内存的一个变量的值传送到主内存中</li>
<li>write：在 store 之后执行，把 store 得到的值放入主内存的变量中</li>
<li>lock：作用于主内存的变量</li>
<li>unlock</li>
</ul>
<h2 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h2><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h3><p>Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。但是 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p>
<p>有一个错误认识就是，int 等原子性的变量在多线程环境中不会出现线程安全问题。前面的线程不安全示例代码中，cnt 变量属于 int 类型变量，1000 个线程对它进行自增操作之后，得到的值为 997 而不是 1000。</p>
<p>为了方便讨论，将内存间的交互操作简化为 3 个：load、assign、store。</p>
<p>下图演示了两个线程同时对 cnt 变量进行操作，load、assign、store 这一系列操作整体上看不具备原子性，那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存，T2 依然可以读入该变量的值。可以看出，这两个线程虽然执行了两次自增运算，但是主内存中 cnt 的值最后为 1 而不是 2。因此对 int 类型读写操作满足原子性只是说明 load、assign、store 这些单个操作具备原子性。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//ef8eab00-1d5e-4d99-a7c2-d6d68ea7fe92.png" width=""/> </div><br>

<p>AtomicInteger 能保证多个线程修改的原子性。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//952afa9a-458b-44ce-bba9-463e60162945.png" width=""/> </div><br>

<p>使用 AtomicInteger 重写之前线程不安全的代码之后得到以下线程安全实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger cnt = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadSize = <span class="number">1000</span>;</span><br><span class="line">    AtomicExample example = <span class="keyword">new</span> AtomicExample(); <span class="comment">// 只修改这条语句</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1000</span><br></pre></td></tr></table></figure>

<p>除了使用原子类之外，也可以使用 synchronized 互斥锁来保证操作的原子性。它对应的内存间交互操作为：lock 和 unlock，在虚拟机实现上对应的字节码指令为 monitorenter 和 monitorexit。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicSynchronizedExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadSize = <span class="number">1000</span>;</span><br><span class="line">    AtomicSynchronizedExample example = <span class="keyword">new</span> AtomicSynchronizedExample();</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1000</span><br></pre></td></tr></table></figure>

<h3 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h3><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p>
<p>主要有有三种实现可见性的方式：</p>
<ul>
<li>volatile</li>
<li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li>
<li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li>
</ul>
<p>对前面的线程不安全示例中的 cnt 变量使用 volatile 修饰，不能解决线程不安全问题，因为 volatile 并不能保证操作的原子性。</p>
<h3 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h3><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。</p>
<p>在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>
<p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p>
<h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p>
<p>主要有以下这些原则：</p>
<h3 id="1-单一线程原则"><a href="#1-单一线程原则" class="headerlink" title="1. 单一线程原则"></a>1. 单一线程原则</h3><blockquote>
<p>Single Thread rule</p>
</blockquote>
<p>在一个线程内，在程序前面的操作先行发生于后面的操作。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//single-thread-rule.png" width=""/> </div><br>

<h3 id="2-管程锁定规则"><a href="#2-管程锁定规则" class="headerlink" title="2. 管程锁定规则"></a>2. 管程锁定规则</h3><blockquote>
<p>Monitor Lock Rule</p>
</blockquote>
<p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//monitor-lock-rule.png" width=""/> </div><br>

<h3 id="3-volatile-变量规则"><a href="#3-volatile-变量规则" class="headerlink" title="3. volatile 变量规则"></a>3. volatile 变量规则</h3><blockquote>
<p>Volatile Variable Rule</p>
</blockquote>
<p>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//volatile-variable-rule.png" width=""/> </div><br>

<h3 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4. 线程启动规则"></a>4. 线程启动规则</h3><blockquote>
<p>Thread Start Rule</p>
</blockquote>
<p>Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//thread-start-rule.png" width=""/> </div><br>

<h3 id="5-线程加入规则"><a href="#5-线程加入规则" class="headerlink" title="5. 线程加入规则"></a>5. 线程加入规则</h3><blockquote>
<p>Thread Join Rule</p>
</blockquote>
<p>Thread 对象的结束先行发生于 join() 方法返回。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//thread-join-rule.png" width=""/> </div><br>

<h3 id="6-线程中断规则"><a href="#6-线程中断规则" class="headerlink" title="6. 线程中断规则"></a>6. 线程中断规则</h3><blockquote>
<p>Thread Interruption Rule</p>
</blockquote>
<p>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</p>
<h3 id="7-对象终结规则"><a href="#7-对象终结规则" class="headerlink" title="7. 对象终结规则"></a>7. 对象终结规则</h3><blockquote>
<p>Finalizer Rule</p>
</blockquote>
<p>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。</p>
<h3 id="8-传递性"><a href="#8-传递性" class="headerlink" title="8. 传递性"></a>8. 传递性</h3><blockquote>
<p>Transitivity</p>
</blockquote>
<p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</p>
<h1 id="十一、线程安全"><a href="#十一、线程安全" class="headerlink" title="十一、线程安全"></a>十一、线程安全</h1><h2 id="线程安全定义"><a href="#线程安全定义" class="headerlink" title="线程安全定义"></a>线程安全定义</h2><p>一个类在可以被多个线程安全调用时就是线程安全的。</p>
<h2 id="线程安全分类"><a href="#线程安全分类" class="headerlink" title="线程安全分类"></a>线程安全分类</h2><p>线程安全不是一个非真即假的命题，可以将共享数据按照安全程度的强弱顺序分成以下五类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p>
<h3 id="1-不可变"><a href="#1-不可变" class="headerlink" title="1. 不可变"></a>1. 不可变</h3><p>不可变（Immutable）的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施，只要一个不可变的对象被正确地构建出来，那其外部的可见状态永远也不会改变，永远也不会看到它在多个线程之中处于不一致的状态。</p>
<p>不可变的类型：</p>
<ul>
<li>final 关键字修饰的基本数据类型；</li>
<li>String</li>
<li>枚举类型</li>
<li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的子类型的原子类 AtomicInteger 和 AtomicLong 则并非不可变的。</li>
</ul>
<p>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class="line">        unmodifiableMap.put(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Exception in thread "main" java.lang.UnsupportedOperationException</span><br><span class="line">    at java.util.Collections$UnmodifiableMap.put(Collections.java:1457)</span><br><span class="line">    at ImmutableExample.main(ImmutableExample.java:9)</span><br></pre></td></tr></table></figure>

<p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p>
<h3 id="2-绝对线程安全"><a href="#2-绝对线程安全" class="headerlink" title="2. 绝对线程安全"></a>2. 绝对线程安全</h3><p>不管运行时环境如何，调用者都不需要任何额外的同步措施。</p>
<h3 id="3-相对线程安全"><a href="#3-相对线程安全" class="headerlink" title="3. 相对线程安全"></a>3. 相对线程安全</h3><p>相对的线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p>
<p>在 Java 语言中，大部分的线程安全类都属于这种类型，例如 Vector、HashTable、Collections 的 synchronizedCollection() 方法包装的集合等。</p>
<p>对于下面的代码，如果删除元素的线程删除了一个元素，而获取元素的线程试图访问一个已经被删除的元素，那么就会抛出 ArrayIndexOutOfBoundsException。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorUnsafeExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                vector.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                    vector.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                    vector.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Exception in thread "Thread-159738" java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 3</span><br><span class="line">    at java.util.Vector.remove(Vector.java:831)</span><br><span class="line">    at VectorUnsafeExample.lambda$main$0(VectorUnsafeExample.java:14)</span><br><span class="line">    at VectorUnsafeExample$$Lambda$1/713338599.run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>


<p>如果要保证上面的代码能正确执行下去，就需要对删除元素和获取元素的代码进行同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (vector) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">            vector.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (vector) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">            vector.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-线程兼容"><a href="#4-线程兼容" class="headerlink" title="4. 线程兼容"></a>4. 线程兼容</h3><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API 中大部分的类都是属于线程兼容的，如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等。</p>
<h3 id="5-线程对立"><a href="#5-线程对立" class="headerlink" title="5. 线程对立"></a>5. 线程对立</h3><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于 Java 语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。</p>
<h2 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h2><h3 id="1-互斥同步"><a href="#1-互斥同步" class="headerlink" title="1. 互斥同步"></a>1. 互斥同步</h3><p>synchronized 和 ReentrantLock。</p>
<h3 id="2-非阻塞同步"><a href="#2-非阻塞同步" class="headerlink" title="2. 非阻塞同步"></a>2. 非阻塞同步</h3><p>互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p>
<p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p>
<p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步操作称为非阻塞同步。</p>
<p>乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。</p>
<p>硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p>
<p>J.U.C 包里面的整数原子类 AtomicInteger，其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作。</p>
<p>以下代码使用了 AtomicInteger 执行了自增的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AtomicInteger cnt = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下代码是 incrementAndGet() 的源码，它调用了 unsafe 的 getAndAddInt() 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值 ==var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p>
<p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ABA ：如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p>
<p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p>
<h3 id="3-无同步方案"><a href="#3-无同步方案" class="headerlink" title="3. 无同步方案"></a>3. 无同步方案</h3><p>要保证线程安全，并不是一定就要进行同步，两者没有因果关系。同步只是保证共享数据争用时的正确性的手段，如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性，因此会有一些代码天生就是线程安全的。</p>
<p><strong>（一）可重入代码（Reentrant Code）</strong> </p>
<p>这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。</p>
<p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p>
<p><strong>（二）栈封闭</strong> </p>
<p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在栈中，属于线程私有的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackClosedExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add100</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StackClosedExample example = <span class="keyword">new</span> StackClosedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<p><strong>（三）线程本地存储（Thread Local Storage）</strong> </p>
<p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p>
<p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式（如“生产者-消费者”模式）都会将产品的消费过程尽量在一个线程中消费完，其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p>
<p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p>
<p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>为了理解 ThreadLocal，先看以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal1 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        ThreadLocal threadLocal2 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">1</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它所对应的底层结构图为：</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//3646544a-cb57-451d-9e03-d3c4f5e4434a.png" width=""/> </div><br>

<p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象，Thread 类中就定义了 ThreadLocal.ThreadLocalMap 成员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment"> * by the ThreadLocal class. */</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>get() 方法类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p>
<h1 id="十二、锁优化"><a href="#十二、锁优化" class="headerlink" title="十二、锁优化"></a>十二、锁优化</h1><p>这里的锁优化主要是指虚拟机对 synchronized 的优化。</p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>互斥同步的进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</p>
<p>自选锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。</p>
<p>在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p>
<h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p>
<p>锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p>
<p>对于一些看起来没有加锁的代码，其实隐式的加了很多锁。例如下面的字符串拼接代码就隐式加了锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">concatString</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，会转化为 StringBuffer 对象的连续 append() 操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">concatString</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    sb.append(s3);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个 append() 方法中都有一个同步块。虚拟机观察变量 sb，很快就会发现它的动态作用域被限制在 concatString() 方法内部。也就是说，sb 的所有引用永远不会“逃逸”到 concatString() 方法之外，其他线程无法访问到它，因此可以进行消除。</p>
<h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</p>
<p>上一节的示例代码中连续的 append() 方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。对于上一节的示例代码就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，这样只需要加锁一次就可以了。</p>
<h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p>
<p>以下是 HotSpot 虚拟机对象头的内存布局，这些数据被称为 mark word。其中 tag bits 对应了五个状态，这些状态在右侧的 state 表格中给出，应该注意的是 state 表格不是存储在对象头中的。除了 marked for gc 状态，其它四个状态已经在前面介绍过了。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//bb6a49be-00f2-4f27-a0ce-4ed764bc605c.png" width="600"/> </div><br>

<p>下图左侧是一个线程的虚拟机栈，其中有一部分称为 Lock Record 的区域，这是在轻量级锁运行过程创建的，用于存放锁对象的 Mark Word。而右侧就是一个锁对象，包含了 Mark Word 和其它信息。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//051e436c-0e46-4c59-8f67-52d89d656182.png" width="500"/> </div><br>

<p>轻量级锁是相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。</p>
<p>当尝试获取一个锁对象时，如果锁对象标记为 0 01，说明锁对象的锁未锁定（unlocked）状态。此时虚拟机在当前线程栈中创建 Lock Record，然后使用 CAS 操作将对象的 Mark Word 更新为 Lock Record 指针。如果 CAS 操作成功了，那么线程就获取了该对象上的锁，并且对象的 Mark Word 的锁标记变为 00，表示该对象处于轻量级锁状态。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//baaa681f-7c52-4198-a5ae-303b9386cf47.png" width="500"/> </div><br>

<p>如果 CAS 操作失败了，虚拟机首先会检查对象的 Mark Word 是否指向当前线程的虚拟机栈，如果是的话说明当前线程已经拥有了这个锁对象，那就可以直接进入同步块继续执行，否则说明这个锁对象已经被其他线程线程抢占了。如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁。</p>
<h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p>
<p>当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到 Mark Word 中，如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。</p>
<p>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定状态或者轻量级锁状态。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//390c913b-5f31-444f-bbdb-2b88b688e7ce.jpg" width="600"/> </div><br>

<h1 id="十三、多线程开发良好的实践"><a href="#十三、多线程开发良好的实践" class="headerlink" title="十三、多线程开发良好的实践"></a>十三、多线程开发良好的实践</h1><ul>
<li><p>给线程起个有意义的名字，这样可以方便找 Bug。</p>
</li>
<li><p>缩小同步范围，例如对于 synchronized，应该尽量使用同步块而不是同步方法。</p>
</li>
<li><p>多用同步类少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现对复杂的控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善，使用这些更高等级的同步工具你的程序可以不费吹灰之力获得优化。</p>
</li>
<li><p>多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。</p>
</li>
<li><p>使用本地变量和不可变类来保证线程安全。</p>
</li>
<li><p>使用线程池而不是直接创建 Thread 对象，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。</p>
</li>
<li><p>使用 BlockingQueue 实现生产者消费者问题。</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>BruceEckel. Java 编程思想: 第 4 版 [M]. 机械工业出版社, 2007.</li>
<li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se6/html/Threads.doc.html" target="_blank" rel="noopener external nofollow noreferrer">Threads and Locks</a></li>
<li><a href="http://ifeve.com/thread-signaling/#missed_signal" target="_blank" rel="noopener external nofollow noreferrer">线程通信</a></li>
<li><a href="http://www.importnew.com/12773.html" target="_blank" rel="noopener external nofollow noreferrer">Java 线程面试题 Top 50</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/blockingqueue.html" target="_blank" rel="noopener external nofollow noreferrer">BlockingQueue</a></li>
<li><a href="https://stackoverflow.com/questions/11265289/thread-state-java" target="_blank" rel="noopener external nofollow noreferrer">thread state java</a></li>
<li><a href="http://wiki.expertiza.ncsu.edu/index.php/CSC_456_Spring_2012/ch7_MN" target="_blank" rel="noopener external nofollow noreferrer">CSC 456 Spring 2012/ch7 MN</a></li>
<li><a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/happens-before.html" target="_blank" rel="noopener external nofollow noreferrer">Java - Understanding Happens-before relationship</a></li>
<li><a href="https://www.slideshare.net/novathinker/6-thread-synchronization" target="_blank" rel="noopener external nofollow noreferrer">6장 Thread Synchronization</a></li>
<li><a href="https://stackoverflow.com/questions/1202444/how-is-javas-threadlocal-implemented-under-the-hood/15653015" target="_blank" rel="noopener external nofollow noreferrer">How is Java’s ThreadLocal implemented under the hood?</a></li>
<li><a href="https://sites.google.com/site/webdevelopart/21-compile/06-java/javase/concurrent?tmpl=%2Fsystem%2Fapp%2Ftemplates%2Fprint%2F&showPrintDialog=1" target="_blank" rel="noopener external nofollow noreferrer">Concurrent</a></li>
<li><a href="http://www.javacreed.com/java-fork-join-example/" target="_blank" rel="noopener external nofollow noreferrer" title="Java Fork Join Example">JAVA FORK JOIN EXAMPLE</a></li>
<li><a href="http://ifeve.com/talk-concurrency-forkjoin/" target="_blank" rel="noopener external nofollow noreferrer">聊聊并发（八）——Fork/Join 框架介绍</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/tech/biasedlocking-oopsla2006-preso-150106.pdf" target="_blank" rel="noopener external nofollow noreferrer">Eliminating SynchronizationRelated Atomic Operations with Biased Locking and Bulk Rebiasing</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA虚拟机</title>
    <url>/posts/60574.html</url>
    <content><![CDATA[<pre><code>Java虚拟机相关知识、java内存机制、GC垃圾回收机制、类加载机制</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一运行时数据区域">一、运行时数据区域</a><ul>
<li><a href="#程序计数器">程序计数器</a></li>
<li><a href="#java-虚拟机栈">Java 虚拟机栈</a></li>
<li><a href="#本地方法栈">本地方法栈</a></li>
<li><a href="#堆">堆</a></li>
<li><a href="#方法区">方法区</a></li>
<li><a href="#运行时常量池">运行时常量池</a></li>
<li><a href="#直接内存">直接内存</a></li>
</ul>
</li>
<li><a href="#二垃圾收集">二、垃圾收集</a><ul>
<li><a href="#判断一个对象是否存活">判断一个对象是否存活</a></li>
<li><a href="#垃圾收集算法">垃圾收集算法</a></li>
<li><a href="#垃圾收集器">垃圾收集器</a></li>
<li><a href="#内存分配与回收策略">内存分配与回收策略</a></li>
</ul>
</li>
<li><a href="#三类加载机制">三、类加载机制</a><ul>
<li><a href="#类的生命周期">类的生命周期</a></li>
<li><a href="#类初始化时机">类初始化时机</a></li>
<li><a href="#类加载过程">类加载过程</a></li>
<li><a href="#类加载器">类加载器</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、运行时数据区域"><a href="#一、运行时数据区域" class="headerlink" title="一、运行时数据区域"></a>一、运行时数据区域</h1><div align="center"> <img src= "/img/loading.gif" data-src="../pics//c9ad2bf4-5580-4018-bce4-1b9a71804d9c.png" width="400"/> </div><br>

<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p>
<h2 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h2><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息，从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//926c7438-c5e1-4b94-840a-dcb24ff1dafe.png" width="450"/> </div><br>

<p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xss=<span class="number">512</span>M HackTheJava</span><br></pre></td></tr></table></figure>

<p>该区域可能抛出以下异常：</p>
<ul>
<li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li>
<li>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</li>
</ul>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法不是用 Java 实现，对待这些方法需要特别处理。</p>
<p>与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p>
<p>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的, 并且被编译为基于本机硬件和操作系统的程序。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//JNI-Java-Native-Interface.jpg" width="350"/> </div><br>

<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>所有对象实例都在这里分配内存，是垃圾收集的主要区域（”GC 堆”）。</p>
<p>现代的垃圾收集器基本都是采用分代收集算法，针对不同的对象采取不同的垃圾回收算法，可以将堆分成两块：</p>
<ul>
<li>新生代（Young Generation）</li>
<li>老年代（Old Generation）</li>
</ul>
<p>新生代可以继续划分成以下三个空间：</p>
<ul>
<li>Eden（伊甸园）</li>
<li>From Survivor（幸存者）</li>
<li>To Survivor</li>
</ul>
<p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p>
<p>可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xms=<span class="number">1</span>M -Xmx=<span class="number">2</span>M HackTheJava</span><br></pre></td></tr></table></figure>

<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>和堆一样不需要连续的内存，并且可以动态扩展。</p>
<p>动态扩展失败一样会抛出 OutOfMemoryError 异常。</p>
<p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p>
<p>JDK 1.7 之前，HotSpot 虚拟机把它当成永久代来进行垃圾回收。但是从 JDK 1.7 开始，已经把原本放在永久代的字符串常量池移到 Native Method 中。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是方法区的一部分。</p>
<p>Class 文件中的常量池（编译器生成的各种字面量和符号引用）会在类加载后被放入这个区域。</p>
<p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。</p>
<p>这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p>
<h1 id="二、垃圾收集"><a href="#二、垃圾收集" class="headerlink" title="二、垃圾收集"></a>二、垃圾收集</h1><p>垃圾回收主要是针对堆和方法区进行。</p>
<p>程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p>
<h2 id="判断一个对象是否存活"><a href="#判断一个对象是否存活" class="headerlink" title="判断一个对象是否存活"></a>判断一个对象是否存活</h2><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h3><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数不为 0 的对象仍然存活。</p>
<p>两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p>
<p>正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGC objectA = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC objectB = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        objectA.instance = objectB;</span><br><span class="line">        objectB.instance = objectA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2. 可达性分析算法"></a>2. 可达性分析算法</h3><p>通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//0635cbe8.png" width=""/> </div><br>

<p>Java 虚拟机使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容：</p>
<ul>
<li>虚拟机栈中引用的对象</li>
<li>本地方法栈中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<h3 id="3-引用类型"><a href="#3-引用类型" class="headerlink" title="3. 引用类型"></a>3. 引用类型</h3><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p>
<p>Java 具有四种强度不同的引用类型。</p>
<p><strong>（一）强引用</strong> </p>
<p>被强引用关联的对象不会被回收。</p>
<p>使用 new 一个新对象的方式来创建强引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<p><strong>（二）软引用</strong> </p>
<p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p>
<p>使用 SoftReference 类来创建软引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure>

<p><strong>（三）弱引用</strong> </p>
<p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾收集。</p>
<p>使用 WeakReference 类来实现弱引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>（四）虚引用</strong> </p>
<p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。</p>
<p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。</p>
<p>使用 PhantomReference 来实现虚引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-方法区的回收"><a href="#4-方法区的回收" class="headerlink" title="4. 方法区的回收"></a>4. 方法区的回收</h3><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，因此在方法区上进行回收性价比不高。</p>
<p>主要是对常量池的回收和对类的卸载。</p>
<p>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGi 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p>
<p>类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是堆中不存在该类的任何实例。</li>
<li>加载该类的 ClassLoader 已经被回收。</li>
<li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li>
</ul>
<p>可以通过 -Xnoclassgc 参数来控制是否对类进行卸载。</p>
<h3 id="5-finalize"><a href="#5-finalize" class="headerlink" title="5. finalize()"></a>5. finalize()</h3><p>finalize() 类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p>
<p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能通过在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会调用 finalize() 方法。</p>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="1-标记-清除"><a href="#1-标记-清除" class="headerlink" title="1. 标记 - 清除"></a>1. 标记 - 清除</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//a4248c4b-6c1d-4fb8-a557-86da92d3a294.jpg" width=""/> </div><br>

<p>将存活的对象进行标记，然后清理掉未被标记的对象。</p>
<p>不足：</p>
<ul>
<li>标记和清除过程效率都不高；</li>
<li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li>
</ul>
<h3 id="2-标记-整理"><a href="#2-标记-整理" class="headerlink" title="2. 标记 - 整理"></a>2. 标记 - 整理</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//902b83ab-8054-4bd2-898f-9a4a0fe52830.jpg" width=""/> </div><br>

<p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<h3 id="3-复制"><a href="#3-复制" class="headerlink" title="3. 复制"></a>3. 复制</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//e6b733ad-606d-4028-b3e8-83c3a73a3797.jpg" width=""/> </div><br>

<p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p>
<p>主要不足是只使用了内存的一半。</p>
<p>现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。</p>
<p>HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。</p>
<h3 id="4-分代收集"><a href="#4-分代收集" class="headerlink" title="4. 分代收集"></a>4. 分代收集</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>
<p>一般将堆分为新生代和老年代。</p>
<ul>
<li>新生代使用：复制算法</li>
<li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li>
</ul>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//c625baa0-dde6-449e-93df-c3a67f2f430f.jpg" width=""/> </div><br>

<p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p>
<ul>
<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；</li>
<li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li>
</ul>
<h3 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg" width=""/> </div><br>

<p>Serial 翻译为串行，也就是说它以串行的方式执行。</p>
<p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p>
<p>它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p>
<p>它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p>
<h3 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg" width=""/> </div><br>

<p>它是 Serial 收集器的多线程版本。</p>
<p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p>
<p>默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p>
<h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h3><p>与 ParNew 一样是多线程收集器。</p>
<p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。</p>
<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>
<p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p>
<p>可以通过一个开关参数打卡 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为 。</p>
<h3 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4. Serial Old 收集器"></a>4. Serial Old 收集器</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//08f32fd3-f736-4a67-81ca-295b2a7972f2.jpg" width=""/> </div><br>

<p>是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途：</p>
<ul>
<li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li>
<li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li>
</ul>
<h3 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//278fe431-af88-4a95-a895-9c3b80117de3.jpg" width=""/> </div><br>

<p>是 Parallel Scavenge 收集器的老年代版本。</p>
<p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p>
<h3 id="6-CMS-收集器"><a href="#6-CMS-收集器" class="headerlink" title="6. CMS 收集器"></a>6. CMS 收集器</h3><div align="center"> <img src= "/img/loading.gif" data-src="../pics//62e77997-6957-4b68-8d12-bfd609bb2c68.jpg" width=""/> </div><br>

<p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p>
<p>分为以下四个流程：</p>
<ul>
<li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li>
<li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li>
<li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li>
<li>并发清除：不需要停顿。</li>
</ul>
<p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p>
<p>具有以下缺点：</p>
<ul>
<li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li>
<li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li>
<li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li>
</ul>
<h3 id="7-G1-收集器"><a href="#7-G1-收集器" class="headerlink" title="7. G1 收集器"></a>7. G1 收集器</h3><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p>
<p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//4cf711a8-7ab2-4152-b85c-d5c226733807.png" width="600"/> </div><br>

<p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png" width="600"/> </div><br>

<p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p>
<p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//f99ee771-c56f-47fb-9148-c0036695b5fe.jpg" width=""/> </div><br>

<p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li>
<li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li>
</ul>
<p>具备如下特点：</p>
<ul>
<li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li>
<li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li>
</ul>
<p>更详细内容请参考：<a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html" target="_blank" rel="noopener external nofollow noreferrer">Getting Started with the G1 Garbage Collector</a></p>
<h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><h3 id="1-Minor-GC-和-Full-GC"><a href="#1-Minor-GC-和-Full-GC" class="headerlink" title="1. Minor GC 和 Full GC"></a>1. Minor GC 和 Full GC</h3><ul>
<li>Minor GC：发生在新生代上，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</li>
<li>Full GC：发生在老年代上，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</li>
</ul>
<h3 id="2-内存分配策略"><a href="#2-内存分配策略" class="headerlink" title="2. 内存分配策略"></a>2. 内存分配策略</h3><p>（一）对象优先在 Eden 分配</p>
<p>大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。</p>
<p>（二）大对象直接进入老年代</p>
<p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p>
<p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p>
<p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制。</p>
<p>（三）长期存活的对象进入老年代</p>
<p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</p>
<p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p>
<p>（四）动态对象年龄判定</p>
<p>虚拟机并不是永远地要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p>
<p>（五）空间分配担保</p>
<p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p>
<p>如果不成立的话虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那么就要进行一次 Full GC。</p>
<h3 id="3-Full-GC-的触发条件"><a href="#3-Full-GC-的触发条件" class="headerlink" title="3. Full GC 的触发条件"></a>3. Full GC 的触发条件</h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p>
<p>（一）调用 System.gc()</p>
<p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p>
<p>（二）老年代空间不足</p>
<p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p>
<p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p>
<p>（三）空间分配担保失败</p>
<p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第五小节。</p>
<p>（四）JDK 1.7 及以前的永久代空间不足</p>
<p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p>
<p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p>
<p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p>
<p>（五）Concurrent Mode Failure</p>
<p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p>
<h1 id="三、类加载机制"><a href="#三、类加载机制" class="headerlink" title="三、类加载机制"></a>三、类加载机制</h1><p>类是在运行期间动态加载的。</p>
<h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//32b8374a-e822-4720-af0b-c0f485095ea2.jpg" width=""/> </div><br>

<p>包括以下 7 个阶段：</p>
<ul>
<li><strong>加载（Loading）</strong> </li>
<li><strong>验证（Verification）</strong> </li>
<li><strong>准备（Preparation）</strong> </li>
<li><strong>解析（Resolution）</strong> </li>
<li><strong>初始化（Initialization）</strong> </li>
<li>使用（Using）</li>
<li>卸载（Unloading）</li>
</ul>
<p>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</p>
<h2 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h2><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p>
<ul>
<li><p>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</p>
</li>
<li><p>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</p>
</li>
<li><p>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p>
</li>
<li><p>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</p>
</li>
<li><p>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</p>
</li>
</ul>
<p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p>
<ul>
<li>通过子类引用父类的静态字段，不会导致子类初始化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(SubClass.value);  <span class="comment">// value 字段在 SuperClass 中定义</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ConstClass.HELLOWORLD);</span><br></pre></td></tr></table></figure>

<h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>包含了加载、验证、准备、解析和初始化这 5 个阶段。</p>
<h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h3><p>加载是类加载的一个阶段，注意不要混淆。</p>
<p>加载过程完成以下三件事：</p>
<ul>
<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构。</li>
<li>在内存中生成一个代表这个类的 Class 对象，作为方法区这个类的各种数据的访问入口。</li>
</ul>
<p>其中二进制字节流可以从以下方式中获取：</p>
<ul>
<li>从 ZIP 包读取，这很常见，最终成为日后 JAR、EAR、WAR 格式的基础。</li>
<li>从网络中获取，这种场景最典型的应用是 Applet。</li>
<li>运行时计算生成，这种场景使用得最多得就是动态代理技术，在 java.lang.reflect.Proxy 中，就是用了 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。</li>
<li>由其他文件生成，典型场景是 JSP 应用，即由 JSP 文件生成对应的 Class 类。</li>
<li>从数据库读取，这种场景相对少见，例如有些中间件服务器（如 SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。<br>…</li>
</ul>
<h3 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h3><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<ul>
<li>文件格式验证：验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理。</li>
<li>元数据验证：对字节码描述的信息进行语义分析，以保证其描述的信息符合 Java 语言规范的要求。</li>
<li>字节码验证：通过数据流和控制流分析，确保程序语义是合法、符合逻辑的。</li>
<li>符号引用验证：发生在虚拟机将符号引用转换为直接引用的时候，对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。</li>
</ul>
<h3 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h3><p>类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</p>
<p>实例变量不会在这阶段分配内存，它将会在对象实例化时随着对象一起分配在 Java 堆中。（实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次）</p>
<p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p>如果类变量是常量，那么会按照表达式来进行初始化，而不是赋值为 0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h3><p>将常量池的符号引用替换为直接引用的过程。</p>
<h3 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h3><p>初始化阶段才真正开始执行类中的定义的 Java 程序代码。初始化阶段即虚拟机执行类构造器 &lt;clinit&gt;() 方法的过程。</p>
<p>在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。</p>
<p>&lt;clinit&gt;() 方法具有以下特点：</p>
<ul>
<li>是由编译器自动收集类中所有类变量的赋值动作和静态语句块（static{} 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;                <span class="comment">// 给变量赋值可以正常编译通过</span></span><br><span class="line">        System.out.print(i);  <span class="comment">// 这句编译器会提示“非法向前引用”</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>与类的构造函数（或者说实例构造器 &lt;init&gt;()）不同，不需要显式的调用父类的构造器。虚拟机会自动保证在子类的 &lt;clinit&gt;() 方法运行之前，父类的 &lt;clinit&gt;() 方法已经执行结束。因此虚拟机中第一个执行 &lt;clinit&gt;() 方法的类肯定为 java.lang.Object。</p>
</li>
<li><p>由于父类的 &lt;clinit&gt;() 方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        A = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> B = A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     System.out.println(Sub.B);  <span class="comment">// 输出结果是父类中的静态变量 A 的值，也就是 2。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt;clinit&gt;() 方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成 &lt;clinit&gt;() 方法。</p>
</li>
<li><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 &lt;clinit&gt;() 方法。但接口与类不同的是，执行接口的 &lt;clinit&gt;() 方法不需要先执行父接口的 &lt;clinit&gt;() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 &lt;clinit&gt;() 方法。</p>
</li>
<li><p>虚拟机会保证一个类的 &lt;clinit&gt;() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 &lt;clinit&gt;() 方法，其它线程都会阻塞等待，直到活动线程执行 &lt;clinit&gt;() 方法完毕。如果在一个类的 &lt;clinit&gt;() 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</p>
</li>
</ul>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>在 Java 虚拟机外部实现，以便让应用程序自己决定如何去获取所需要的类。</p>
<h3 id="1-类与类加载器"><a href="#1-类与类加载器" class="headerlink" title="1. 类与类加载器"></a>1. 类与类加载器</h3><p>两个类相等：类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。</p>
<p>这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。</p>
<h3 id="2-类加载器分类"><a href="#2-类加载器分类" class="headerlink" title="2. 类加载器分类"></a>2. 类加载器分类</h3><p>从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：</p>
<ul>
<li><p>启动类加载器（Bootstrap ClassLoader），这个类加载器用 C++ 实现，是虚拟机自身的一部分；</p>
</li>
<li><p>所有其他类的加载器，这些类由 Java 实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</p>
</li>
</ul>
<p>从 Java 开发人员的角度看，类加载器可以划分得更细致一些：</p>
<ul>
<li><p>启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 &lt;JRE_HOME&gt;\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 &lt;JAVA_HOME&gt;/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
</li>
</ul>
<h3 id="3-双亲委派模型"><a href="#3-双亲委派模型" class="headerlink" title="3. 双亲委派模型"></a>3. 双亲委派模型</h3><p>应用程序都是由三种类加载器相互配合进行加载的，如果有必要，还可以加入自己定义的类加载器。</p>
<p>下图展示的类加载器之间的层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//class_loader_hierarchy.png" width="600"/> </div><br>

<p>（一）工作过程</p>
<p>一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载。</p>
<p>（二）好处</p>
<p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</p>
<p>例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 ClassPath 中，程序可以编译通过。因为双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。正因为 rt.jar 中的 Object 优先级更高，因为程序中所有的 Object 都是这个 Object。</p>
<p>（三）实现</p>
<p>以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The parent class loader for delegation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义类加载器实现"><a href="#4-自定义类加载器实现" class="headerlink" title="4. 自定义类加载器实现"></a>4. 自定义类加载器实现</h3><p>FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。</p>
<p>java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，因此自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        String path = classNameToPath(className);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream ins = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> bufferSize = <span class="number">4096</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            <span class="keyword">int</span> bytesNumRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">classNameToPath</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootDir + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="noopener external nofollow noreferrer">Chapter 2. The Structure of the Java Virtual Machine</a></li>
<li><a href="https://www.slideshare.net/benewu/jvm-memory" target="_blank" rel="noopener external nofollow noreferrer">Jvm memory</a></li>
<li><a href="http://electrofriends.com/articles/jni/jni-part1-java-native-interface/" target="_blank" rel="noopener external nofollow noreferrer">JNI Part1: Java Native Interface Introduction and “Hello World” application</a></li>
<li><a href="https://hackthejava.wordpress.com/2015/01/09/memory-architecture-by-jvmruntime-data-areas/" target="_blank" rel="noopener external nofollow noreferrer">Memory Architecture Of JVM(Runtime Data Areas)</a></li>
<li><a href="https://www.programcreek.com/2013/04/jvm-run-time-data-areas/" target="_blank" rel="noopener external nofollow noreferrer">JVM Run-Time Data Areas</a></li>
<li><a href="http://www.drdobbs.com/architecture-and-design/android-on-x86-java-native-interface-and/240166271" target="_blank" rel="noopener external nofollow noreferrer">Android on x86: Java Native Interface and the Android Native Development Kit</a></li>
<li><a href="https://crowhawk.github.io/2017/08/10/jvm_2/" target="_blank" rel="noopener external nofollow noreferrer">深入理解 JVM(2)——GC 算法与内存分配策略</a></li>
<li><a href="https://crowhawk.github.io/2017/08/15/jvm_3/" target="_blank" rel="noopener external nofollow noreferrer">深入理解 JVM(3)——7 种垃圾收集器</a></li>
<li><a href="http://blog.jamesdbloom.com/JVMInternals.html" target="_blank" rel="noopener external nofollow noreferrer">JVM Internals</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html#code6" target="_blank" rel="noopener external nofollow noreferrer">深入探讨 Java 类加载器</a></li>
<li><a href="http://www.baeldung.com/java-weakhashmap" target="_blank" rel="noopener external nofollow noreferrer">Guide to WeakHashMap in Java</a></li>
<li><a href="https://alvinalexander.com/java/jwarehouse/apache-tomcat-6.0.16/java/org/apache/el/util/ConcurrentCache.java.shtml" target="_blank" rel="noopener external nofollow noreferrer">Tomcat example source code file (ConcurrentCache.java)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java资源大全</title>
    <url>/posts/56655.html</url>
    <content><![CDATA[<pre><code>Java资源大全中文    java相关工具、相关知识书籍、java相关资源链接</code></pre><hr>
<h1 id="Java资源大全中文版"><a href="#Java资源大全中文版" class="headerlink" title="Java资源大全中文版"></a>Java资源大全中文版</h1><p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href="https://github.com/akullpp/awesome-java" target="_blank" rel="noopener external nofollow noreferrer">awesome-java</a> 就是 akullpp 发起维护的 Java 资源列表，内容包括：构建工具、数据库、框架、模板、安全、代码分析、日志、第三方库、书籍、Java 站点等等。伯乐在线已经把 awesome-java 资源列表翻成中文后发布于 <a href="http://www.importnew.com/14429.html" target="_blank" rel="noopener external nofollow noreferrer">ImportNew</a>。</p>
<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。</p>
<hr>
<h3 id="我们要做什么？"><a href="#我们要做什么？" class="headerlink" title="我们要做什么？"></a>我们要做什么？</h3><ul>
<li>基于 awesome-java 资源列表，我们将对各个资源项进行编译整理。</li>
<li>整理后的内容，将收录在<a href="http://hao.jobbole.com/" target="_blank" rel="noopener external nofollow noreferrer">伯乐在线资源频道</a>。可参考已整理的内容：<ul>
<li>《<a href="http://hao.jobbole.com/owner/" target="_blank" rel="noopener external nofollow noreferrer">OWNER：Java配置文件解决方案</a>》</li>
<li>《<a href="http://hao.jobbole.com/spring-boot/" target="_blank" rel="noopener external nofollow noreferrer">Spring Boot：简化Spring应用初始搭建以及开发过程</a>》</li>
<li>《<a href="http://hao.jobbole.com/sonarqube/" target="_blank" rel="noopener external nofollow noreferrer">SonarQube：开源的代码质量管理工具</a>》</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何参与本项目？"><a href="#如何参与本项目？" class="headerlink" title="如何参与本项目？"></a>如何参与本项目？</h3><!-- 从下面的目录来看，本项目的工作量小不了，所以非常期待能有更多程序员一起来参与。

不过加入前，有几个小要求：

* 英文还不错，能读懂英文并用自己的话复述；
* 在用 Java；

如有兴趣，请加 QQ：50872495。加 Q 时请注明「Java大全」 -->

<hr>
<h3 id="如何为列表贡献新资源？"><a href="#如何为列表贡献新资源？" class="headerlink" title="如何为列表贡献新资源？"></a>如何为列表贡献新资源？</h3><p>欢迎大家为列表贡献高质量的新资源，提交PR时请参照以下要求：</p>
<ul>
<li>请确保推荐的资源自己使用过</li>
<li>提交PR时请注明推荐理由</li>
</ul>
<p>资源列表管理收到PR请求后，会定期（每周）在微博转发本周提交的PR列表，并在微博上面听取使用过这些资源的意见。确认通过后，会加入资源大全。</p>
<p>感谢您的贡献！</p>
<hr>
<h3 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h3><ul>
<li><p>维护者：<a href="https://github.com/tangyouhua" target="_blank" rel="noopener external nofollow noreferrer">tangyouhua</a></p>
</li>
<li><p>贡献者：<a href="https://github.com/tangyouhua" target="_blank" rel="noopener external nofollow noreferrer">tangyouhua</a>、<a href="https://github.com/kingzone" target="_blank" rel="noopener external nofollow noreferrer">kingzone</a>、<a href="https://github.com/llhua2329" target="_blank" rel="noopener external nofollow noreferrer">llhua2329</a>、<a href="https://github.com/BadCoderChou" target="_blank" rel="noopener external nofollow noreferrer">BadCoderChou</a>、<a href="http://www.jobbole.com/members/anankun/" target="_blank" rel="noopener external nofollow noreferrer">anankun</a>、<a href="http://www.jobbole.com/members/jianghehe/" target="_blank" rel="noopener external nofollow noreferrer">贺贺</a>、<a href="http://www.jobbole.com/members/petra/" target="_blank" rel="noopener external nofollow noreferrer">大彭</a>、<a href="https://github.com/wing00yf/" target="_blank" rel="noopener external nofollow noreferrer">superXiaoFan</a>、<a href="http://www.jobbole.com/members/3951356/" target="_blank" rel="noopener external nofollow noreferrer">javayrf</a>、<a href="http://www.jobbole.com/members/John%20Smith/" target="_blank" rel="noopener external nofollow noreferrer">John Smith</a>、<a href="http://www.jobbole.com/members/jaler/" target="_blank" rel="noopener external nofollow noreferrer">Jaler</a>、<a href="http://www.jobbole.com/members/fdconan/" target="_blank" rel="noopener external nofollow noreferrer">JM</a>、<a href="http://www.jobbole.com/members/zy124348985/" target="_blank" rel="noopener external nofollow noreferrer">dreamkidd</a>、<a href="http://www.jobbole.com/members/cheenlie" target="_blank" rel="noopener external nofollow noreferrer">cheenlie</a>、<a href="http://www.jobbole.com/members/zhangQian1991" target="_blank" rel="noopener external nofollow noreferrer">zhangQian1991</a>、<a href="http://www.jobbole.com/members/wt726553124/" target="_blank" rel="noopener external nofollow noreferrer">王涛</a>、<a href="http://www.jobbole.com/members/xun_cui" target="_blank" rel="noopener external nofollow noreferrer">马</a>、<a href="http://www.jobbole.com/members/xuhf_1988/" target="_blank" rel="noopener external nofollow noreferrer">vvkee</a>、<a href="http://www.jobbole.com/members/yangxy81118" target="_blank" rel="noopener external nofollow noreferrer">凝枫</a>、<a href="https://github.com/luhaixun" target="_blank" rel="noopener external nofollow noreferrer">haixunlu</a>、<a href="http://www.jobbole.com/members/milly/" target="_blank" rel="noopener external nofollow noreferrer">milly</a>、<a href="http://www.jobbole.com/members/xuhf_1988/" target="_blank" rel="noopener external nofollow noreferrer">Hodur</a>、<a href="http://www.jobbole.com/members/FakeHank" target="_blank" rel="noopener external nofollow noreferrer">FakeHank</a>、<a href="http://www.jobbole.com/members/%E8%BF%9E%E4%B9%90/" target="_blank" rel="noopener external nofollow noreferrer">连乐</a>、<a href="http://www.jobbole.com/members/UncleTim/" target="_blank" rel="noopener external nofollow noreferrer">UncleTim</a>、<a href="http://www.jobbole.com/members/sunbiaobiao" target="_blank" rel="noopener external nofollow noreferrer">sunbiaobiao</a>、<a href="http://www.jobbole.com/members/wx2702327993/" target="_blank" rel="noopener external nofollow noreferrer">zhiguo</a>、<a href="http://www.jobbole.com/members/zhongjianno1/" target="_blank" rel="noopener external nofollow noreferrer">光光头去打酱油</a>、<a href="http://www.jobbole.com/members/TonyAaron/" target="_blank" rel="noopener external nofollow noreferrer">云中游</a>、<a href="http://www.jobbole.com/members/zemo/" target="_blank" rel="noopener external nofollow noreferrer">Zemo</a>、<a href="https://github.com/sdcuike" target="_blank" rel="noopener external nofollow noreferrer">sdcuike</a>、<a href="https://github.com/danielwii" target="_blank" rel="noopener external nofollow noreferrer">danielwii</a>、<a href="http://www.jobbole.com/members/q1118024125/" target="_blank" rel="noopener external nofollow noreferrer">oneDay</a>、<a href="https://github.com/dfghj44444" target="_blank" rel="noopener external nofollow noreferrer">邢敏</a>、<a href="https://github.com/heikehuan" target="_blank" rel="noopener external nofollow noreferrer">heikehuan</a>、<a href="https://github.com/fgcui1204" target="_blank" rel="noopener external nofollow noreferrer">fgcui1204</a>、<a href="https://github.com/wenxueliu" target="_blank" rel="noopener external nofollow noreferrer">wenxueliu</a>、<a href="https://github.com/node" target="_blank" rel="noopener external nofollow noreferrer">Gentle Yang</a>、<a href="http://hao.jobbole.com/author/huangxiaofei/" target="_blank" rel="noopener external nofollow noreferrer">黄小非</a>、<a href="http://www.jobbole.com/members/wtgn1m1/" target="_blank" rel="noopener external nofollow noreferrer">wangtg</a>、<a href="http://www.jobbole.com/members/2937134480/" target="_blank" rel="noopener external nofollow noreferrer">百焱</a>、<a href="http://www.jobbole.com/members/2480130384/" target="_blank" rel="noopener external nofollow noreferrer">胡不GUI</a>、<a href="http://www.jobbole.com/members/mtHzm/" target="_blank" rel="noopener external nofollow noreferrer">Another_mt</a>、<a href="http://www.jobbole.com/members/adonis/" target="_blank" rel="noopener external nofollow noreferrer">Rainbow</a>、<a href="http://www.jobbole.com/members/menghuanqiqi" target="_blank" rel="noopener external nofollow noreferrer">super^糖</a>、<a href="http://www.jobbole.com/members/huangyuliang/" target="_blank" rel="noopener external nofollow noreferrer">黄余粮</a>、<a href="http://www.jobbole.com/members/sunbojian100/" target="_blank" rel="noopener external nofollow noreferrer">Sun</a>、<a href="https://github.com/SoberChina" target="_blank" rel="noopener external nofollow noreferrer">李伟高</a>、<a href="https://github.com/q977734161" target="_blank" rel="noopener external nofollow noreferrer">lixiaobao</a>、You</p>
</li>
</ul>
<p>注：名单不分排名，不定期补充更新</p>
<hr>
<!-- ### 奖励计划

虽然奖励可能并不是你加入的主要原因，但还是有必要提一下：

* 整理超过 20 个资源后，可在伯乐在线上开通打赏；
* 每整理 20 个资源，有机会获得技术书籍或各种有意思的创意、极客产品；
* [奖励详情](http://hao.jobbole.com/rewards/)

* * * -->
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#awesome-java-cn">Java资源大全中文版</a><ul>
<li><a href="#ancients">古董级工具</a></li>
<li><a href="#build">构建工具</a></li>
<li><a href="#bytecode-manipulation">字节码操作</a></li>
<li><a href="#cluster-management">集群管理</a></li>
<li><a href="#code-analysis">代码分析</a></li>
<li><a href="#compiler-compiler">编译器生成工具</a></li>
<li><a href="#configuration">外部配置工具</a></li>
<li><a href="#constraint-satisfaction-problem-solver">约束满足问题求解程序</a></li>
<li><a href="#continuous-integration">持续集成</a></li>
<li><a href="#csv">CSV解析</a></li>
<li><a href="#data-structures">数据结构</a></li>
<li><a href="#database">数据库</a></li>
<li><a href="#date-and-time">时间日期工具库</a></li>
<li><a href="#dependency-injection">依赖注入</a></li>
<li><a href="#development">开发流程增强工具</a></li>
<li><a href="#distributed-applications">分布式应用</a></li>
<li><a href="#distributed-databases">分布式数据库</a></li>
<li><a href="#distribution">发布</a></li>
<li><a href="#document-processing">文档处理工具</a></li>
<li><a href="#functional-programming">函数式编程</a></li>
<li><a href="#game-development">游戏开发</a></li>
<li><a href="#gui">GUI</a></li>
<li><a href="#high-performance">高性能计算</a></li>
<li><a href="#ide">IDE</a></li>
<li><a href="#imagery">图像处理</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#jvm-and-jdk">JVM与JDK</a></li>
<li><a href="#languages">基于JVM的语言</a></li>
<li><a href="#logging">日志</a></li>
<li><a href="#machine-learning">机器学习</a></li>
<li><a href="#messaging">消息传递</a></li>
<li><a href="#miscellaneous">杂项</a></li>
<li><a href="#monitoring">应用监控工具</a></li>
<li><a href="#native">原生开发库</a></li>
<li><a href="#natural-language-processing">自然语言处理</a></li>
<li><a href="#networking">网络</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#pdf">PDF</a></li>
<li><a href="#performance-analysis">性能分析</a></li>
<li><a href="#reactive-libraries">响应式开发库</a></li>
<li><a href="#rest-frameworks">REST框架</a></li>
<li><a href="#science">科学计算与分析</a></li>
<li><a href="#search">搜索引擎</a></li>
<li><a href="#security">安全</a></li>
<li><a href="#serialization">序列化</a></li>
<li><a href="#server">应用服务器</a></li>
<li><a href="#template-engine">模板引擎</a></li>
<li><a href="#testing">测试</a></li>
<li><a href="#utility">通用工具库</a></li>
<li><a href="#web-crawling">网络爬虫</a></li>
<li><a href="#web-frameworks">Web框架</a></li>
<li><a href="#Business-Process-Management">业务流程管理套件</a></li>
</ul>
</li>
<li><a href="#resources">资源</a><ul>
<li><a href="#communities">社区</a></li>
<li><a href="#influential-books">有影响力的书</a></li>
<li><a href="#podcasts">播客</a></li>
<li><a href="#weibo-weixin">微博、微信公众号</a></li>
<li><a href="#twitter">Twitter</a></li>
<li><a href="#websites">知名网站</a></li>
</ul>
</li>
</ul>
<h2 id="ancients">古董级工具</h2>

<p><em>这些工具伴随着Java一起出现，在各自辉煌之后还在一直使用。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-ant/" target="_blank" rel="noopener external nofollow noreferrer">Apache Ant</a>：基于XML的构建管理工具。<a href="http://ant.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/cglib/" target="_blank" rel="noopener external nofollow noreferrer">cglib</a>：字节码生成库。<a href="https://github.com/cglib/cglib" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/glassfish/" target="_blank" rel="noopener external nofollow noreferrer">GlassFish</a>：应用服务器，由Oracle赞助支持的Java EE参考实现。<a href="https://glassfish.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hudson/" target="_blank" rel="noopener external nofollow noreferrer">Hudson</a>：持续集成服务器，目前仍在活跃开发。<a href="http://hudson-ci.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/javaserver-faces/" target="_blank" rel="noopener external nofollow noreferrer">JavaServer Faces</a>：Mojarra是JSF标准的一个开源实现，由Oracle开发。<a href="https://javaserverfaces.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/javaserver-pages/" target="_blank" rel="noopener external nofollow noreferrer">JavaServer Pages</a>：支持自定义标签库的网站通用模板库。<a href="https://jsp.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/liquibase/" target="_blank" rel="noopener external nofollow noreferrer">Liquibase</a>：与具体数据库独立的追踪、管理和应用数据库Scheme变化的工具。<a href="http://www.liquibase.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="build">构建工具</h3>

<p><em>构建及应用依赖关系处理工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/maven/" target="_blank" rel="noopener external nofollow noreferrer">Apache Maven</a>：Maven是一款声明式构建及依赖管理工具，采用约定优于配置方式进行管理。相对Apache Ant更推荐使用Maven，前者采用了过程式管理，维护相对困难。<a href="http://maven.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/bazel/" target="_blank" rel="noopener external nofollow noreferrer">Bazel</a>：来自Google的构建工具，可以快速、可靠地构建代码。<a href="http://bazel.io" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/gradle/" target="_blank" rel="noopener external nofollow noreferrer">Gradle</a>：使用Groovy（非XML）进行增量构建，可以很好地与Maven依赖管理配合工作。<a href="http://gradle.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/buck/" target="_blank" rel="noopener external nofollow noreferrer">Buck</a>：Facebook构建工具。<a href="https://buckbuild.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="bytecode-manipulation">字节码操作</h3>

<p><em>编程方式操作字节码的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/asm/" target="_blank" rel="noopener external nofollow noreferrer">ASM</a>：通用底层字节码操作和分析开发库。<a href="http://asm.ow2.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/byte-buddy/" target="_blank" rel="noopener external nofollow noreferrer">Byte Buddy</a>：使用流式API进一步简化字节码生成。<a href="http://bytebuddy.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/byteman/" target="_blank" rel="noopener external nofollow noreferrer">Byteman</a>：在运行时通过DSL（规则）操作字节码进行测试和故障排除。<a href="http://byteman.jboss.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/javassist/" target="_blank" rel="noopener external nofollow noreferrer">Javassist</a>：一个简化字节码编辑尝试。<a href="http://jboss-javassist.github.io/javassist" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="cluster-management">集群管理</h3>

<p><em>在集群内动态管理应用程序的框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-aurora/" target="_blank" rel="noopener external nofollow noreferrer">Apache Aurora</a>：Apache Aurora是一个Mesos框架，用于长时间运行服务和定时任务（cron job）。<a href="http://aurora.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/singularity/" target="_blank" rel="noopener external nofollow noreferrer">Singularity</a>：Singularity是一个Mesos框架，方便部署和操作。它支持Web Service、后台运行、调度作业和一次性任务。<a href="http://getsingularity.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="code-analysis">代码分析</h3>

<p><em>测量代码指标和质量工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/checkstyle/" target="_blank" rel="noopener external nofollow noreferrer">Checkstyle</a>：代码编写规范和标准静态分析工具。<a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/error-prone/" target="_blank" rel="noopener external nofollow noreferrer">Error Prone</a>：将常见编程错误作为运行时错误报告。<a href="https://github.com/google/error-prone" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>FindBugs：通过字节码静态分析查找隐藏bug。<a href="http://findbugs.sourceforge.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jqassistant/" target="_blank" rel="noopener external nofollow noreferrer">jQAssistant</a>：使用基于Neo4J查询语言进行代码静态分析。<a href="http://jqassistant.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/pmd/" target="_blank" rel="noopener external nofollow noreferrer">PMD</a>：对源代码分析查找不良的编程习惯。<a href="https://github.com/pmd/pmd" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/sonarqube/" target="_blank" rel="noopener external nofollow noreferrer">SonarQube</a>：通过插件集成其它分析组件，对过去一段时间内的数据进行统计。<a href="http://www.sonarqube.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="compiler-compiler">编译器生成工具</h3>

<p><em>用来创建解析器、解释器或编译器的框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/antlr/" target="_blank" rel="noopener external nofollow noreferrer">ANTLR</a>：复杂的全功能自顶向下解析框架。<a href="http://www.antlr.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="JavaCC：Java语法解析器生成工具">JavaCC</a>：JavaCC是更加专门的轻量级工具，易于上手且支持语法超前预测。<a href="https://javacc.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="configuration">外部配置工具</h3>

<p><em>支持外部配置的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/config/" target="_blank" rel="noopener external nofollow noreferrer">config</a>：针对JVM语言的配置库。<a href="https://github.com/typesafehub/config" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/owner/" target="_blank" rel="noopener external nofollow noreferrer">owner</a>：减少冗余配置属性。<a href="https://github.com/lviggiano/owner" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="constraint-satisfaction-problem-solver">约束满足问题求解程序</h3>

<p><em>帮助解决约束满足问题的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/choco/" target="_blank" rel="noopener external nofollow noreferrer">Choco</a>：可直接使用的约束满足问题求解程序，使用了约束规划技术。<a href="http://choco-solver.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jacop/" target="_blank" rel="noopener external nofollow noreferrer">JaCoP</a>：为FlatZinc语言提供了一个接口，可以执行MiniZinc模型。<a href="https://github.com/radsz/jacop/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/optaplanner/" target="_blank" rel="noopener external nofollow noreferrer">OptaPlanner</a>：业务规划与资源调度优化求解程序。<a href="http://www.optaplanner.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/sat4j/" target="_blank" rel="noopener external nofollow noreferrer">Sat4J</a>：逻辑代数与优化问题最先进的求解程序。<a href="http://www.sat4j.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="continuous-integration">持续集成</h3>

<ul>
<li><a href="http://hao.jobbole.com/bamboo/" target="_blank" rel="noopener external nofollow noreferrer">Bamboo</a>：Atlassian解决方案，可以很好地集成Atlassian的其他产品。可以选择开源许可，也可以购买商业版。<a href="https://www.atlassian.com/software/bamboo" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>CircleCI：提供托管服务，可以免费试用。<a href="https://circleci.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/codeship/" target="_blank" rel="noopener external nofollow noreferrer">Codeship</a>：提供托管服务，提供有限的免费模式。<a href="https://codeship.com/features" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="hao.jobbole.com/fabric8/">fabric8</a>：容器集成平台。<a href="http://fabric8.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/go/" target="_blank" rel="noopener external nofollow noreferrer">Go</a>：ThoughtWork开源解决方案。<a href="https://www.gocd.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jenkins/" target="_blank" rel="noopener external nofollow noreferrer">Jenkins</a>：支持基于服务器的部署服务。<a href="http://jenkins-ci.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/teamcity/" target="_blank" rel="noopener external nofollow noreferrer">TeamCity</a>：JetBrain的持续集成解决方案，有免费版。<a href="http://www.jetbrains.com/teamcity/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/travis/" target="_blank" rel="noopener external nofollow noreferrer">Travis</a>：通常用作开源项目的托管服务。<a href="https://travis-ci.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/buildkite/" target="_blank" rel="noopener external nofollow noreferrer">Buildkite</a>: 持续集成工具，用简单的脚本就能设置pipeline，而且能快速构建，可以免费试用。<a href="https://buildkite.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="csv">CSV解析</h3>

<p><em>简化CSV数据读写的框架与开发库</em></p>
<ul>
<li><a href="http://hao.jobbole.com/univocity-parsers/" target="_blank" rel="noopener external nofollow noreferrer">uniVocity-parsers</a>：速度最快功能最全的CSV开发库之一，同时支持TSV与固定宽度记录的读写。<a href="https://github.com/uniVocity/univocity-parsers" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="database">数据库</h3>

<p><em>简化数据库交互的相关工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-phoenix/" target="_blank" rel="noopener external nofollow noreferrer">Apache Phoenix</a>：HBase针对低延时应用程序的高性能关系数据库层。<a href="http://phoenix.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/crate/" target="_blank" rel="noopener external nofollow noreferrer">Crate</a>：实现了数据同步、分片、缩放、复制的分布式数据存储。除此之外还可以使用基于SQL的语法跨集群查询。<a href="https://crate.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/flyway/" target="_blank" rel="noopener external nofollow noreferrer">Flyway</a>：简单的数据库迁移工具。<a href="http://flywaydb.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/h2/" target="_blank" rel="noopener external nofollow noreferrer">H2</a>：小型SQL数据库，以可以作为内存数据库使用著称。<a href="http://h2database.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hikaricp/" target="_blank" rel="noopener external nofollow noreferrer">HikariCP</a>：高性能JDBC连接工具。<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jdbi/" target="_blank" rel="noopener external nofollow noreferrer">JDBI</a>：便捷的JDBC抽象。<a href="http://jdbi.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jooq/" target="_blank" rel="noopener external nofollow noreferrer">jOOQ</a>：为SQL schema生成typesafe代码。<a href="http://www.jooq.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/mapdb/" target="_blank" rel="noopener external nofollow noreferrer">MapDB</a>：以磁盘或堆内存中并发集合为基础的嵌入式数据库引擎。<a href="http://www.mapdb.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/presto/" target="_blank" rel="noopener external nofollow noreferrer">Presto</a>：针对大数据的分布式SQL查询引擎。<a href="https://github.com/facebook/presto" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/querydsl/" target="_blank" rel="noopener external nofollow noreferrer">Querydsl</a>：Typesafe统一查询。<a href="http://www.querydsl.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="data-structures">数据结构</h3>

<ul>
<li><a href="http://hao.jobbole.com/apache-parquet/" target="_blank" rel="noopener external nofollow noreferrer">Apache Parquet</a>：Google Dremel论文中发布的基于组装算法的列式（Columnar）存储格式。<a href="http://parquet.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/protobuf/" target="_blank" rel="noopener external nofollow noreferrer">Protobuf</a>：Google数据交换格式。<a href="https://github.com/google/protobuf" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/sbe/" target="_blank" rel="noopener external nofollow noreferrer">SBE</a>：简单二进制编码，是最快速的消息格式之一。<a href="https://github.com/real-logic/simple-binary-encoding" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/wire/" target="_blank" rel="noopener external nofollow noreferrer">Wire</a>：整洁轻量级协议缓存。<a href="https://github.com/square/wire" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="date-and-time">时间日期工具库</h3>

<p><em>处理时间和日期的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/joda-time/" target="_blank" rel="noopener external nofollow noreferrer">Joda-Time</a>：在Java 8发布前，Joda-Time是实际使用的时间日期库标准。<a href="http://www.joda.org/joda-time/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/time4j/" target="_blank" rel="noopener external nofollow noreferrer">Time4J</a>：高级时间和日期库。<a href="https://github.com/MenoData/Time4J" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/ThreeTen/" target="_blank" rel="noopener external nofollow noreferrer">ThreeTen</a>：JSR-310实现，为JDK提供更具特点的时间和日期API。<a href="http://www.threeten.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="dependency-injection">依赖注入</h3>

<p><em>帮实现依赖翻转范式的开发库。</em> <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener external nofollow noreferrer">官网</a></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-deltaspike/" target="_blank" rel="noopener external nofollow noreferrer">Apache DeltaSpike</a>：CDI扩展框架。<a href="https://deltaspike.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/dagger2/" target="_blank" rel="noopener external nofollow noreferrer">Dagger2</a>：编译时注入框架，不需要使用反射。<a href="http://google.github.io/dagger/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/guice/" target="_blank" rel="noopener external nofollow noreferrer">Guice</a>：可以匹敌Dagger的轻量级注入框架。<a href="https://github.com/google/guice" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hk2/" target="_blank" rel="noopener external nofollow noreferrer">HK2</a>：轻量级动态依赖注入框架。<a href="https://hk2.java.net" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="development">开发流程增强工具</h3>

<p><em>从最基本的层面增强开发流程。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/adt4j/" target="_blank" rel="noopener external nofollow noreferrer">ADT4J</a>：针对代数数据类型的JSR-269代码生成器。<a href="https://github.com/sviperll/adt4j" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/aspectj/" target="_blank" rel="noopener external nofollow noreferrer">AspectJ</a>：面向切面编程（AOP）的无缝扩展。<a href="https://eclipse.org/aspectj/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/auto/" target="_blank" rel="noopener external nofollow noreferrer">Auto</a>：源代码生成器集合。<a href="https://github.com/google/auto" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/dcevm/" target="_blank" rel="noopener external nofollow noreferrer">DCEVM</a>：通过修改JVM在运行时支持对已加载的类进行无限次重定义。<a href="http://dcevm.github.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>HotswapAgent：支持无限次重定义运行时类与资源。<a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Immutables：类似Scala的条件类。<a href="http://immutables.github.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>JHipster：基于Spring Boot与AngularJS应用程序的Yeoman源代码生成器。<a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jrebel/" target="_blank" rel="noopener external nofollow noreferrer">JRebel</a>：无需重新部署，可以即时重新加载代码与配置的商业软件。<a href="http://zeroturnaround.com/software/jrebel/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Lombok：减少冗余的代码生成器。<a href="https://projectlombok.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Spring Loaded：类重载代理。<a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/vert-x/" target="_blank" rel="noopener external nofollow noreferrer">vert.x</a>：多语言事件驱动应用框架。<a href="http://vertx.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="distributed-applications">分布式应用</h3>

<p><em>用来编写分布式容错应用的开发库和框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/akka/" target="_blank" rel="noopener external nofollow noreferrer">Akka</a>：用来编写分布式容错并发事件驱动应用程序的工具和运行时。<a href="http://akka.io" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/storm/" target="_blank" rel="noopener external nofollow noreferrer">Apache Storm</a>：实时计算系统。<a href="http://storm.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/zookeeper/" target="_blank" rel="noopener external nofollow noreferrer">Apache ZooKeeper</a>：针对大型分布式系统的协调服务，支持分布式配置、同步和名称注册。<a href="http://zookeeper.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/Hazelcast/" target="_blank" rel="noopener external nofollow noreferrer">Hazelcast</a>：高可扩展内存数据网格。<a href="http://hazelcast.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hystrix/" target="_blank" rel="noopener external nofollow noreferrer">Hystrix</a>：提供延迟和容错。<a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jgroups/" target="_blank" rel="noopener external nofollow noreferrer">JGroups</a>：提供可靠的消息传递和集群创建的工具。<a href="http://www.jgroups.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/orbit/" target="_blank" rel="noopener external nofollow noreferrer">Orbit</a>：支持虚拟角色（Actor），在传统角色的基础上增加了另外一层抽象。<a href="http://orbit.bioware.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/quasar/" target="_blank" rel="noopener external nofollow noreferrer">Quasar</a>：为JVM提供轻量级线程和角色。<a href="http://www.paralleluniverse.co/quasar/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="distributed-databases">分布式数据库</h3>

<p><em>对应用程序而言，在分布式系统中的数据库看起来就像是只有一个数据源。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/cassandra/" target="_blank" rel="noopener external nofollow noreferrer">Apache Cassandra</a>：列式数据库，可用性高且没有单点故障。<a href="http://cassandra.apache.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hbase/" target="_blank" rel="noopener external nofollow noreferrer">Apache HBase</a>：针对大数据的Hadoop数据库。<a href="http://hbase.apache.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/druid/" target="_blank" rel="noopener external nofollow noreferrer">Druid</a>：实时和历史OLAP数据存储，在聚集查询和近似查询方面表现不俗。<a href="http://druid.io" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/infinispan/" target="_blank" rel="noopener external nofollow noreferrer">Infinispan</a>：针对缓存的高并发键值对数据存储。<a href="http://infinispan.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="distribution">发布</h3>

<p><em>以本机格式发布应用程序的工具。</em></p>
<ul>
<li>Bintray：发布二进制文件版本控制工具。可以于Maven或Gradle一起配合使用。提供开源免费版本和几种商业收费版本。<a href="https://bintray.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/central-repository/" target="_blank" rel="noopener external nofollow noreferrer">Central Repository</a>：最大的二进制组件仓库，面向开源社区提供免费服务。Apache Maven默认使用Central <a href="http://search.maven.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>Repository，也可以在所有其他构建工具中使用。</li>
<li>IzPack：为跨平台部署建立创作工具（Authoring Tool）。<a href="http://izpack.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>JitPack：打包GitHub仓库的便捷工具。可根据需要构建Maven、Gradle项目，发布可立即使用的组件。<a href="https://jitpack.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Launch4j：将JAR包装为轻量级本机Windows可执行程序。<a href="http://launch4j.sourceforge.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Nexus：支持代理和缓存功能的二进制管理工具。<a href="http://www.sonatype.com/nexus" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>packr：将JAR、资源和JVM打包成Windows、Linux和Mac OS X本地发布文件。<a href="https://github.com/libgdx/packr/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="document-processing">文档处理工具</h3>

<p><em>处理Office文档的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/poi/" target="_blank" rel="noopener external nofollow noreferrer">Apache POI</a>：支持OOXML规范（XLSX、DOCX、PPTX）以及OLE2规范（XLS、DOC、PPT）。<a href="http://poi.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/documents4j/" target="_blank" rel="noopener external nofollow noreferrer">documents4j</a>：使用第三方转换器进行文档格式转换，转成类似MS Word这样的格式。<a href="http://documents4j.com" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jopendocument/" target="_blank" rel="noopener external nofollow noreferrer">jOpenDocument</a>：处理OpenDocument格式（由Sun公司提出基于XML的文档格式）。<a href="http://www.jopendocument.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="functional-programming">函数式编程</h3>

<p><em>函数式编程支持库。</em></p>
<ul>
<li>Cyclops：支持一元（Monad）操作和流操作工具类、comprehension（List语法）、模式匹配、trampoline等特性。<a href="https://github.com/aol/cyclops" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Fugue：Guava的函数式编程扩展。<a href="https://bitbucket.org/atlassian/fugue" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Functional Java：实现了多种基础和高级编程抽象，用来辅助面向组合开发（composition-oriented development）。<a href="http://www.functionaljava.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Javaslang：一个函数式组件库，提供持久化数据类型和函数式控制结构。<a href="http://javaslang.com" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>jOOλ：旨在填补Java 8 lambda差距的扩展，提供了众多缺失的类型和一组丰富的顺序流API。<a href="https://github.com/jOOQ/jOOL" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="game-development">游戏开发</h3>

<p><em>游戏开发框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jmonkeyengine/" target="_blank" rel="noopener external nofollow noreferrer">jMonkeyEngine</a>：现代3D游戏开发引擎。<a href="http://jmonkeyengine.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/libgdx/" target="_blank" rel="noopener external nofollow noreferrer">libGDX</a>：全面的跨平台高级框架。<a href="https://libgdx.badlogicgames.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/lwjgl/" target="_blank" rel="noopener external nofollow noreferrer">LWJGL</a>：对OpenGL/CL/AL等技术进行抽象的健壮框架。<a href="https://www.lwjgl.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="gui">GUI</h3>

<p><em>现代图形化用户界面开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/javafx/" target="_blank" rel="noopener external nofollow noreferrer">JavaFX</a>：Swing的后继者。<a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/scene_builder/" target="_blank" rel="noopener external nofollow noreferrer">Scene Builder</a>：开发JavaFX应用的可视化布局工具。<a href="http://docs.oracle.com/javase/8/scene-builder-2/get-started-tutorial/overview.htm#JSBGS164" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="high-performance">高性能计算</h3>

<p><em>涵盖了从集合到特定开发库的高性能计算相关工具。</em></p>
<ul>
<li>Agrona：高性能应用中常见的数据结构和工具方法。<a href="https://github.com/real-logic/Agrona" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Disruptor：线程间消息传递开发库。<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>fastutil：快速紧凑的特定类型集合（Collection）。<a href="http://fastutil.di.unimi.it/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>GS Collections：受Smalltalk启发的集合框架。<a href="https://github.com/goldmansachs/gs-collections" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hppc/" target="_blank" rel="noopener external nofollow noreferrer">HPPC</a>：基础类型集合。<a href="http://labs.carrotsearch.com/hppc.html" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Javolution：实时和嵌入式系统的开发库。<a href="http://javolution.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jctools/" target="_blank" rel="noopener external nofollow noreferrer">JCTools</a>：JDK中缺失的并发工具。<a href="https://github.com/JCTools/JCTools" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/koloboke/" target="_blank" rel="noopener external nofollow noreferrer">Koloboke</a>：Hash set和hash map。<a href="https://github.com/OpenHFT/Koloboke" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Trove：基础类型集合。<a href="http://trove.starlight-systems.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>High-scale-lib:Cliff Click 个人开发的高性能并发库<a href="https://github.com/stephenc/high-scale-lib" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="ide">IDE</h3>

<p><em>简化开发的集成开发环境。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/eclipse/" target="_blank" rel="noopener external nofollow noreferrer">Eclipse</a>：老牌开源项目，支持多种插件和编程语言。<a href="http://www.eclipse.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/intellij-idea/" target="_blank" rel="noopener external nofollow noreferrer">IntelliJ IDEA</a>：支持众多JVM语言，是安卓开发者好的选择。商业版主要针对企业客户。<a href="http://www.jetbrains.com/idea/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/netbeans/" target="_blank" rel="noopener external nofollow noreferrer">NetBeans</a>：为多种技术提供集成化支持，包括Java SE、Java EE、数据库访问、HTML5等。<a href="https://netbeans.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/scala-ide/" target="_blank" rel="noopener external nofollow noreferrer">Scala IDE</a>：一款基于Eclipse开源平台打造的Scala集成开发环境。<a href="http://scala-ide.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/springsource-tool-suite/" target="_blank" rel="noopener external nofollow noreferrer">SpringSource Tool Suite（STS）</a>:一款基于Eclipse开源平台打造的Spring应用开发环境。<a href="http://spring.io/tools/sts/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="imagery">图像处理</h3>

<p><em>创建、评价和操作图片的支持库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/imgscalr/" target="_blank" rel="noopener external nofollow noreferrer">Imgscalr</a>：纯Java 2D实现，简单、高效、支持硬件加速的图像缩放开发库。<a href="https://github.com/thebuzzmedia/imgscalr" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/picasso/" target="_blank" rel="noopener external nofollow noreferrer">Picasso</a>：安卓图片下载和图片缓存开发库。<a href="http://square.github.io/picasso/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/thumbnailator/" target="_blank" rel="noopener external nofollow noreferrer">Thumbnailator</a>：Thumbnailator是一个高质量Java缩略图开发库。<a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/zxing/" target="_blank" rel="noopener external nofollow noreferrer">ZXing</a>：支持多种格式的一维、二维条形码图片处理开发库。<a href="https://github.com/zxing/zxing" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/im4java/" target="_blank" rel="noopener external nofollow noreferrer">im4java</a>: 基于ImageMagick或GraphicsMagick命令行的图片处理开发库，基本上ImageMagick能够支持的图片格式和处理方式都能够处理。<a href="http://im4java.sourceforge.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Apache Batik：在Java应用中程序以SVG格式显示、生成及处理图像的工具集，包括SVG解析器、SVG生成器、SVG DOM等模块，可以集成使用也可以单独使用，还可以扩展自定义的SVG标签。<a href="http://xmlgraphics.apache.org/batik/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="json">JSON</h3>

<p><em>简化JSON处理的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/genson/" target="_blank" rel="noopener external nofollow noreferrer">Genson</a>：强大且易于使用的Java到JSON转换开发库。<a href="http://owlike.github.io/genson" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/gson/" target="_blank" rel="noopener external nofollow noreferrer">Gson</a>：谷歌官方推出的JSON处理库，支持在对象与JSON之间双向序列化，性能良好且可以实时调用。<a href="https://github.com/google/gson" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jackson/" target="_blank" rel="noopener external nofollow noreferrer">Jackson</a>：与GSON类似，在频繁使用时性能更佳。<a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/logansquare/" target="_blank" rel="noopener external nofollow noreferrer">LoganSquare</a>：基于Jackson流式API，提供对JSON解析和序列化。比GSON与Jackson组合方式效果更好。<a href="https://github.com/bluelinelabs/LoganSquare" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/fastjson/" target="_blank" rel="noopener external nofollow noreferrer">Fastjson</a>：一个Java语言编写的高性能功能完善的JSON库。<a href="https://github.com/Alibaba/fastjson" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Kyro：快速、高效、自动化的Java对象序列化和克隆库。<a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="jvm-and-jdk">JVM与JDK</h3>

<p><em>目前的JVM和JDK实现。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jdk-9/" target="_blank" rel="noopener external nofollow noreferrer">JDK 9</a>：JDK 9的早期访问版本。<a href="https://jdk9.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/openjdk/" target="_blank" rel="noopener external nofollow noreferrer">OpenJDK</a>：JDK开源实现。<a href="http://openjdk.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="languages">基于JVM的语言</h3>

<p><em>除Java外，可以用来编写JVM应用程序的编程语言。</em></p>
<ul>
<li>Scala：融合了面向对象和函数式编程思想的静态类型编程语言。<a href="http://www.scala-lang.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/groovy/" target="_blank" rel="noopener external nofollow noreferrer">Groovy</a>：类型可选（Optionally typed）的动态语言，支持静态类型和静态编译。目前是一个Apache孵化器项目。<a href="http://www.groovy-lang.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Clojure：可看做现代版Lisp的动态类型语言。<a href="http://clojure.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Ceylon：RedHat开发的面向对象静态类型编程语言。<a href="http://ceylon-lang.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Kotlin：JetBrain针对JVM、安卓和浏览器提供的静态类型编程语言。<a href="http://kotlinlang.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/xtend/" target="_blank" rel="noopener external nofollow noreferrer">Xtend</a>：一种静态编程语言，能够将其代码转换为简洁高效的Java代码，并基于JVM运行。<a href="http://www.eclipse.org/xtend/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="logging">日志</h3>

<p><em>记录应用程序行为日志的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/log4j2/" target="_blank" rel="noopener external nofollow noreferrer">Apache Log4j 2</a>：使用强大的插件和配置架构进行完全重写。<a href="http://logging.apache.org/log4j/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/kibana/" target="_blank" rel="noopener external nofollow noreferrer">kibana</a>：分析及可视化日志文件。<a href="https://www.elastic.co/products/kibana" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/logback/" target="_blank" rel="noopener external nofollow noreferrer">Logback</a>：强健的日期开发库，通过Groovy提供很多有趣的选项。<a href="http://logback.qos.ch/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/logstash/" target="_blank" rel="noopener external nofollow noreferrer">logstash</a>：日志文件管理工具。<a href="https://www.elastic.co/products/logstash" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/metrics/" target="_blank" rel="noopener external nofollow noreferrer">Metrics</a>：通过JMX或HTTP发布参数，并且支持存储到数据库。<a href="https://github.com/dropwizard/metrics" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/slf4j/" target="_blank" rel="noopener external nofollow noreferrer">SLF4J</a>：日志抽象层，需要与具体的实现配合使用。<a href="http://www.slf4j.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="machine-learning">机器学习</h3>

<p><em>提供具体统计算法的工具。其算法可从数据中学习。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-flink/" target="_blank" rel="noopener external nofollow noreferrer">Apache Flink</a>：快速、可靠的大规模数据处理引擎。<a href="https://flink.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-hadoop/" target="_blank" rel="noopener external nofollow noreferrer">Apache Hadoop</a>：在商用硬件集群上用来进行大规模数据存储的开源软件框架。<a href="http://hadoop.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-mahout/" target="_blank" rel="noopener external nofollow noreferrer">Apache Mahout</a>：专注协同过滤、聚类和分类的可扩展算法。<a href="https://mahout.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-spark/" target="_blank" rel="noopener external nofollow noreferrer">Apache Spark</a>：开源数据分析集群计算框架。<a href="http://spark.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/deepdive/" target="_blank" rel="noopener external nofollow noreferrer">DeepDive</a>：从非结构化数据建立结构化信息并集成到已有数据库的工具。<a href="http://deepdive.stanford.edu" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/deeplearning4j/" target="_blank" rel="noopener external nofollow noreferrer">Deeplearning4j</a>：分布式多线程深度学习开发库。<a href="http://deeplearning4j.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/h2o/" target="_blank" rel="noopener external nofollow noreferrer">H2O</a>：用作大数据统计的分析引擎。<a href="http://h2o.ai/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/weka/" target="_blank" rel="noopener external nofollow noreferrer">Weka</a>：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。<a href="http://www.cs.waikato.ac.nz/ml/weka/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/quickml/" target="_blank" rel="noopener external nofollow noreferrer">QuickML</a>：高效机器学习库。<a href="http://quickml.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>、<a href="https://github.com/sanity/quickml" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a></li>
</ul>
<h3 id="messaging">消息传递</h3>

<p><em>在客户端之间进行消息传递，确保协议独立性的工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/aeron/" target="_blank" rel="noopener external nofollow noreferrer">Aeron</a>：高效可扩展的单播、多播消息传递工具。<a href="https://github.com/real-logic/Aeron" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/activemq/" target="_blank" rel="noopener external nofollow noreferrer">Apache ActiveMQ</a>：实现JMS的开源消息代理（broker），可将同步通讯转为异步通讯。<a href="http://activemq.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-camel/" target="_blank" rel="noopener external nofollow noreferrer">Apache Camel</a>：通过企业级整合模式（Enterprise Integration Pattern EIP）将不同的消息传输API整合在一起。<a href="http://camel.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/kafka/" target="_blank" rel="noopener external nofollow noreferrer">Apache Kafka</a>：高吞吐量分布式消息系统。<a href="http://kafka.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hermes/" target="_blank" rel="noopener external nofollow noreferrer">Hermes</a>：快速、可靠的消息代理（Broker），基于Kafka构建。<a href="http://hermes.allegro.tech" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>JBoss HornetQ：清晰、准确、模块化，可以方便嵌入的消息工具。<a href="http://hornetq.jboss.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jeromq/" target="_blank" rel="noopener external nofollow noreferrer">JeroMQ</a>：ZeroMQ的纯Java实现。<a href="https://github.com/zeromq/jeromq" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/smack/" target="_blank" rel="noopener external nofollow noreferrer">Smack</a>：跨平台XMPP客户端函数库。<a href="https://github.com/igniterealtime/Smack/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Openfire：是开源的、基于XMPP、采用Java编程语言开发的实时协作服务器。 Openfire安装和使用都非常简单，并可利用Web界面进行管理。 <a href="http://www.igniterealtime.org/projects/openfire/index.jsp" target="_blank" rel="noopener external nofollow noreferrer">官网</a> <a href="https://github.com/igniterealtime/Openfire" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a></li>
<li>Spark：是一个开源，跨平台IM客户端。它的特性支持集组聊天，电话集成和强大安全性能。如果企业内部部署IM使用Openfire+Spark是最佳的组合。 <a href="http://www.igniterealtime.org/projects/spark/index.jsp" target="_blank" rel="noopener external nofollow noreferrer">官网</a> <a href="https://github.com/igniterealtime/Spark" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a></li>
<li>Tigase： 是一个轻量级的可伸缩的 Jabber/XMPP 服务器。无需其他第三方库支持，可以处理非常高的复杂和大量的用户数，可以根据需要进行水平扩展。 <a href="http://www.tigase.net" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="miscellaneous">杂项</h3>

<p><em>未分类其它资源。</em></p>
<ul>
<li>Design Patterns：实现并解释了最常见的设计模式。<a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Jimfs：内存文件系统。<a href="https://github.com/google/jimfs" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Lanterna：类似curses的简单console文本GUI函数库。<a href="https://code.google.com/p/lanterna/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>LightAdmin：可插入式CRUD UI函数库，可用来快速应用开发。<a href="http://lightadmin.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>OpenRefine：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。<a href="http://openrefine.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>RoboVM：Java编写原生iOS应用。<a href="https://robovm.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/quartz/" target="_blank" rel="noopener external nofollow noreferrer">Quartz</a>：强大的任务调度库.<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="monitoring">应用监控工具</h3>

<p><em>监控生产环境中应用程序的工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/appdynamics/" target="_blank" rel="noopener external nofollow noreferrer">AppDynamics</a>：性能监测商业工具。<a href="http://www.appdynamics.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/javamelody/" target="_blank" rel="noopener external nofollow noreferrer">JavaMelody</a>：性能监测和分析工具。<a href="https://github.com/javamelody/javamelody" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/Kamon/" target="_blank" rel="noopener external nofollow noreferrer">Kamon</a>：Kamon用来监测在JVM上运行的应用程序。<a href="http://www.kamon.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/new-relic/" target="_blank" rel="noopener external nofollow noreferrer">New Relic</a>：性能监测商业工具。<a href="http://newrelic.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>SPM：支持对JVM应用程序进行分布式事务追踪的性能监测商业工具。<a href="https://sematext.com/spm/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/overops_takipi/" target="_blank" rel="noopener external nofollow noreferrer">OverOps(Takipi)</a>：产品运行时错误监测及调试商业工具。<a href="https://www.takipi.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="native">原生开发库</h3>

<p><em>用来进行特定平台开发的原生开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jna/" target="_blank" rel="noopener external nofollow noreferrer">JNA</a>：不使用JNI就可以使用原生开发库。此外，还为常见系统函数提供了接口。<a href="https://github.com/java-native-access/jna" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="natural-language-processing">自然语言处理</h3>

<p><em>用来专门处理文本的函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-opennlp/" target="_blank" rel="noopener external nofollow noreferrer">Apache OpenNLP</a>：处理类似分词等常见任务的工具。<a href="https://opennlp.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/stanford_corenlp/" target="_blank" rel="noopener external nofollow noreferrer">CoreNLP</a>：斯坦佛CoreNLP提供了一组基础工具，可以处理类似标签、实体名识别和情感分析这样的任务。<a href="http://nlp.stanford.edu/software/coenlp.shtml" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/lingpipe/" target="_blank" rel="noopener external nofollow noreferrer">LingPipe</a>：一组可以处理各种任务的工具集，支持POS标签、情感分析等。<a href="http://alias-i.com/lingpipe/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/mallet/" target="_blank" rel="noopener external nofollow noreferrer">Mallet</a>：统计学自然语言处理、文档分类、聚类、主题建模等。<a href="http://mallet.cs.umass.edu/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="networking">网络</h3>

<p><em>网络编程函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/async-http-client/" target="_blank" rel="noopener external nofollow noreferrer">Async Http Client</a>：异步HTTP和WebSocket客户端函数库。<a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/grizzly/" target="_blank" rel="noopener external nofollow noreferrer">Grizzly</a>：NIO框架，在Glassfish中作为网络层使用。<a href="https://grizzly.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/netty/" target="_blank" rel="noopener external nofollow noreferrer">Netty</a>：构建高性能网络应用程序开发框架。<a href="http://netty.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/okhttp/" target="_blank" rel="noopener external nofollow noreferrer">OkHttp</a>：一个Android和Java应用的HTTP+SPDY客户端。<a href="http://square.github.io/okhttp/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Undertow：基于NIO实现了阻塞和非阻塞API的Web服务器，在WildFly中作为网络层使用。<a href="http://undertow.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>unirest-java: Unirest 是一个轻量级的 HTTP 请求库，涵盖 Node、Ruby、Java、PHP、Python、Objective-C、.NET 等多种语言。可发起 GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS 请求。<a href="http://unirest.io/java" target="_blank" rel="noopener external nofollow noreferrer">官网</a><h3 id="orm">ORM</h3>

</li>
</ul>
<p><em>处理对象持久化的API。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/ebean/" target="_blank" rel="noopener external nofollow noreferrer">Ebean</a>：支持快速数据访问和编码的ORM框架。<a href="http://ebean-orm.github.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/eclipselink/" target="_blank" rel="noopener external nofollow noreferrer">EclipseLink</a>：支持许多持久化标准，JPA、JAXB、JCA和SDO。<a href="https://www.eclipse.org/eclipselink/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hibernate/" target="_blank" rel="noopener external nofollow noreferrer">Hibernate</a>：广泛使用、强健的持久化框架。Hibernate的技术社区非常活跃。<a href="http://hibernate.org/orm/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/mybatis/" target="_blank" rel="noopener external nofollow noreferrer">MyBatis</a>：带有存储过程或者SQL语句的耦合对象（Couples object）。<a href="http://mybatis.github.io/mybatis-3/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/ormlite/" target="_blank" rel="noopener external nofollow noreferrer">OrmLite</a>：轻量级开发包，免除了其它ORM产品中的复杂性和开销。<a href="http://ormlite.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Nutz：另一个SSH。<a href="http://nutzam.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>，<a href="https://github.com/nutzam/nutz" target="_blank" rel="noopener external nofollow noreferrer">Github</a>，<a href="https://nutz.cn/" target="_blank" rel="noopener external nofollow noreferrer">论坛</a></li>
<li>JFinal：JAVA WEB + ORM框架。<a href="http://www.jfinal.com" target="_blank" rel="noopener external nofollow noreferrer">官网</a>，<a href="https://github.com/jfinal/jfinal" target="_blank" rel="noopener external nofollow noreferrer">Github</a></li>
<li><a href="http://openjpa.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">Apache OpenJPA</a>: 实现了 EJB 3.0 中的 JPA 标准,为开发者提供功能强大、使用简单的持久化数据管理框架。 <a href="http://openjpa.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="pdf">PDF</h3>

<p><em>用来帮助创建PDF文件的资源。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache_fop/" target="_blank" rel="noopener external nofollow noreferrer">Apache FOP</a>：从XSL-FO创建PDF。<a href="http://xmlgraphics.apache.org/fop/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-pdfbox/" target="_blank" rel="noopener external nofollow noreferrer">Apache PDFBox</a>：用来创建和操作PDF的工具集。<a href="http://pdfbox.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/dynamicreports/" target="_blank" rel="noopener external nofollow noreferrer">DynamicReports</a>：JasperReports的精简版。<a href="http://dynamicreports.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/flyingsaucer/" target="_blank" rel="noopener external nofollow noreferrer">flyingsaucer</a>：XML/XHTML和CSS 2.1渲染器。<a href="https://github.com/flyingsaucerproject/flyingsaucer" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/itext/" target="_blank" rel="noopener external nofollow noreferrer">iText</a>：一个易于使用的PDF函数库，用来编程创建PDF文件。注意，用于商业用途时需要许可证。<a href="http://itextpdf.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jasperreports/" target="_blank" rel="noopener external nofollow noreferrer">JasperReports</a>：一个复杂的报表引擎。<a href="http://community.jaspersoft.com/project/jasperreports-library" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="performance-analysis">性能分析</h3>

<p><em>性能分析、性能剖析及基准测试工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jhiccup/" target="_blank" rel="noopener external nofollow noreferrer">jHiccup</a>：提供平台中JVM暂停的日志和记录。<a href="https://github.com/giltene/jHiccup" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jmh/" target="_blank" rel="noopener external nofollow noreferrer">JMH</a>：JVM基准测试工具。<a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jprofiler/" target="_blank" rel="noopener external nofollow noreferrer">JProfiler</a>：商业分析器。<a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/latencyutils/" target="_blank" rel="noopener external nofollow noreferrer">LatencyUtils</a>：测量和报告延迟的工具。<a href="https://github.com/LatencyUtils/LatencyUtils" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/visualvm/" target="_blank" rel="noopener external nofollow noreferrer">VisualVM</a>：对运行中的应用程序信息提供了可视化界面。<a href="http://visualvm.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/yourkit-java-profiler/" target="_blank" rel="noopener external nofollow noreferrer">YourKit Java Profiler</a>：商业分析器。<a href="https://www.yourkit.com/features/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="reactive-libraries">响应式开发库</h3>

<p><em>用来开发响应式应用程序的开发库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/reactive-streams/" target="_blank" rel="noopener external nofollow noreferrer">Reactive Streams</a>：异步流处理标准，支持非阻塞式反向压力（backpressure）。<a href="https://github.com/reactive-streams/reactive-streams-jv/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/reactor/" target="_blank" rel="noopener external nofollow noreferrer">Reactor</a>：构建响应式快速数据（fast-data）应用程序的开发库。<a href="http://projectreactor.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/rxjava/" target="_blank" rel="noopener external nofollow noreferrer">RxJava</a>：通过JVM可观察序列（observable sequence）构建异步和基于事件的程序。<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="rest-frameworks">REST框架</h3>

<p><em>用来创建RESTful 服务的框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/dropwizard/" target="_blank" rel="noopener external nofollow noreferrer">Dropwizard</a>：偏向于自己使用的Web框架。用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。<a href="https://dropwizard.github.io/drpwizard/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/feign/" target="_blank" rel="noopener external nofollow noreferrer">Feign</a>：受Retrofit、JAXRS-2.0和WebSocket启发的HTTP客户端连接器（binder）。<a href="https://github.com/Netflix/feign" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Jersey：JAX-RS参考实现。<a href="https://jersey.java.net/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/resteasy/" target="_blank" rel="noopener external nofollow noreferrer">RESTEasy</a>：经过JAX-RS规范完全认证的可移植实现。<a href="http://resteasy.jboss.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/restexpress/" target="_blank" rel="noopener external nofollow noreferrer">RestExpress</a>：一个Java类型安全的REST客户端。<a href="https://github.com/RestExpress/RestExpress" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/restx/" target="_blank" rel="noopener external nofollow noreferrer">RestX</a>：基于注解处理和编译时源码生成的框架。<a href="http://restx.io" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/retrofit/" target="_blank" rel="noopener external nofollow noreferrer">Retrofit</a>：类型安全的REST客户端。<a href="http://square.github.io/retrofit/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/sparkjava/" target="_blank" rel="noopener external nofollow noreferrer">Spark</a>：受到Sinatra启发的Java REST框架。<a href="http://sparkjava.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/swagger/" target="_blank" rel="noopener external nofollow noreferrer">Swagger</a>：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。<a href="http://swagger.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/bladejava/" target="_blank" rel="noopener external nofollow noreferrer">Blade</a>：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://github.com/biezhi/blade" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="science">科学计算与分析</h3>

<p><em>用于科学计算和分析的函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/datamelt/" target="_blank" rel="noopener external nofollow noreferrer">DataMelt</a>：用于科学计算、数据分析及数据可视化的开发环境。<a href="http://jwork.org/dmelt/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jgrapht/" target="_blank" rel="noopener external nofollow noreferrer">JGraphT</a>：支持数学图论对象和算法的图形库。<a href="https://github.com/jgrapht/jgrapht" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jscience/" target="_blank" rel="noopener external nofollow noreferrer">JScience</a>：用来进行科学测量和单位的一组类。<a href="http://jscience.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="search">搜索引擎</h3>

<p><em>文档索引引擎，用于搜索和分析。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/solr/" target="_blank" rel="noopener external nofollow noreferrer">Apache Solr</a>：一个完全的企业搜索引擎。为高吞吐量通信进行了优化。<a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Elasticsearch：一个分布式、支持多租户（multitenant）全文本搜索引擎。提供了RESTful Web接口和无schema的JSON文档。<a href="http://www.elsticsearch.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Apache Lucene：是一个开放源代码的全文检索引擎工具包，是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。<a href="http://lucene.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="security">安全</h3>

<p><em>用于处理安全、认证、授权或会话管理的函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/shiro/" target="_blank" rel="noopener external nofollow noreferrer">Apache Shiro</a>：执行认证、授权、加密和会话管理。<a href="http://shiro.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/bouncy-castle/" target="_blank" rel="noopener external nofollow noreferrer">Bouncy Castle</a>，涵盖了从基础的帮助函数到PGP/SMIME操作。<a href="https://www.bouncycastle.org/java.html" target="_blank" rel="noopener external nofollow noreferrer">官网</a>：多途加密开发库。支持JCA提供者（JCA provider)</li>
<li><a href="http://hao.jobbole.com/cryptomator/" target="_blank" rel="noopener external nofollow noreferrer">Cryptomator</a>：在云上进行客户端跨平台透明加密。<a href="https://cryptomator.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/keycloak/" target="_blank" rel="noopener external nofollow noreferrer">Keycloak</a>：为浏览器应用和RESTful Web Service集成SSO和IDM。目前还处于beta版本，但是看起来非常有前途。<a href="http://keycloak.jboss.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/picketlink/" target="_blank" rel="noopener external nofollow noreferrer">PicketLink</a>：PicketLink是一个针对Java应用进行安全和身份认证管理的大型项目（Umbrella Project）。<a href="http://picketlink.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="serialization">序列化</h3>

<p><em>用来高效处理序列化的函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/flatbuffers/" target="_blank" rel="noopener external nofollow noreferrer">FlatBuffers</a>：高效利用内存的序列化函数库，无需解包和解析即可高效访问序列化数据。<a href="https://github.com/google/flatbuffers" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/kryo/" target="_blank" rel="noopener external nofollow noreferrer">Kryo</a>：快速、高效的对象图形序列化框架。<a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/fst/" target="_blank" rel="noopener external nofollow noreferrer">FST</a>：提供兼容JDK的高性能对象图形序列化。<a href="https://github.com/RuedigerMoeller/fast-serialization" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/messagepack/" target="_blank" rel="noopener external nofollow noreferrer">MessagePack</a>：一种高效的二进制序列化格式。<a href="https://github.com/msgpack/msgpack-java" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="server">应用服务器</h3>

<p><em>用来部署应用程序的服务器。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-tomcat/" target="_blank" rel="noopener external nofollow noreferrer">Apache Tomcat</a>：针对Servlet和JSP的应用服务器，健壮性好且适用性强。<a href="http://tomcat.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/tomee/" target="_blank" rel="noopener external nofollow noreferrer">Apache TomEE</a>：Tomcat加Java EE。<a href="http://tomee.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jetty/" target="_blank" rel="noopener external nofollow noreferrer">Jetty</a>：轻量级、小巧的应用服务器，通常会嵌入到项目中。<a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/websphere-liberty/" target="_blank" rel="noopener external nofollow noreferrer">WebSphere Liberty</a>：轻量级、模块化应用服务器，由IBM开发。<a href="https://developer.ibm.com/wasdev/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/wildfly/" target="_blank" rel="noopener external nofollow noreferrer">WildFly</a>：之前被称作JBoss，由Red Hat开发。支持很多Java EE功能。<a href="http://www.wildfly.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="template-engine">模板引擎</h3>

<p><em>在模板中替换表达式的工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/velocity/" target="_blank" rel="noopener external nofollow noreferrer">Apache Velocity</a>：提供HTML页面模板、email模板和通用开源代码生成器模板。<a href="http://velocity.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/freemarker/" target="_blank" rel="noopener external nofollow noreferrer">FreeMarker</a>：通用模板引擎，不需要任何重量级或自己使用的依赖关系。<a href="http://freemarker.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/handlebars-java/" target="_blank" rel="noopener external nofollow noreferrer">Handlebars.java</a>：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。<a href="http://jknack.github.io/handlebars.java/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/thymeleaf/" target="_blank" rel="noopener external nofollow noreferrer">Thymeleaf</a>：旨在替换JSP，支持XML文件的工具。<a href="http://www.thymeleaf.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://ibeetl.com/" target="_blank" rel="noopener external nofollow noreferrer">Beetl</a>：新一代的模板引擎，功能强大，性能良好，超过当前流行的模板引擎。而且还易学易用。<a href="http://ibeetl.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="testing">测试</h3>

<p><em>测试内容从对象到接口，涵盖性能测试和基准测试工具。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jmeter/" target="_blank" rel="noopener external nofollow noreferrer">Apache JMeter</a>：功能性测试和性能评测。<a href="http://jmeter.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/arquillian/" target="_blank" rel="noopener external nofollow noreferrer">Arquillian</a>：集成测试和功能行测试平台，集成Java EE容器。<a href="http://arquillian.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/assertj/" target="_blank" rel="noopener external nofollow noreferrer">AssertJ</a>：支持流式断言提高测试的可读性。<a href="http://joel-costigliola.github.io/assertj/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/awaitility/" target="_blank" rel="noopener external nofollow noreferrer">Awaitility</a>：用来同步异步操作的DSL。<a href="https://github.com/jayway/awaitility" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/cucumber-jvm/" target="_blank" rel="noopener external nofollow noreferrer">Cucumber</a>：BDD测试框架。<a href="https://github.com/cucumber/cucumber-jvm" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Gatling：设计为易于使用、可维护的和高性能负载测试工具。<a href="http://gatling.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/hamcrest/" target="_blank" rel="noopener external nofollow noreferrer">Hamcrest</a>：可用来灵活创建意图（intent）表达式的匹配器。<a href="http://hamcrest.org/JavaHamcrest/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>JMockit：用来模拟静态、final方法等。<a href="http://jmockit.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/junit/" target="_blank" rel="noopener external nofollow noreferrer">JUnit</a>：通用测试框架。<a href="http://junit.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/mockito/" target="_blank" rel="noopener external nofollow noreferrer">Mockito</a>：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。<a href="https://github.com/mockito/mockito" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/powermock/" target="_blank" rel="noopener external nofollow noreferrer">PowerMock</a>： 支持模拟静态方法、构造函数、final类和方法、私有方法以及移除静态初始化器的模拟工具。<a href="https://github.com/jayway/powermock" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/rest-assured/" target="_blank" rel="noopener external nofollow noreferrer">REST Assured</a>：为REST/HTTP服务提供方便测试的Java DSL。<a href="https://github.com/jayway/rest-assured" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/selenide/" target="_blank" rel="noopener external nofollow noreferrer">Selenide</a>：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。<a href="http://selenide.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/selenium/" target="_blank" rel="noopener external nofollow noreferrer">Selenium</a>：为Web应用程序提供可移植软件测试框架。<a href="http://docs.seleniumhq.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/spock/" target="_blank" rel="noopener external nofollow noreferrer">Spock</a>：JUnit-compatible framework featuring an expressive Groovy-derived specification language.<a href="http://docs.spockframework.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>兼容JUnit框架，支持衍生的Groovy范的语言。</li>
<li><a href="http://hao.jobbole.com/testng/" target="_blank" rel="noopener external nofollow noreferrer">TestNG</a>：测试框架。<a href="http://testng.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/truth/" target="_blank" rel="noopener external nofollow noreferrer">Truth</a>：Google的断言和命题（proposition）框架。<a href="https://github.com/google/truth" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/unitils/" target="_blank" rel="noopener external nofollow noreferrer">Unitils</a>：模块化测试函数库，支持单元测试和集成测试。<a href="http://www.unitils.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/wiremock/" target="_blank" rel="noopener external nofollow noreferrer">WireMock</a>：Web Service测试桩（Stub）和模拟函数。<a href="http://wiremock.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="utility">通用工具库</h3>

<p><em>通用工具类函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-commons/" target="_blank" rel="noopener external nofollow noreferrer">Apache Commons</a>：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。<a href="http://commons.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/args4j/" target="_blank" rel="noopener external nofollow noreferrer">args4j</a>：命令行参数解析器。<a href="http://args4j.kohsuke.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/crash/" target="_blank" rel="noopener external nofollow noreferrer">CRaSH</a>：为运行进行提供CLI。<a href="http://www.crashub.org" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/gephi/" target="_blank" rel="noopener external nofollow noreferrer">Gephi</a>：可视化跨平台网络图形化操作程序。<a href="https://github.com/gephi/gephi/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/guava/" target="_blank" rel="noopener external nofollow noreferrer">Guava</a>：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。<a href="https://github.com/google/guava" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jade/" target="_blank" rel="noopener external nofollow noreferrer">JADE</a>：构建、调试多租户系统的框架和环境。<a href="http://jade.tilab.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/javatuples/" target="_blank" rel="noopener external nofollow noreferrer">javatuples</a>：正如名字表示的那样，提供tuple支持。尽管目前tuple的概念还有留有争议。<a href="http://www.javatuples.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jcommander/" target="_blank" rel="noopener external nofollow noreferrer">JCommander</a>：命令行参数解析器。<a href="http://jcommander.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/protege/" target="_blank" rel="noopener external nofollow noreferrer">Protégé</a>：提供存在论（ontology）编辑器以及构建知识系统的框架。<a href="http://protege.stanford.edu/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="web-crawling">网络爬虫</h3>

<p><em>用于分析网站内容的函数库。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/nutch/" target="_blank" rel="noopener external nofollow noreferrer">Apache Nutch</a>：可用于生产环境的高度可扩展、可伸缩的网络爬虫。<a href="http://nutch.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/crawler4j/" target="_blank" rel="noopener external nofollow noreferrer">Crawler4j</a>：简单的轻量级网络爬虫。<a href="https://github.com/yasserg/crawler4j" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jsoup/" target="_blank" rel="noopener external nofollow noreferrer">JSoup</a>：刮取、解析、操作和清理HTML。<a href="http://jsoup.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="https://github.com/code4craft/webmagic/" target="_blank" rel="noopener external nofollow noreferrer">webmagic</a>：一个可扩展的Java爬虫框架，架构类似Python的Scrapy。</li>
</ul>
<h3 id="web-frameworks">Web框架</h3>

<p><em>用于处理Web应用程序不同层次间通讯的框架。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/apache-tapestry/" target="_blank" rel="noopener external nofollow noreferrer">Apache Tapestry</a>：基于组件的框架，使用Java创建动态、强健的、高度可扩展的Web应用程序。<a href="http://tapestry.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/apache-wicket/" target="_blank" rel="noopener external nofollow noreferrer">Apache Wicket</a>：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。<a href="http://wicket.apache.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/gwt/" target="_blank" rel="noopener external nofollow noreferrer">Google Web Toolkit</a>：一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP <a href="http://www.gwtproject.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a>API、JUnit集成、国际化支持和GUI控件。</li>
<li><a href="http://hao.jobbole.com/grails/" target="_blank" rel="noopener external nofollow noreferrer">Grails</a>：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置、没有XML并支持混入（mixin）。<a href="https://grails.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/ninja/" target="_blank" rel="noopener external nofollow noreferrer">Ninja</a>：Java全栈Web开发框架。非常稳固、快速和高效。<a href="http://www.ninjaframework.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/pippo/" target="_blank" rel="noopener external nofollow noreferrer">Pippo</a>：小型、高度模块化的类Sinatra框架。<a href="http://www.pippo.ro/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/play-framework/" target="_blank" rel="noopener external nofollow noreferrer">Play</a>：使用约定而非配置，支持代码热加载并在浏览器中显示错误。<a href="https://www.playframework.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/primefaces/" target="_blank" rel="noopener external nofollow noreferrer">PrimeFaces</a>：JSF框架，提供免费和带支持的商业版本。包括若干前端组件。<a href="http://primefaces.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/ratpack/" target="_blank" rel="noopener external nofollow noreferrer">Ratpack</a>：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。<a href="https://ratpack.io/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/spring-boot/" target="_blank" rel="noopener external nofollow noreferrer">Spring Boot</a>：微框架，简化了Spring新程序的开发过程。<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/spring-framework/" target="_blank" rel="noopener external nofollow noreferrer">Spring</a>：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。<a href="http://projects.spring.io/spring-framework/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/vaadin/" target="_blank" rel="noopener external nofollow noreferrer">Vaadin</a>：基于GWT构建的事件驱动框架。使用服务端架构，客户端使用Ajax。<a href="https://vaadin.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Blade：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://github.com/biezhi/blade" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="Business-Process-Management">业务流程管理套件</h3>

<p><em>流程驱动的软件系统构建。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/jbpm/" target="_blank" rel="noopener external nofollow noreferrer">jBPM</a>：非常灵活的业务流程管理框架，致力于构建开发与业务分析人员之间的桥梁。<a href="http://www.jbpm.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Activity：轻量级工作流和业务流程管理框架。<a href="http://www.activiti.org/" target="_blank" rel="noopener external nofollow noreferrer">官网</a> <a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener external nofollow noreferrer">github</a></li>
</ul>
<h2 id="resources">资源</h2>
<h3 id="communities">社区</h3>

<ul>
<li>r/java：Reddit的Java子社区。<a href="https://www.reddit.com/r/java" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>stackoverflow：问答平台。<a href="http://stackoverflow.com/questions/tagged/java" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>vJUG：虚拟Java用户组。<a href="http://virtualjug.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>java8 新特性教程例子。<a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener external nofollow noreferrer">github</a></li>
</ul>
<h3 id="influential-books">有影响力的书</h3>

<p><em>具有广泛影响且值得阅读的Java经典书籍。</em></p>
<ul>
<li><a href="http://hao.jobbole.com/effective-java/" target="_blank" rel="noopener external nofollow noreferrer">Effective Java (2nd Edition)</a></li>
<li><a href="http://hao.jobbole.com/java-8-in-action/" target="_blank" rel="noopener external nofollow noreferrer">Java 8 in Action</a></li>
<li><a href="http://hao.jobbole.com/java-concurrency-in-practice/" target="_blank" rel="noopener external nofollow noreferrer">Java Concurrency in Practice | Java并发编程实战</a></li>
<li><a href="http://hao.jobbole.com/thinking-in-java/" target="_blank" rel="noopener external nofollow noreferrer">Thinking in Java | Java编程思想</a></li>
<li><a href="http://hao.jobbole.com/java-puzzlers/" target="_blank" rel="noopener external nofollow noreferrer">Java Puzzlers | Java解惑</a></li>
</ul>
<h3 id="podcasts">播客</h3>

<p><em>可以一边编程一边听的东西。</em></p>
<ul>
<li>Java Council：<a href="http://virtualjug.com/podcast/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li>Java Posse：Discontinued as of 02/2015.<a href="http://www.javaposse.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
<h3 id="weibo-weixin">微博、微信公众号</h3>

<ul>
<li>ImportNew：是最受欢迎的、专注Java技术分享的微信公众号。专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。<br><br><img src= "/img/loading.gif" data-src="http://ww2.sinaimg.cn/small/63918611gw1epb2c7rv2uj20460463ym.jpg" alt=""></li>
<li>ImportNew 微博：<a href="http://weibo.com/importnew" target="_blank" rel="noopener external nofollow noreferrer">@ImportNew</a></li>
</ul>
<h3 id="twitter">Twitter</h3>

<ul>
<li><a href="https://twitter.com/AdamBien/" target="_blank" rel="noopener external nofollow noreferrer">Adam Bien</a>：自由职业者、作家、JavaONE明星演讲者、顾问、Java Champion。</li>
<li><a href="https://twitter.com/agoncal/" target="_blank" rel="noopener external nofollow noreferrer">Antonio Goncalves</a>：Java Champion、JUG Leader、Devoxx France、Java EE 6/7、JCP、作家。</li>
<li><a href="https://twitter.com/arungupta/" target="_blank" rel="noopener external nofollow noreferrer">Arun Gupta</a>：Java Champion、JavaONE明星演讲者、JUG Leader、Devoxx4Kids成员、Red Hatter。</li>
<li><a href="https://twitter.com/brunoborges" target="_blank" rel="noopener external nofollow noreferrer">Bruno Borges</a>：Oracle产品经理、Java Jock。</li>
<li><a href="https://twitter.com/edburns" target="_blank" rel="noopener external nofollow noreferrer">Ed Burns</a>：Oracle技术团队顾问。</li>
<li><a href="https://twitter.com/baeldung" target="_blank" rel="noopener external nofollow noreferrer">Eugen Paraschiv</a>：Spring安全课程作者。</li>
<li><a href="https://twitter.com/JavaFXpert" target="_blank" rel="noopener external nofollow noreferrer">James Weaver</a>：Java、JavaFX、IoT开发者、作者和演讲者。</li>
<li><a href="https://twitter.com/Java_EE/" target="_blank" rel="noopener external nofollow noreferrer">Java EE</a>：Java EE Twitter官方账号。</li>
<li><a href="https://twitter.com/Oraclejavamag" target="_blank" rel="noopener external nofollow noreferrer">Java Magazine</a>：Java杂志官方账号。</li>
<li><a href="https://twitter.com/javanetbuzz/" target="_blank" rel="noopener external nofollow noreferrer">Java.net</a>：Java.net官方账号。</li>
<li><a href="https://twitter.com/java/" target="_blank" rel="noopener external nofollow noreferrer">Java</a>：Java Twitter官方账号。</li>
<li><a href="https://twitter.com/javinpaul" target="_blank" rel="noopener external nofollow noreferrer">Javin Paul</a>：知名Java博客作者。</li>
<li><a href="https://twitter.com/lukaseder" target="_blank" rel="noopener external nofollow noreferrer">Lukas Eder</a>：Data Geekery（jOOQ）创始人兼CEO。</li>
<li><a href="https://twitter.com/mariofusco" target="_blank" rel="noopener external nofollow noreferrer">Mario Fusco</a>：RedHatter、JUG协调、活跃讲师和作者。</li>
<li><a href="https://twitter.com/mreinhold" target="_blank" rel="noopener external nofollow noreferrer">Mark Reinhold</a>：Oracle首席架构师、Java平台开发组。</li>
<li><a href="https://twitter.com/karianna" target="_blank" rel="noopener external nofollow noreferrer">Martijn Verburg</a>：London JUG co-leader、演讲者、作家、Java Champion等。</li>
<li><a href="https://twitter.com/OpenJDK" target="_blank" rel="noopener external nofollow noreferrer">OpenJDK</a>：OpenJDK官方账号。</li>
<li><a href="https://twitter.com/reza_rahman" target="_blank" rel="noopener external nofollow noreferrer">Reza Rahman</a>：Java EE、GlassFish、WebLogic传道者、作家、演讲者、开源黑客。</li>
<li><a href="https://twitter.com/sjmaple" target="_blank" rel="noopener external nofollow noreferrer">Simon Maple</a>：Java Champion、virtualJUG创始人、LJC leader、RebelLabs作者。</li>
<li><a href="https://twitter.com/jodastephen" target="_blank" rel="noopener external nofollow noreferrer">Stephen Colebourne</a>： Java Champion、演讲者。</li>
<li><a href="https://twitter.com/kablosna" target="_blank" rel="noopener external nofollow noreferrer">Tim Boudreau</a>：作家、NetBeans大牛。</li>
<li><a href="https://twitter.com/trisha_gee" target="_blank" rel="noopener external nofollow noreferrer">Trisha Gee</a>：Java Champion、演讲者。</li>
</ul>
<h3 id="weibo-weixin">微博、微信公众号</h3>

<ul>
<li>ImportNew 微博：<a href="http://weibo.com/importnew" target="_blank" rel="noopener external nofollow noreferrer">@ImportNew</a></li>
<li>ImportNew：最受欢迎的、专注Java技术分享的微信公众号。专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。<br><br><img src= "/img/loading.gif" data-src="http://ww2.sinaimg.cn/small/63918611gw1epb2c7rv2uj20460463ym.jpg" width=150 height=150></li>
</ul>
<h3 id="websites">知名网站</h3>

<p><em>值得关注的Java技术站点。</em></p>
<h4>中文站点</h4>

<ul>
<li><a href="http://www.importnew.com/" target="_blank" rel="noopener external nofollow noreferrer">ImportNew</a>（ImportNew 专注 Java 技术）</li>
</ul>
<h4>英文站点</h4>

<ul>
<li><a href="https://android-arsenal.com" target="_blank" rel="noopener external nofollow noreferrer">Android Arsenal</a></li>
<li><a href="http://hao.jobbole.com/google-java-style/" target="_blank" rel="noopener external nofollow noreferrer">Google Java Style</a>：<a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/infoq/" target="_blank" rel="noopener external nofollow noreferrer">InfoQ</a>：<a href="http://www.infoq.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://www.javacodegeeks.com/" target="_blank" rel="noopener external nofollow noreferrer">Java Code Geeks</a></li>
<li><a href="http://blog.jooq.org/" target="_blank" rel="noopener external nofollow noreferrer">Java, SQL, and jOOQ</a></li>
<li><a href="http://java.net/" target="_blank" rel="noopener external nofollow noreferrer">Java.net</a></li>
<li><a href="http://java.dzone.com/" target="_blank" rel="noopener external nofollow noreferrer">Javalobby</a></li>
<li><a href="http://hao.jobbole.com/javaworld/" target="_blank" rel="noopener external nofollow noreferrer">JavaWorld</a>：<a href="http://www.javaworld.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://hao.jobbole.com/jaxenter/" target="_blank" rel="noopener external nofollow noreferrer">JAXenter</a>：<a href="https://jaxenter.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/" target="_blank" rel="noopener external nofollow noreferrer">RebelLabs</a></li>
<li><a href="http://hao.jobbole.com/javaspecialists/" target="_blank" rel="noopener external nofollow noreferrer">The Java Specialist’ Newsletter</a>：<a href="http://www.javaspecialists.eu/archive/archive.jsp" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://blog.takipi.com/" target="_blank" rel="noopener external nofollow noreferrer">The Takipi Blog</a></li>
<li><a href="http://hao.jobbole.com/theserverside/" target="_blank" rel="noopener external nofollow noreferrer">TheServerSide.com</a>：服务器编程交流平台是一个老牌的IT信息网站，关注服务器端编程的，以Java和.Net周边信息为主。<a href="http://www.theserverside.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
<li><a href="http://www.thoughts-on-java.org/" target="_blank" rel="noopener external nofollow noreferrer">Thoughts On Java</a></li>
<li><a href="http://vanillajava.blogspot.ch/" target="_blank" rel="noopener external nofollow noreferrer">Vanilla Java</a></li>
<li><a href="http://vladmihalcea.com/" target="_blank" rel="noopener external nofollow noreferrer">Vlad Mihalcea on Hibernate</a></li>
<li><a href="https://www.voxxed.com/" target="_blank" rel="noopener external nofollow noreferrer">Voxxed</a></li>
<li><a href="http://hao.jobbole.com/onjava/" target="_blank" rel="noopener external nofollow noreferrer">OnJava</a>：O’Reilly Java包含最新的Java技术资讯，优质代码，完全的实例和详解。<a href="http://www.onjava.com/" target="_blank" rel="noopener external nofollow noreferrer">官网</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统</title>
    <url>/posts/19479.html</url>
    <content><![CDATA[<pre><code>Linux相关内容、常用操作、磁盘、分区、文件系统压缩、正则匹配、进程管理等</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一常用操作以及概念">一、常用操作以及概念</a><ul>
<li><a href="#快捷键">快捷键</a></li>
<li><a href="#求助">求助</a></li>
<li><a href="#关机">关机</a></li>
<li><a href="#path">PATH</a></li>
<li><a href="#sudo">sudo</a></li>
<li><a href="#包管理工具">包管理工具</a></li>
<li><a href="#发行版">发行版</a></li>
<li><a href="#vim-三个模式">VIM 三个模式</a></li>
<li><a href="#gnu">GNU</a></li>
<li><a href="#开源协议">开源协议</a></li>
</ul>
</li>
<li><a href="#二磁盘">二、磁盘</a><ul>
<li><a href="#磁盘接口">磁盘接口</a></li>
<li><a href="#磁盘的文件名">磁盘的文件名</a></li>
</ul>
</li>
<li><a href="#三分区">三、分区</a><ul>
<li><a href="#分区表">分区表</a></li>
<li><a href="#开机检测程序">开机检测程序</a></li>
</ul>
</li>
<li><a href="#四文件系统">四、文件系统</a><ul>
<li><a href="#分区与文件系统">分区与文件系统</a></li>
<li><a href="#组成">组成</a></li>
<li><a href="#文件读取">文件读取</a></li>
<li><a href="#磁盘碎片">磁盘碎片</a></li>
<li><a href="#block">block</a></li>
<li><a href="#inode">inode</a></li>
<li><a href="#目录">目录</a></li>
<li><a href="#日志">日志</a></li>
<li><a href="#挂载">挂载</a></li>
<li><a href="#目录配置">目录配置</a></li>
</ul>
</li>
<li><a href="#五文件">五、文件</a><ul>
<li><a href="#文件属性">文件属性</a></li>
<li><a href="#文件与目录的基本操作">文件与目录的基本操作</a></li>
<li><a href="#修改权限">修改权限</a></li>
<li><a href="#文件默认权限">文件默认权限</a></li>
<li><a href="#目录的权限">目录的权限</a></li>
<li><a href="#链接">链接</a></li>
<li><a href="#获取文件内容">获取文件内容</a></li>
<li><a href="#指令与文件搜索">指令与文件搜索</a></li>
</ul>
</li>
<li><a href="#六压缩与打包">六、压缩与打包</a><ul>
<li><a href="#压缩文件名">压缩文件名</a></li>
<li><a href="#压缩指令">压缩指令</a></li>
<li><a href="#打包">打包</a></li>
</ul>
</li>
<li><a href="#七bash">七、Bash</a><ul>
<li><a href="#特性">特性</a></li>
<li><a href="#变量操作">变量操作</a></li>
<li><a href="#指令搜索顺序">指令搜索顺序</a></li>
<li><a href="#数据流重定向">数据流重定向</a></li>
</ul>
</li>
<li><a href="#八管线指令">八、管线指令</a><ul>
<li><a href="#提取指令">提取指令</a></li>
<li><a href="#排序指令">排序指令</a></li>
<li><a href="#双向输出重定向">双向输出重定向</a></li>
<li><a href="#字符转换指令">字符转换指令</a></li>
<li><a href="#分区指令">分区指令</a></li>
</ul>
</li>
<li><a href="#九正则表达式">九、正则表达式</a><ul>
<li><a href="#grep">grep</a></li>
<li><a href="#printf">printf</a></li>
<li><a href="#awk">awk</a></li>
</ul>
</li>
<li><a href="#十进程管理">十、进程管理</a><ul>
<li><a href="#查看进程">查看进程</a></li>
<li><a href="#进程状态">进程状态</a></li>
<li><a href="#sigchld">SIGCHLD</a></li>
<li><a href="#wait">wait()</a></li>
<li><a href="#waitpid">waitpid()</a></li>
<li><a href="#孤儿进程">孤儿进程</a></li>
<li><a href="#僵尸进程">僵尸进程</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、常用操作以及概念"><a href="#一、常用操作以及概念" class="headerlink" title="一、常用操作以及概念"></a>一、常用操作以及概念</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>Tab：命令和文件名补全；</li>
<li>Ctrl+C：中断正在运行的程序；</li>
<li>Ctrl+D：结束键盘输入（End Of File，EOF）</li>
</ul>
<h2 id="求助"><a href="#求助" class="headerlink" title="求助"></a>求助</h2><h3 id="1-–help"><a href="#1-–help" class="headerlink" title="1. –help"></a>1. –help</h3><p>指令的基本用法与选项介绍。</p>
<h3 id="2-man"><a href="#2-man" class="headerlink" title="2. man"></a>2. man</h3><p>man 是 manual 的缩写，将指令的具体信息显示出来。</p>
<p>当执行<code>man date</code>时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：</p>
<table>
<thead>
<tr>
<th align="center">代号</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td>用户在 shell 环境中可以操作的指令或者可执行文件</td>
</tr>
<tr>
<td align="center">5</td>
<td>配置文件</td>
</tr>
<tr>
<td align="center">8</td>
<td>系统管理员可以使用的管理指令</td>
</tr>
</tbody></table>
<h3 id="3-info"><a href="#3-info" class="headerlink" title="3. info"></a>3. info</h3><p>info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以进行跳转。</p>
<h3 id="4-doc"><a href="#4-doc" class="headerlink" title="4. doc"></a>4. doc</h3><p>/usr/share/doc 存放着软件的一整套说明文件。</p>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><h3 id="1-who"><a href="#1-who" class="headerlink" title="1. who"></a>1. who</h3><p>在关机前需要先使用 who 命令查看有没有其它用户在线。</p>
<h3 id="2-sync"><a href="#2-sync" class="headerlink" title="2. sync"></a>2. sync</h3><p>为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，因此关机之前需要先进行 sync 同步操作。</p>
<h3 id="3-shutdown"><a href="#3-shutdown" class="headerlink" title="3. shutdown"></a>3. shutdown</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># shutdown [-krhc] 时间 [信息]</span><br><span class="line">-k ： 不会关机，只是发送警告信息，通知所有在线的用户</span><br><span class="line">-r ： 将系统的服务停掉后就重新启动</span><br><span class="line">-h ： 将系统的服务停掉后就立即关机</span><br><span class="line">-c ： 取消已经在进行的 shutdown 指令内容</span><br></pre></td></tr></table></figure>

<h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin</span><br></pre></td></tr></table></figure>

<p>env 命令可以获取当前终端的环境变量。</p>
<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>sudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。</p>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>RPM 和 DPKG 为最常见的两类软件包管理工具。RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随后被 GNU 开源操作系统接受并成为很多 Linux 系统 (RHEL) 的既定软件标准。与 RPM 进行竞争的是基于 Debian 操作系统 (UBUNTU) 的 DEB 软件包管理工具 DPKG，全称为 Debian Package，功能方面与 RPM 相似。</p>
<p>YUM 基于 RPM，具有依赖管理功能，并具有软件升级的功能。</p>
<h2 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h2><p>Linux 发行版是 Linux 内核及各种应用软件的集成版本。</p>
<table>
<thead>
<tr>
<th align="center">基于的包管理工具</th>
<th align="center">商业发行版</th>
<th align="center">社区发行版</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RPM</td>
<td align="center">Red Hat</td>
<td align="center">Fedora / CentOS</td>
</tr>
<tr>
<td align="center">DPKG</td>
<td align="center">Ubuntu</td>
<td align="center">Debian</td>
</tr>
</tbody></table>
<h2 id="VIM-三个模式"><a href="#VIM-三个模式" class="headerlink" title="VIM 三个模式"></a>VIM 三个模式</h2><ul>
<li>一般指令模式（Command mode）：VIM 的默认模式，可以用于移动游标查看内容；</li>
<li>编辑模式（Insert mode）：按下 “i” 等按键之后进入，可以对文本进行编辑；</li>
<li>指令列模式（Bottom-line mode）：按下 “:” 按键之后进入，用于保存退出等操作。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//5942debd-fc00-477a-b390-7c5692cc8070.jpg" width="400"/> </div><br>

<p>在指令列模式下，有以下命令用于离开或者保存文件。</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">:w</td>
<td align="center">写入磁盘</td>
</tr>
<tr>
<td align="center">:w!</td>
<td align="center">当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关</td>
</tr>
<tr>
<td align="center">:q</td>
<td align="center">离开</td>
</tr>
<tr>
<td align="center">:q!</td>
<td align="center">强制离开不保存</td>
</tr>
<tr>
<td align="center">:wq</td>
<td align="center">写入磁盘后离开</td>
</tr>
<tr>
<td align="center">:wq!</td>
<td align="center">强制写入磁盘后离开</td>
</tr>
</tbody></table>
<h2 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h2><p>GNU 计划，译为革奴计划，它的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协议，包含了以下内容：</p>
<ul>
<li>以任何目的运行此程序的自由；</li>
<li>再复制的自由；</li>
<li>改进此程序，并公开发布改进的自由。</li>
</ul>
<h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><ul>
<li><a href="https://choosealicense.com/" target="_blank" rel="noopener external nofollow noreferrer">Choose an open source license</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener external nofollow noreferrer">如何选择开源许可证？</a></li>
</ul>
<h1 id="二、磁盘"><a href="#二、磁盘" class="headerlink" title="二、磁盘"></a>二、磁盘</h1><h2 id="磁盘接口"><a href="#磁盘接口" class="headerlink" title="磁盘接口"></a>磁盘接口</h2><h3 id="1-IDE"><a href="#1-IDE" class="headerlink" title="1. IDE"></a>1. IDE</h3><p>IDE（ATA）全称 Advanced Technology Attachment，接口速度最大为 133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被 SATA 所取代。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//924914c0-660c-4e4a-bbc0-1df1146e7516.jpg" width="400"/> </div><br>

<h3 id="2-SATA"><a href="#2-SATA" class="headerlink" title="2. SATA"></a>2. SATA</h3><p>SATA 全称 Serial ATA，也就是使用串口的 ATA 接口，因抗干扰性强，且对数据线的长度要求比 ATA 低很多，支持热插拔等功能，SATA-II 的接口速度为 300MiB/s，而新的 SATA-III 标准可达到 600MiB/s 的传输速度。SATA 的数据线也比 ATA 的细得多，有利于机箱内的空气流通，整理线材也比较方便。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//f9f2a16b-4843-44d1-9759-c745772e9bcf.jpg" width=""/> </div><br>

<h3 id="3-SCSI"><a href="#3-SCSI" class="headerlink" title="3. SCSI"></a>3. SCSI</h3><p>SCSI 全称是 Small Computer System Interface（小型机系统接口），经历多代的发展，从早期的 SCSI-II，到目前的 Ultra320 SCSI 以及 Fiber-Channel（光纤通道），接口型式也多种多样。SCSI 硬盘广为工作站级个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速 15000rpm 的高转速，且资料传输时 CPU 占用率较低，但是单价也比相同容量的 ATA 及 SATA 硬盘更加昂贵。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//f0574025-c514-49f5-a591-6d6a71f271f7.jpg" width=""/> </div><br>

<h3 id="4-SAS"><a href="#4-SAS" class="headerlink" title="4. SAS"></a>4. SAS</h3><p>SAS（Serial Attached SCSI）是新一代的 SCSI 技术，和 SATA 硬盘相同，都是采取序列式技术以获得更高的传输速度，可达到 6Gb/s。此外也透过缩小连接线改善系统内部空间等。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//6729baa0-57d7-4817-b3aa-518cbccf824c.jpg" width=""/> </div><br>

<h2 id="磁盘的文件名"><a href="#磁盘的文件名" class="headerlink" title="磁盘的文件名"></a>磁盘的文件名</h2><p>Linux 中每个硬件都被当做一个文件，包括磁盘。磁盘以磁盘接口类型进行命名，常见磁盘的文件名如下：</p>
<ul>
<li>IDE 磁盘：/dev/hd[a-d]</li>
<li>SATA/SCSI/SAS 磁盘：/dev/sd[a-p]</li>
</ul>
<p>其中文件名后面的序号的确定与系统检测到磁盘的顺序有关，而与磁盘所插入的插槽位置无关。</p>
<h1 id="三、分区"><a href="#三、分区" class="headerlink" title="三、分区"></a>三、分区</h1><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限制较少的 GPT 分区表。</p>
<h3 id="1-MBR"><a href="#1-MBR" class="headerlink" title="1. MBR"></a>1. MBR</h3><p>MBR 中，第一个扇区最重要，里面有主要开机记录（Master boot record, MBR）及分区表（partition table），其中主要开机记录占 446 bytes，分区表占 64 bytes。</p>
<p>分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它将其它扇区用来记录分区表，因此通过扩展分区可以分出更多分区，这些分区称为逻辑分区。</p>
<p>Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名 + 编号，例如 /dev/sda1。注意，逻辑分区的编号从 5 开始。</p>
<h3 id="2-GPT"><a href="#2-GPT" class="headerlink" title="2. GPT"></a>2. GPT</h3><p>不同的磁盘有不同的扇区大小，例如 512 bytes 和最新磁盘的 4 k。GPT 为了兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA），LBA 默认大小为 512 bytes。</p>
<p>GPT 第 1 个区块记录了主要开机记录（MBR），紧接着是 33 个区块记录分区信息，并把最后的 33 个区块用于对分区信息进行备份。这 33 个区块第一个为 GPT 表头纪录，这个部份纪录了分区表本身的位置与大小和备份分区的位置，同时放置了分区表的校验码 (CRC32)，操作系统可以根据这个校验码来判断 GPT 是否正确。若有错误，可以使用备份分区进行恢复。</p>
<p>GPT 没有扩展分区概念，都是主分区，每个 LAB 可以分 4 个分区，因此总共可以分 4 * 32 = 128 个分区。</p>
<p>MBR 不支持 2.2 TB 以上的硬盘，GPT 则最多支持到 2<sup>33</sup> TB = 8 ZB。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//GUID_Partition_Table_Scheme.svg.png" width="400"/> </div><br>

<h2 id="开机检测程序"><a href="#开机检测程序" class="headerlink" title="开机检测程序"></a>开机检测程序</h2><h3 id="1-BIOS"><a href="#1-BIOS" class="headerlink" title="1. BIOS"></a>1. BIOS</h3><p>BIOS（Basic Input/Output System，基本输入输出系统），它是一个固件（嵌入在硬件中的软件），BIOS 程序存放在断电后内容不会丢失的只读内存中。</p>
<p>BIOS 是开机的时候计算机执行的第一个程序，这个程序知道可以开机的磁盘，并读取磁盘第一个扇区的主要开机记录（MBR），由主要开机记录（MBR）执行其中的开机管理程序，这个开机管理程序会加载操作系统的核心文件。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//50831a6f-2777-46ea-a571-29f23c85cc21.jpg"/> </div><br>

<p>主要开机记录（MBR）中的开机管理程序提供以下功能：选单、载入核心文件以及转交其它开机管理程序。转交这个功能可以用来实现了多重引导，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动开机管理程序时，就可以通过选单选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。</p>
<p>下图中，第一扇区的主要开机记录（MBR）中的开机管理程序提供了两个选单：M1、M2，M1 指向了 Windows 操作系统，而 M2 指向其它分区的启动扇区，里面包含了另外一个开机管理程序，提供了一个指向 Linux 的选单。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//f900f266-a323-42b2-bc43-218fdb8811a8.jpg" width="600"/> </div><br>

<p>安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆盖掉主要开机记录（MBR），而 Linux 可以选择将开机管理程序安装在主要开机记录（MBR）或者其它分区的启动扇区，并且可以设置开机管理程序的选单。</p>
<h3 id="2-UEFI"><a href="#2-UEFI" class="headerlink" title="2. UEFI"></a>2. UEFI</h3><p>BIOS 不可以读取 GPT 分区表，而 UEFI 可以。</p>
<h1 id="四、文件系统"><a href="#四、文件系统" class="headerlink" title="四、文件系统"></a>四、文件系统</h1><h2 id="分区与文件系统"><a href="#分区与文件系统" class="headerlink" title="分区与文件系统"></a>分区与文件系统</h2><p>对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>最主要的几个组成部分如下：</p>
<ul>
<li>inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 编号；</li>
<li>block：记录文件的内容，文件太大时，会占用多个 block。</li>
</ul>
<p>除此之外还包括：</p>
<ul>
<li>superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等；</li>
<li>block bitmap：记录 block 是否被使用的位域；</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//BSD_disk.png" width="800"/> </div><br>


<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>对于 Ext2 文件系统，当要读取一个文件的内容时，先在 inode 中去查找文件内容所在的所有 block，然后把所有 block 的内容读出来。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//83185315-793a-453a-a927-5e8d92b5c0ef.jpg"/> </div><br>

<p>而对于 FAT 文件系统，它没有 inode，每个 block 中存储着下一个 block 的编号。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//075e1977-7846-4928-96c8-bb5b0268693c.jpg"/> </div><br>

<h2 id="磁盘碎片"><a href="#磁盘碎片" class="headerlink" title="磁盘碎片"></a>磁盘碎片</h2><p>指一个文件内容所在的 block 过于分散。</p>
<h2 id="block"><a href="#block" class="headerlink" title="block"></a>block</h2><p>在 Ext2 文件系统中所支持的 block 大小有 1K，2K 及 4K 三种，不同的大小限制了单个文件和文件系统的最大大小。</p>
<table>
<thead>
<tr>
<th align="center">大小</th>
<th align="center">1KB</th>
<th align="center">2KB</th>
<th align="center">4KB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">最大单一文件</td>
<td align="center">16GB</td>
<td align="center">256GB</td>
<td align="center">2TB</td>
</tr>
<tr>
<td align="center">最大文件系统</td>
<td align="center">2TB</td>
<td align="center">8TB</td>
<td align="center">16TB</td>
</tr>
</tbody></table>
<p>一个 block 只能被一个文件所使用，未使用的部分直接浪费了。因此如果需要存储大量的小文件，那么最好选用比较小的 block。</p>
<h2 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h2><p>inode 具体包含以下信息：</p>
<ul>
<li>权限 (read/write/excute)；</li>
<li>拥有者与群组 (owner/group)；</li>
<li>容量；</li>
<li>建立或状态改变的时间 (ctime)；</li>
<li>最近一次的读取时间 (atime)；</li>
<li>最近修改的时间 (mtime)；</li>
<li>定义文件特性的旗标 (flag)，如 SetUID…；</li>
<li>该文件真正内容的指向 (pointer)。</li>
</ul>
<p>inode 具有以下特点：</p>
<ul>
<li>每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到 256 bytes)；</li>
<li>每个文件都仅会占用一个 inode。</li>
</ul>
<p>inode 中记录了文件内容所在的 block 编号，但是每个 block 非常小，一个大文件随便都需要几十万的 block。而一个 inode 大小有限，无法直接引用这么多 block 编号。因此引入了间接、双间接、三间接引用。间接引用是指，让 inode 记录的引用 block 块记录引用信息。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//inode_with_signatures.jpg" width="600"/> </div><br>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。</p>
<p>可以看出文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文件、删除文件、更改文件名这些操作与目录的 w 权限有关。</p>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>如果突然断电，那么文件系统会发生错误，例如断电前只修改了 block bitmap，而还没有将数据真正写入 block 中。</p>
<p>ext3/ext4 文件系统引入了日志功能，可以利用日志来修复文件系统。</p>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系统的数据。</p>
<h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><p>为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下：</p>
<ul>
<li>/ (root, 根目录)</li>
<li>/usr (unix software resource)：所有系统默认软件都会安装到这个目录；</li>
<li>/var (variable)：存放系统或程序运行过程中的数据文件。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//linux-filesystem.png" width=""/> </div><br>

<h1 id="五、文件"><a href="#五、文件" class="headerlink" title="五、文件"></a>五、文件</h1><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。</p>
<p>使用 ls 查看一个文件时，会显示一个文件的信息，例如 <code>drwxr-xr-x. 3 root root 17 May 6 00:14 .config</code>，对这个信息的解释如下：</p>
<ul>
<li>drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段</li>
<li>3：链接数</li>
<li>root：文件拥有者</li>
<li>root：所属群组</li>
<li>17：文件大小</li>
<li>May 6 00:14：文件最后被修改的时间</li>
<li>.config：文件名</li>
</ul>
<p>常见的文件类型及其含义有：</p>
<ul>
<li>d：目录</li>
<li>-：文件</li>
<li>l：链接文件</li>
</ul>
<p>9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。</p>
<p>文件时间有以下三种：</p>
<ul>
<li>modification time (mtime)：文件的内容更新就会更新；</li>
<li>status time (ctime)：文件的状态（权限、属性）更新就会更新；</li>
<li>access time (atime)：读取文件时就会更新。</li>
</ul>
<h2 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h2><h3 id="1-ls"><a href="#1-ls" class="headerlink" title="1. ls"></a>1. ls</h3><p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># ls [-aAdfFhilnrRSt] file|dir</span><br><span class="line">-a ：列出全部的文件</span><br><span class="line">-d ：仅列出目录本身</span><br><span class="line">-l ：以长数据串行列出，包含文件的属性与权限等等数据</span><br></pre></td></tr></table></figure>

<h3 id="2-cd"><a href="#2-cd" class="headerlink" title="2. cd"></a>2. cd</h3><p>更换当前目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>

<h3 id="3-mkdir"><a href="#3-mkdir" class="headerlink" title="3. mkdir"></a>3. mkdir</h3><p>创建目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir [-mp] 目录名称</span><br><span class="line">-m ：配置目录权限</span><br><span class="line">-p ：递归创建目录</span><br></pre></td></tr></table></figure>

<h3 id="4-rmdir"><a href="#4-rmdir" class="headerlink" title="4. rmdir"></a>4. rmdir</h3><p>删除目录，目录必须为空。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br><span class="line">-p ：递归删除目录</span><br></pre></td></tr></table></figure>

<h3 id="5-touch"><a href="#5-touch" class="headerlink" title="5. touch"></a>5. touch</h3><p>更新文件时间或者建立新文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># touch [-acdmt] filename</span><br><span class="line">-a ： 更新 atime</span><br><span class="line">-c ： 更新 ctime，若该文件不存在则不建立新文件</span><br><span class="line">-m ： 更新 mtime</span><br><span class="line">-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date="日期或时间"</span><br><span class="line">-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure>

<h3 id="6-cp"><a href="#6-cp" class="headerlink" title="6. cp"></a>6. cp</h3><p>复制文件。</p>
<p>如果源文件有两个以上，则目的文件一定要是目录才行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">cp [-adfilprsu] source destination</span><br><span class="line">-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明</span><br><span class="line">-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身</span><br><span class="line">-i ：若目标文件已经存在时，在覆盖前会先询问</span><br><span class="line">-p ：连同文件的属性一起复制过去</span><br><span class="line">-r ：递归持续复制</span><br><span class="line">-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了</span><br></pre></td></tr></table></figure>

<h3 id="7-rm"><a href="#7-rm" class="headerlink" title="7. rm"></a>7. rm</h3><p>删除文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># rm [-fir] 文件或目录</span><br><span class="line">-r ：递归删除</span><br></pre></td></tr></table></figure>

<h3 id="8-mv"><a href="#8-mv" class="headerlink" title="8. mv"></a>8. mv</h3><p>移动文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># mv [-fiu] source destination</span><br><span class="line"># mv [options] source1 source2 source3 .... directory</span><br><span class="line">-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br></pre></td></tr></table></figure>

<h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r : 4、w : 2、x : 1。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># chmod [-R] xyz dirname/filename</span><br></pre></td></tr></table></figure>

<p>示例：将 .bashrc 文件的权限修改为 -rwxr-xr–。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># chmod 754 .bashrc</span><br></pre></td></tr></table></figure>

<p>也可以使用符号来设定权限。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># chmod [ugoa]  [+-=] [rwx] dirname/filename</span><br><span class="line">- u：拥有者</span><br><span class="line">- g：所属群组</span><br><span class="line">- o：其他人</span><br><span class="line">- a：所有人</span><br><span class="line">- +：添加权限</span><br><span class="line">- -：移除权限</span><br><span class="line">- =：设定权限</span><br></pre></td></tr></table></figure>

<p>示例：为 .bashrc 文件的所有用户添加写权限。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># chmod a+w .bashrc</span><br></pre></td></tr></table></figure>

<h2 id="文件默认权限"><a href="#文件默认权限" class="headerlink" title="文件默认权限"></a>文件默认权限</h2><ul>
<li>文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。</li>
<li>目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。</li>
</ul>
<p>可以通过 umask 设置或者查看文件的默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 -rw-rw-r–。</p>
<h2 id="目录的权限"><a href="#目录的权限" class="headerlink" title="目录的权限"></a>目录的权限</h2><p>文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改。</p>
<p>目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># ln [-sf] source_filename dist_filename</span><br><span class="line">-s ：默认是 hard link，加 -s 为 symbolic link</span><br><span class="line">-f ：如果目标文件存在时，先删除目标文件</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//b8081c84-62c4-4019-b3ee-4bd0e443d647.jpg"/> </div><br>

<h3 id="1-实体链接"><a href="#1-实体链接" class="headerlink" title="1. 实体链接"></a>1. 实体链接</h3><p>在目录下创建一个条目，记录着文件名与 inode 编号，这个 inode 就是源文件的 inode。</p>
<p>删除任意一个条目，文件还是存在，只要引用数量不为 0。</p>
<p>有以下限制：不能跨越文件系统、不能对目录进行链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># ln /etc/crontab .</span><br><span class="line"># ll -i /etc/crontab crontab</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span><br></pre></td></tr></table></figure>

<h3 id="2-符号链接"><a href="#2-符号链接" class="headerlink" title="2. 符号链接"></a>2. 符号链接</h3><p>符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上，可以理解为 Windows 的快捷方式。</p>
<p>当源文件被删除了，链接文件就打不开了。</p>
<p>可以为目录建立链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># ll -i /etc/crontab /root/crontab2</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</span><br><span class="line">53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab</span><br></pre></td></tr></table></figure>

<h2 id="获取文件内容"><a href="#获取文件内容" class="headerlink" title="获取文件内容"></a>获取文件内容</h2><h3 id="1-cat"><a href="#1-cat" class="headerlink" title="1. cat"></a>1. cat</h3><p>取得文件内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># cat [-AbEnTv] filename</span><br><span class="line">-n ：打印出行号，连同空白行也会有行号，-b 不会</span><br></pre></td></tr></table></figure>

<h3 id="2-tac"><a href="#2-tac" class="headerlink" title="2. tac"></a>2. tac</h3><p>是 cat 的反向操作，从最后一行开始打印。</p>
<h3 id="3-more"><a href="#3-more" class="headerlink" title="3. more"></a>3. more</h3><p>和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。</p>
<h3 id="4-less"><a href="#4-less" class="headerlink" title="4. less"></a>4. less</h3><p>和 more 类似，但是多了一个向前翻页的功能。</p>
<h3 id="5-head"><a href="#5-head" class="headerlink" title="5. head"></a>5. head</h3><p>取得文件前几行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># head [-n number] filename</span><br><span class="line">-n ：后面接数字，代表显示几行的意思</span><br></pre></td></tr></table></figure>

<h3 id="6-tail"><a href="#6-tail" class="headerlink" title="6. tail"></a>6. tail</h3><p>是 head 的反向操作，只是取得是后几行。</p>
<h3 id="7-od"><a href="#7-od" class="headerlink" title="7. od"></a>7. od</h3><p>以字符或者十六进制的形式显示二进制文件。</p>
<h2 id="指令与文件搜索"><a href="#指令与文件搜索" class="headerlink" title="指令与文件搜索"></a>指令与文件搜索</h2><h3 id="1-which"><a href="#1-which" class="headerlink" title="1. which"></a>1. which</h3><p>指令搜索。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># which [-a] command</span><br><span class="line">-a ：将所有指令列出，而不是只列第一个</span><br></pre></td></tr></table></figure>

<h3 id="2-whereis"><a href="#2-whereis" class="headerlink" title="2. whereis"></a>2. whereis</h3><p>文件搜索。速度比较快，因为它只搜索几个特定的目录。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># whereis [-bmsu] dirname/filename</span><br></pre></td></tr></table></figure>

<h3 id="3-locate"><a href="#3-locate" class="headerlink" title="3. locate"></a>3. locate</h3><p>文件搜索。可以用关键字或者正则表达式进行搜索。</p>
<p>locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># locate [-ir] keyword</span><br><span class="line">-r：正则表达式</span><br></pre></td></tr></table></figure>

<h3 id="4-find"><a href="#4-find" class="headerlink" title="4. find"></a>4. find</h3><p>文件搜索。可以使用文件的属性和权限进行搜索。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># find [basedir] [option]</span><br><span class="line">example: find . -name "shadow*"</span><br></pre></td></tr></table></figure>

<p>（一）与时间有关的选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-mtime  n ：列出在 n 天前的那一天修改过内容的文件</span><br><span class="line">-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件</span><br><span class="line">-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件</span><br><span class="line">-newer file ： 列出比 file 更新的文件</span><br></pre></td></tr></table></figure>

<p>+4、4 和 -4 的指示的时间范围如下：</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//658fc5e7-79c0-4247-9445-d69bf194c539.png" width=""/> </div><br>

<p>（二）与文件拥有者和所属群组有关的选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-uid n</span><br><span class="line">-gid n</span><br><span class="line">-user name</span><br><span class="line">-group name</span><br><span class="line">-nouser ：搜索拥有者不存在 /etc/passwd 的文件</span><br><span class="line">-nogroup：搜索所属群组不存在于 /etc/group 的文件</span><br></pre></td></tr></table></figure>

<p>（三）与文件权限和名称有关的选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">-name filename</span><br><span class="line">-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k</span><br><span class="line">-type TYPE</span><br><span class="line">-perm mode  ：搜索权限等于 mode 的文件</span><br><span class="line">-perm -mode ：搜索权限包含 mode 的文件</span><br><span class="line">-perm /mode ：搜索权限包含任一 mode 的文件</span><br></pre></td></tr></table></figure>

<h1 id="六、压缩与打包"><a href="#六、压缩与打包" class="headerlink" title="六、压缩与打包"></a>六、压缩与打包</h1><h2 id="压缩文件名"><a href="#压缩文件名" class="headerlink" title="压缩文件名"></a>压缩文件名</h2><p>Linux 底下有很多压缩文件名，常见的如下：</p>
<table>
<thead>
<tr>
<th>扩展名</th>
<th>压缩程序</th>
</tr>
</thead>
<tbody><tr>
<td>*.Z</td>
<td>compress</td>
</tr>
<tr>
<td>*.zip</td>
<td>zip</td>
</tr>
<tr>
<td>*.gz</td>
<td>gzip</td>
</tr>
<tr>
<td>*.bz2</td>
<td>bzip2</td>
</tr>
<tr>
<td>*.xz</td>
<td>xz</td>
</tr>
<tr>
<td>*.tar</td>
<td>tar 程序打包的数据，没有经过压缩</td>
</tr>
<tr>
<td>*.tar.gz</td>
<td>tar 程序打包的文件，经过 gzip 的压缩</td>
</tr>
<tr>
<td>*.tar.bz2</td>
<td>tar 程序打包的文件，经过 bzip2 的压缩</td>
</tr>
<tr>
<td>*.tar.xz</td>
<td>tar 程序打包的文件，经过 xz 的压缩</td>
</tr>
</tbody></table>
<h2 id="压缩指令"><a href="#压缩指令" class="headerlink" title="压缩指令"></a>压缩指令</h2><h3 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1. gzip"></a>1. gzip</h3><p>gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。</p>
<p>经过 gzip 压缩过，源文件就不存在了。</p>
<p>有 9 个不同的压缩等级可以使用。</p>
<p>可以使用 zcat、zmore、zless 来读取压缩文件的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ gzip [-cdtv#] filename</span><br><span class="line">-c ：将压缩的数据输出到屏幕上</span><br><span class="line">-d ：解压缩</span><br><span class="line">-t ：检验压缩文件是否出错</span><br><span class="line">-v ：显示压缩比等信息</span><br><span class="line">-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6</span><br></pre></td></tr></table></figure>

<h3 id="2-bzip2"><a href="#2-bzip2" class="headerlink" title="2. bzip2"></a>2. bzip2</h3><p>提供比 gzip 更高的压缩比。</p>
<p>查看命令：bzcat、bzmore、bzless、bzgrep。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ bzip2 [-cdkzv#] filename</span><br><span class="line">-k ：保留源文件</span><br></pre></td></tr></table></figure>

<h3 id="3-xz"><a href="#3-xz" class="headerlink" title="3. xz"></a>3. xz</h3><p>提供比 bzip2 更佳的压缩比。</p>
<p>可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意的是，压缩比越高，压缩的时间也越长。</p>
<p>查看命令：xzcat、xzmore、xzless、xzgrep。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ xz [-dtlkc#] filename</span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gip、bzip2、xz 将打包文件进行压缩。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename...  ==打包压缩</span><br><span class="line">$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件]              ==查看</span><br><span class="line">$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录]    ==解压缩</span><br><span class="line">-z ：使用 zip；</span><br><span class="line">-j ：使用 bzip2；</span><br><span class="line">-J ：使用 xz；</span><br><span class="line">-c ：新建打包文件；</span><br><span class="line">-t ：查看打包文件里面有哪些文件；</span><br><span class="line">-x ：解打包或解压缩的功能；</span><br><span class="line">-v ：在压缩/解压缩的过程中，显示正在处理的文件名；</span><br><span class="line">-f : filename：要处理的文件；</span><br><span class="line">-C 目录 ： 在特定目录解压缩。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">使用方式</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">打包压缩</td>
<td>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</td>
</tr>
<tr>
<td align="center">查 看</td>
<td>tar -jtv -f filename.tar.bz2</td>
</tr>
<tr>
<td align="center">解压缩</td>
<td>tar -jxv -f filename.tar.bz2 -C 要解压缩的目录</td>
</tr>
</tbody></table>
<h1 id="七、Bash"><a href="#七、Bash" class="headerlink" title="七、Bash"></a>七、Bash</h1><p>可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>命令历史：记录使用过的命令</li>
<li>命令与文件补全：快捷键：tab</li>
<li>命名别名：例如 lm 是 ls -al 的别名</li>
<li>shell scripts</li>
<li>通配符：例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件</li>
</ul>
<h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><p>对一个变量赋值直接使用 =。</p>
<p>对变量取用需要在变量前加上 $ ，也可以用 ${} 的形式；</p>
<p>输出变量使用 echo 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ x=abc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$x</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;x&#125;</span></span><br></pre></td></tr></table></figure>

<p>变量内容如果有空格，必须使用双引号或者单引号。</p>
<ul>
<li>双引号内的特殊字符可以保留原本特性，例如 x=”lang is $LANG”，则 x 的值为 lang is zh_TW.UTF-8；</li>
<li>单引号内的特殊字符就是特殊字符本身，例如 x=’lang is $LANG’，则 x 的值为 lang is $LANG。</li>
</ul>
<p>可以使用 `指令` 或者 $(指令) 的方式将指令的执行结果赋值给变量。例如 version=$(uname -r)，则 version 的值为 4.15.0-22-generic。</p>
<p>可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使用，所谓子程序就是由当前 Bash 而产生的子 Bash。</p>
<p>Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ declare [-aixr] variable</span><br><span class="line">-a ： 定义为数组类型</span><br><span class="line">-i ： 定义为整数类型</span><br><span class="line">-x ： 定义为环境变量</span><br><span class="line">-r ： 定义为 readonly 类型</span><br></pre></td></tr></table></figure>

<p>使用 [ ] 来对数组进行索引操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ array[1]=a</span><br><span class="line">$ array[2]=b</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="指令搜索顺序"><a href="#指令搜索顺序" class="headerlink" title="指令搜索顺序"></a>指令搜索顺序</h2><ul>
<li>以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；</li>
<li>由别名找到该指令来执行；</li>
<li>由 Bash 内建的指令来执行；</li>
<li>按 $PATH 变量指定的搜索路径的顺序找到第一个指令来执行。</li>
</ul>
<h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><p>重定向指的是使用文件代替标准输入、标准输出和标准错误输出。</p>
<table>
<thead>
<tr>
<th align="center">1</th>
<th align="center">代码</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">标准输入 (stdin)</td>
<td align="center">0</td>
<td align="center">&lt; 或 &lt;&lt;</td>
</tr>
<tr>
<td align="center">标准输出 (stdout)</td>
<td align="center">1</td>
<td align="center">&gt; 或 &gt;&gt;</td>
</tr>
<tr>
<td align="center">标准错误输出 (stderr)</td>
<td align="center">2</td>
<td align="center">2&gt; 或 2&gt;&gt;</td>
</tr>
</tbody></table>
<p>其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向。</p>
<p>可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进垃圾箱。</p>
<p>如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home -name .bashrc &gt; list 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h1 id="八、管线指令"><a href="#八、管线指令" class="headerlink" title="八、管线指令"></a>八、管线指令</h1><p>管线是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的内容时就可以使用管线。</p>
<p>在命令之间使用 | 分隔各个管线命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al /etc | less</span><br></pre></td></tr></table></figure>

<h2 id="提取指令"><a href="#提取指令" class="headerlink" title="提取指令"></a>提取指令</h2><p>cut 对数据进行切分，取出想要的部分。</p>
<p>切分过程一行一行地进行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ cut</span><br><span class="line">-d ：分隔符</span><br><span class="line">-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间</span><br><span class="line">-c ：以字符为单位取出区间</span><br></pre></td></tr></table></figure>

<p>示例 1：last 显示登入者的信息，取出用户名。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last</span><br><span class="line">root pts/1 192.168.201.101 Sat Feb 7 12:35 still logged in</span><br><span class="line">root pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)</span><br><span class="line">root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)</span><br><span class="line"></span><br><span class="line">$ last | cut -d ' ' -f 1</span><br></pre></td></tr></table></figure>

<p>示例 2：将 export 输出的信息，取出第 12 字符以后的所有字符串。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ export</span><br><span class="line">declare -x HISTCONTROL="ignoredups"</span><br><span class="line">declare -x HISTSIZE="1000"</span><br><span class="line">declare -x HOME="/home/dmtsai"</span><br><span class="line">declare -x HOSTNAME="study.centos.vbird"</span><br><span class="line">.....(其他省略).....</span><br><span class="line"></span><br><span class="line">$ export | cut -c 12-</span><br></pre></td></tr></table></figure>

<h2 id="排序指令"><a href="#排序指令" class="headerlink" title="排序指令"></a>排序指令</h2><p><strong>sort</strong>  用于排序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ sort [-fbMnrtuk] [file or stdin]</span><br><span class="line">-f ：忽略大小写</span><br><span class="line">-b ：忽略最前面的空格</span><br><span class="line">-M ：以月份的名字来排序，例如 JAN，DEC</span><br><span class="line">-n ：使用数字</span><br><span class="line">-r ：反向排序</span><br><span class="line">-u ：相当于 unique，重复的内容只出现一次</span><br><span class="line">-t ：分隔符，默认为 tab</span><br><span class="line">-k ：指定排序的区间</span><br></pre></td></tr></table></figure>

<p>示例：/etc/passwd 文件内容以 : 来分隔，要求以第三列进行排序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ cat /etc/passwd | sort -t ':' -k 3</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">dmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bash</span><br><span class="line">alex:x:1001:1002::/home/alex:/bin/bash</span><br><span class="line">arod:x:1002:1003::/home/arod:/bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>uniq</strong>  可以将重复的数据只取一个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ uniq [-ic]</span><br><span class="line">-i ：忽略大小写</span><br><span class="line">-c ：进行计数</span><br></pre></td></tr></table></figure>

<p>示例：取得每个人的登录总次数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last | cut -d ' ' -f 1 | sort | uniq -c</span><br><span class="line">1</span><br><span class="line">6 (unknown</span><br><span class="line">47 dmtsai</span><br><span class="line">4 reboot</span><br><span class="line">7 root</span><br><span class="line">1 wtmp</span><br></pre></td></tr></table></figure>

<h2 id="双向输出重定向"><a href="#双向输出重定向" class="headerlink" title="双向输出重定向"></a>双向输出重定向</h2><p>输出重定向会将输出内容重定向到文件中，而  <strong>tee</strong>  不仅能够完成这个功能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送到文件和屏幕上。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ tee [-a] file</span><br></pre></td></tr></table></figure>

<h2 id="字符转换指令"><a href="#字符转换指令" class="headerlink" title="字符转换指令"></a>字符转换指令</h2><p><strong>tr</strong>  用来删除一行中的字符，或者对字符进行替换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ tr [-ds] SET1 ...</span><br><span class="line">-d ： 删除行中 SET1 这个字符串</span><br></pre></td></tr></table></figure>

<p>示例，将 last 输出的信息所有小写转换为大写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last | tr '[a-z]' '[A-Z]'</span><br></pre></td></tr></table></figure>

<p>  <strong>col</strong>  将 tab 字符转为空格字符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ col [-xb]</span><br><span class="line">-x ： 将 tab 键转换成对等的空格键</span><br></pre></td></tr></table></figure>

<p><strong>expand</strong>  将 tab 转换一定数量的空格，默认是 8 个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ expand [-t] file</span><br><span class="line">-t ：tab 转为空格的数量</span><br></pre></td></tr></table></figure>

<p><strong>join</strong>  将有相同数据的那一行合并在一起。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ join [-ti12] file1 file2</span><br><span class="line">-t ：分隔符，默认为空格</span><br><span class="line">-i ：忽略大小写的差异</span><br><span class="line">-1 ：第一个文件所用的比较字段</span><br><span class="line">-2 ：第二个文件所用的比较字段</span><br></pre></td></tr></table></figure>

<p><strong>paste</strong>  直接将两行粘贴在一起。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ paste [-d] file1 file2</span><br><span class="line">-d ：分隔符，默认为 tab</span><br></pre></td></tr></table></figure>

<h2 id="分区指令"><a href="#分区指令" class="headerlink" title="分区指令"></a>分区指令</h2><p><strong>split</strong>  将一个文件划分成多个文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ split [-bl] file PREFIX</span><br><span class="line">-b ：以大小来进行分区，可加单位，例如 b, k, m 等</span><br><span class="line">-l ：以行数来进行分区。</span><br><span class="line">- PREFIX ：分区文件的前导名称</span><br></pre></td></tr></table></figure>

<h1 id="九、正则表达式"><a href="#九、正则表达式" class="headerlink" title="九、正则表达式"></a>九、正则表达式</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>g/re/p（globally search a regular expression and print)，使用正则表示式进行全局查找并打印。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ grep [-acinv] [--color=auto] 搜寻字符串 filename</span><br><span class="line">-c ： 统计个数</span><br><span class="line">-i ： 忽略大小写</span><br><span class="line">-n ： 输出行号</span><br><span class="line">-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行</span><br><span class="line">--color=auto ：找到的关键字加颜色显示</span><br></pre></td></tr></table></figure>

<p>示例：把含有 the 字符串的行提取出来（注意默认会有 –color=auto 选项，因此以下内容在 Linux 中有颜色显示 the 字符串）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ grep -n 'the' regular_express.txt</span><br><span class="line">8:I can't finish the test.</span><br><span class="line">12:the symbol '*' is represented as start.</span><br><span class="line">15:You are the best is mean you are the no. 1.</span><br><span class="line">16:The world Happy is the same with "glad".</span><br><span class="line">18:google is the best tools for search keyword</span><br></pre></td></tr></table></figure>

<p>因为 { 和 } 在 shell 是有特殊意义的，因此必须要使用转义字符进行转义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ grep -n 'go\&#123;2,5\&#125;g' regular_express.txt</span><br></pre></td></tr></table></figure>

<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>用于格式化输出。</p>
<p>它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ printf '%10s %5i %5i %5i %8.2f \n' $(cat printf.txt)</span><br><span class="line">    DmTsai    80    60    92    77.33</span><br><span class="line">     VBird    75    55    80    70.00</span><br><span class="line">       Ken    60    90    70    73.33</span><br></pre></td></tr></table></figure>

<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>是由 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 创造，awk 这个名字就是这三个创始人名字的首字母。</p>
<p>awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：$n，n 为字段号，从 1 开始，$0 表示一整行。</p>
<p>示例：取出登录用户的用户名和 IP</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last -n 5</span><br><span class="line">dmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged in</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)</span><br><span class="line">dmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)</span><br><span class="line">dmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last -n 5 | awk '&#123;print $1 "\t" $3&#125;'</span><br></pre></td></tr></table></figure>

<p>可以根据字段的某些条件进行匹配，例如匹配字段小于某个值的那一行数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ awk '条件类型 1 &#123;动作 1&#125; 条件类型 2 &#123;动作 2&#125; ...' filename</span><br></pre></td></tr></table></figure>

<p>示例：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;passwd | awk &#39;BEGIN &#123;FS&#x3D;&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\t &quot; $3&#125;&#39;</span><br><span class="line">root 0</span><br><span class="line">bin 1</span><br><span class="line">daemon 2</span><br></pre></td></tr></table></figure>

<p>awk 变量：</p>
<table>
<thead>
<tr>
<th align="center">变量名称</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NF</td>
<td>每一行拥有的字段总数</td>
</tr>
<tr>
<td align="center">NR</td>
<td>目前所处理的是第几行数据</td>
</tr>
<tr>
<td align="center">FS</td>
<td>目前的分隔字符，默认是空格键</td>
</tr>
</tbody></table>
<p>示例：显示正在处理的行号以及每一行有多少字段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ last -n 5 | awk '&#123;print $1 "\t lines: " NR "\t columns: " NF&#125;'</span><br><span class="line">dmtsai lines: 1 columns: 10</span><br><span class="line">dmtsai lines: 2 columns: 10</span><br><span class="line">dmtsai lines: 3 columns: 10</span><br><span class="line">dmtsai lines: 4 columns: 10</span><br><span class="line">dmtsai lines: 5 columns: 9</span><br></pre></td></tr></table></figure>

<h1 id="十、进程管理"><a href="#十、进程管理" class="headerlink" title="十、进程管理"></a>十、进程管理</h1><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><h3 id="1-ps"><a href="#1-ps" class="headerlink" title="1. ps"></a>1. ps</h3><p>查看某个时间点的进程信息</p>
<p>示例一：查看自己的进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -l</span></span><br></pre></td></tr></table></figure>

<p>示例二：查看系统所有进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps aux</span></span><br></pre></td></tr></table></figure>

<p>示例三：查看特定的进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps aux | grep threadx</span></span><br></pre></td></tr></table></figure>

<h3 id="2-top"><a href="#2-top" class="headerlink" title="2. top"></a>2. top</h3><p>实时显示进程信息</p>
<p>示例：两秒钟刷新一次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># top -d 2</span></span><br></pre></td></tr></table></figure>

<h3 id="3-pstree"><a href="#3-pstree" class="headerlink" title="3. pstree"></a>3. pstree</h3><p>查看进程树</p>
<p>示例：查看所有进程树</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -A</span></span><br></pre></td></tr></table></figure>

<h3 id="4-netstat"><a href="#4-netstat" class="headerlink" title="4. netstat"></a>4. netstat</h3><p>查看占用端口的进程</p>
<p>示例：查看特定端口的进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -anp | grep port</span></span><br></pre></td></tr></table></figure>

<h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><table>
<thead>
<tr>
<th align="center">状态</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">R</td>
<td>running or runnable (on run queue)</td>
</tr>
<tr>
<td align="center">D</td>
<td>uninterruptible sleep (usually I/O)</td>
</tr>
<tr>
<td align="center">S</td>
<td>interruptible sleep (waiting for an event to complete)</td>
</tr>
<tr>
<td align="center">Z</td>
<td>zombie (terminated but not reaped by its parent)</td>
</tr>
<tr>
<td align="center">T</td>
<td>stopped (either by a job control signal or because it is being traced)</td>
</tr>
</tbody></table>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//76a49594323247f21c9b3a69945445ee.png" width=""/> </div><br>

<h2 id="SIGCHLD"><a href="#SIGCHLD" class="headerlink" title="SIGCHLD"></a>SIGCHLD</h2><p>当一个子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会发生在父进程中：</p>
<ul>
<li>得到 SIGCHLD 信号；</li>
<li>waitpid() 或者 wait() 调用会返回。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//flow.png" width=""/> </div><br>

<p>其中子进程发送的 SIGCHLD 信号包含了子进程的信息，包含了进程 ID、进程状态、进程使用 CPU 的时间等。</p>
<p>在子进程退出时，它的进程描述符不会立即释放，这是为了让父进程得到子进程信息，父进程通过 wait() 和 waitpid() 来获得一个已经退出的子进程的信息。</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> *status)</span></span></span><br></pre></td></tr></table></figure>

<p>父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，之后 wait() 函数会销毁子进程并返回。</p>
<p>如果成功，返回被收集的子进程的进程 ID；如果调用进程没有子进程，调用就会失败，此时返回 -1，同时 errno 被置为 ECHILD。</p>
<p>参数 status 用来保存被收集的子进程退出时的一些状态，如果对这个子进程是如何死掉的毫不在意，只想把这个子进程消灭掉，可以设置这个参数为 NULL。</p>
<h2 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid()"></a>waitpid()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> *status, <span class="keyword">int</span> options)</span></span></span><br></pre></td></tr></table></figure>

<p>作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 options。</p>
<p>pid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD 信号。</p>
<p>options 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 waitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行其它任务。</p>
<h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。</p>
<p>孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作。</p>
<p>由于孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。</p>
<h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><p>一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。</p>
<p>僵尸进程通过 ps 命令显示出来的状态为 Z（zombie）。</p>
<p>系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。</p>
<p>要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤儿进程，从而被 init 所收养，这样 init 就会释放所有的僵尸进程所占有的资源，从而结束僵尸进程。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>鸟哥. 鸟 哥 的 Linux 私 房 菜 基 础 篇 第 三 版[J]. 2009.</li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-rpmdpkg/index.html" target="_blank" rel="noopener external nofollow noreferrer">Linux 平台上的软件包管理</a></li>
<li><a href="http://liubigbin.github.io/2016/03/11/Linux-%E4%B9%8B%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E3%80%81%E5%83%B5%E6%AD%BB%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/" target="_blank" rel="noopener external nofollow noreferrer">Linux 之守护进程、僵死进程与孤儿进程</a></li>
<li><a href="https://stackoverflow.com/questions/185899/what-is-the-difference-between-a-symbolic-link-and-a-hard-link" target="_blank" rel="noopener external nofollow noreferrer">What is the difference between a symbolic link and a hard link?</a></li>
<li><a href="https://idea.popcount.org/2012-12-11-linux-process-states/" target="_blank" rel="noopener external nofollow noreferrer">Linux process states</a></li>
<li><a href="https://en.wikipedia.org/wiki/GUID_Partition_Table" target="_blank" rel="noopener external nofollow noreferrer">GUID Partition Table</a></li>
<li><a href="https://blog.csdn.net/kevinhg/article/details/7001719" target="_blank" rel="noopener external nofollow noreferrer">详解 wait 和 waitpid 函数</a></li>
<li><a href="https://blog.csdn.net/tianlesoftware/article/details/6009110" target="_blank" rel="noopener external nofollow noreferrer">IDE、SATA、SCSI、SAS、FC、SSD 硬盘类型介绍</a></li>
<li><a href="http://www.mpchunter.com/s3000/akai-ib-301s-scsi-interface-for-s2800s3000/" target="_blank" rel="noopener external nofollow noreferrer">Akai IB-301S SCSI Interface for S2800,S3000</a></li>
<li><a href="https://en.wikipedia.org/wiki/Parallel_ATA" target="_blank" rel="noopener external nofollow noreferrer">Parallel ATA</a></li>
<li><a href="http://www.thessdreview.com/our-reviews/adata-xpg-sx900-256gb-sata-3-ssd-review-expanded-capacity-and-sandforce-driven-speed/4/" target="_blank" rel="noopener external nofollow noreferrer">ADATA XPG SX900 256GB SATA 3 SSD Review – Expanded Capacity and SandForce Driven Speed</a></li>
<li><a href="https://blogs.cisco.com/datacenter/decoding-ucs-invicta-part-1" target="_blank" rel="noopener external nofollow noreferrer">Decoding UCS Invicta – Part 1</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="noopener external nofollow noreferrer">硬盘</a></li>
<li><a href="http://www.differencebetween.info/difference-between-sas-and-sata" target="_blank" rel="noopener external nofollow noreferrer">Difference between SAS and SATA</a></li>
<li><a href="https://zh.wikipedia.org/wiki/BIOS" target="_blank" rel="noopener external nofollow noreferrer">BIOS</a></li>
<li><a href="https://www.cs.rutgers.edu/~pxk/416/notes/13-fs-studies.html" target="_blank" rel="noopener external nofollow noreferrer">File system design case studies</a></li>
<li><a href="https://classes.soe.ucsc.edu/cmps111/Fall08/proj4.shtml" target="_blank" rel="noopener external nofollow noreferrer">Programming Project #4</a></li>
<li><a href="http://web.cs.ucla.edu/classes/fall14/cs111/scribe/11a/index.html" target="_blank" rel="noopener external nofollow noreferrer">FILE SYSTEM DESIGN</a></li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown操作</title>
    <url>/posts/32582.html</url>
    <content><![CDATA[<pre><code>MarkDown操作</code></pre><hr>
<pre><code>标题：
#h1级标题
##h2级标题
###h3级标题
####h4级标题
#####h5级标题
######h6级标题

分割线：三个以上的短线 即可作出分割线

----

超链接：[连接名称](网址 , 标题)
[我是链接名](http://www.izhangbo.cn, &quot;我是标题&quot;)
[&lt;i class=&quot;icon-refresh&quot;&gt;&lt;/i&gt; 点我刷新](/sonfilename/)

另一种超链接写法：[链接名][链接代号]
[here][3]
然后在别的地方定义 3 这个详细链接信息，
[3]: http://www.izhangbo.cn &quot;聚牛团队&quot;

直接展示链接的写法：&lt;http://www.izhangbo.cn&gt;

键盘键
&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;

code格式：反引号
Use the `printf()` function.

``There is a literal backtick (`) here.针对在代码区段内插入反引号的情况`` 

强调：
*斜体强调*
**粗体强调**

图片
![Alt text](http://www.izhangbo.cn/wp-content/themes/minty/img/logo.png &quot;Optional title&quot;)

使用 icon 图标文字
&lt;i class=&quot;icon-cog&quot;&gt;&lt;/i&gt;

段落：以一个空行开始，以一个空行结束，中间的就是一个段落。

表格：

Item     | Value
-------- | ---
Computer | $1600
Phone    | $12
Pipe     | $1

无序列表：使用 - 加一个空格（）

- 无需列表1
- 无序列表2
- 无序列表3

有序列表：使用 数字 加一个英文句点

1. 有序列表
2. 有序列表
3. 有序列表
4. 有序列表
5. 有序列表

换行缩进形成代码区块

    这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。    

块引用
&gt;给引用的文本开始位置都加一个 &apos;&gt;&apos;，
&gt;便可组成一个块引用。在块引用中，可以结合
&gt;其他markdown元素一块使用，比如列表。
&gt;**强调**
也可以只在第一行加大于号，其他位置不加。

&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行
&gt;- 记得加空格哦。</code></pre>]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>ReadMe Guide</title>
    <url>/posts/18557.html</url>
    <content><![CDATA[<pre><code>ReadMe.md 语法指导</code></pre><p>===========================<br>该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为<code>GitHub Flavored Markdown</code>。简称<code>GFM</code>，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。</p>
<p>===========================</p>
<p>##<a name="index"/>目录</p>
<ul>
<li><a href="#line">横线</a></li>
<li><a href="#title">标题</a></li>
<li><a href="#text">文本</a><ul>
<li>普通文本</li>
<li>单行文本</li>
<li>多行文本</li>
<li>文字高亮</li>
</ul>
</li>
<li><a href="#link">链接</a> <ul>
<li>文字超链接<ul>
<li>链接外部URL</li>
<li>链接本仓库里的URL</li>
</ul>
</li>
<li>锚点</li>
<li><a href="#piclink">图片超链接</a></li>
</ul>
</li>
<li><a href="#pic">图片</a><ul>
<li>来源于网络的图片</li>
<li>GitHub仓库中的图片</li>
</ul>
</li>
<li><a href="#dot">列表</a><ul>
<li>圆点列表</li>
<li>数字列表</li>
<li>复选框列表</li>
</ul>
</li>
<li><a href="#blockquotes">块引用</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#table">表格</a> </li>
<li><a href="#emoji">表情</a></li>
</ul>
<a name="line"/>
##***、---、___显示虚横线
***
---
___



<a name="title"/>
#一级标题
##二级标题
###三级标题
####四级标题
#####五级标题
######六级标题


<p>##<a name="text"/>显示文本<br>###普通文本<br>这是一段普通的文本<br>####关于换行<br>直接回车不能换行，<br><br>可以使用&lt;br&gt;。<br>但是使用html标签就丧失了markdown的意义。<br>可以在上一行文本后面补两个空格，<br>这样下一行的文本就换行了。</p>
<p>或者就是在两行文本直接加一个空行。</p>
<p>也能实现换行效果，不过这个行间距有点大。<br>###单行文本<br>    Hello,大家好，我是果冻虾仁。<br>###文本块<br>    欢迎到访<br>    很高兴见到您<br>    祝您，早上好，中午好，下午好，晚安<br>###部分文字高亮<br>Thank <code>You</code> . Please <code>Call</code> Me <code>Coder</code><br>####高亮功能更适合做一篇文章的tag<br>例如:<br><br><code>java</code> <code>网络编程</code> <code>Socket</code> <code>全双工</code><br>####删除线<br>这是一个 <del>删除线</del><br>####斜体<br><em>斜体1</em></p>
<p><em>斜体2</em><br>####粗体<br><strong>粗体1</strong></p>
<p><strong>粗体2</strong></p>
<p>####组合使用粗体、斜体和删除线<br><strong><em>斜粗体1</em></strong></p>
<p><strong><em>斜粗体2</em></strong></p>
<p><strong><em><del>斜粗体删除线1</del></em></strong></p>
<p><del><strong><em>斜粗体删除线2</em></strong></del></p>
<p>##<a name="link"/>链接<br>###链接外部URL<br><a href="http://blog.csdn.net/guodongxiaren" target="_blank" rel="noopener external nofollow noreferrer" title="悬停显示">我的博客</a>   语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[我的博客](http:&#x2F;&#x2F;blog.csdn.net&#x2F;guodongxiaren &quot;悬停显示&quot;)</span><br></pre></td></tr></table></figure>
<p>###链接的另一种写法<br><a href="http://blog.csdn.net/guodongxiaren" target="_blank" rel="noopener external nofollow noreferrer" title="悬停显示">我的博客</a>  </p>
<p>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[我的博客][id]</span><br><span class="line">[id]:http:&#x2F;&#x2F;blog.csdn.net&#x2F;guodongxiaren &quot;悬停显示&quot;</span><br></pre></td></tr></table></figure>
<p>中括号[ ]里的id，可以是数字，字母等的组合。这两行可以不连着写，<strong>一般把第二行的链接统一放在文章末尾</strong>，id上下对应就行了。这样正文看起来会比较干净。</p>
<p>###链接本仓库里的URL<br><a href="./Book">Book</a><br>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Book](.&#x2F;Book)</span><br></pre></td></tr></table></figure>
<p>如果文件要引用的文件不存在，则待点击的文本为红色。引用的文件存在存在则文本为蓝色。<br>###锚点<br>我们可以使用HTML的锚点标签（<code>#</code>）来设置锚点：<a href="#index">回到目录</a><br>但其实呢，每一个标题都是一个锚点，不需要用标签来指定，比如我们 <a href="#TEST">回到顶部</a><br>不过不幸的是，由于对中文支持的不好，所以中文标题貌似是不能视作标签的。</p>
<p>##<a name="pic"/>显示图片<br>###来源于网络的图片<br><img src= "/img/loading.gif" data-src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"><br><img src= "/img/loading.gif" data-src="https://assets-cdn.github.com/images/modules/contact/goldstar.gif" alt=""></p>
<p>###GitHub仓库中的图片<br><img src= "/img/loading.gif" data-src="https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif" alt=""><br>###<a name="piclink">给图片加上超链接<br>####第一种</p>
<p><a href="http://blog.csdn.net/guodongxiaren/article/details/23690801" target="_blank" rel="noopener external nofollow noreferrer">![head]</a><br>[head]:<a href="https://github.com/guodongxiaren/ImageCache/raw/master/Logo/jianxin.jpg" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/guodongxiaren/ImageCache/raw/master/Logo/jianxin.jpg</a> “点击图片进入我的博客”</p>
<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p><a href="http://www.baidu.com" target="_blank" rel="noopener external nofollow noreferrer"><img src= "/img/loading.gif" data-src="http://www.baidu.com/img/bdlogo.gif" alt="内容任意" title="百度logo"></a></p>
<p>##<a name="dot"/>列表<br>###圆点列表</p>
<ul>
<li>昵称：果冻虾仁</li>
<li>别名：隔壁老王</li>
<li>英文名：Jelly</li>
</ul>
<p>###更多圆点</p>
<ul>
<li>编程语言<ul>
<li>脚本语言<ul>
<li>Python</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>###数字列表<br>####一般效果<br>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。<br>面向对象的三个基本特征：</p>
<ol>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ol>
<p>####数字列表自动排序<br>也可以在第一行指定<code>1.</code>，而接下来的几行用星号<code>*</code>（或者继续用数字1. ）就可以了，它会自动显示成2、3、4……。<br>面向对象的七大原则：</p>
<ol>
<li>开闭原则</li>
</ol>
<ul>
<li>里氏转换原则</li>
<li>依赖倒转原则</li>
<li>接口隔离原则</li>
<li>组合/聚合复用原则</li>
<li>“迪米特”法则</li>
<li>单一直则原则</li>
</ul>
<p>####多级数字列表<br>和圆点的列表一样，数字列表也有多级结构：  </p>
<ol>
<li>这是一级的数字列表，数字1还是1<ol>
<li>这是二级的数字列表，阿拉伯数字在显示的时候变成了罗马数字<ol>
<li>这是三级的数字列表，数字在显示的时候变成了英文字母<ol>
<li>四级的数字列表显示效果，就不再变化了，依旧是英文字母</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><ul>
<li><input checked="" disabled="" type="checkbox"> C</li>
<li><input checked="" disabled="" type="checkbox"> C++</li>
<li><input checked="" disabled="" type="checkbox"> Java</li>
<li><input checked="" disabled="" type="checkbox"> Qt</li>
<li><input checked="" disabled="" type="checkbox"> Android</li>
<li><input disabled="" type="checkbox"> C#</li>
<li><input disabled="" type="checkbox"> .NET</li>
</ul>
<p>您可以使用这个功能来标注某个项目各项任务的完成情况。<br>##<a name="blockquotes"/>块引用</p>
<p>###常用于引用文本<br>####文本摘自《深入理解计算机系统》P27<br>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p>
<blockquote>
<p><b>“端”（endian）的起源</b><br><br>以下是Jonathan Swift在1726年关于大小端之争历史的描述：<br><br>“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p>
</blockquote>
<p>###块引用有多级结构</p>
<blockquote>
<p>数据结构</p>
<blockquote>
<p>树</p>
<blockquote>
<p>二叉树</p>
<blockquote>
<p>平衡二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>##<a name="code"/>代码高亮</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;&#125; <span class="comment">//Java</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> <span class="comment">//C</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello GitHub"</span><span class="comment">#Bash</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myH1"</span>).innerHTML=<span class="string">"Welcome to my Homepage"</span>; <span class="comment">//javascipt</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">string</span>&amp; A,<span class="keyword">const</span> <span class="built_in">string</span>&amp; B) <span class="comment">//cpp</span></span><br></pre></td></tr></table></figure>
<p>##<a name="table"/>显示表格<br>表头1  | 表头2<br>————- | ————-<br>Content Cell  | Content Cell<br>Content Cell  | Content Cell</p>
<table>
<thead>
<tr>
<th>表头1</th>
<th>表头2</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Help</td>
<td>Display the help window.</td>
</tr>
<tr>
<td>Close</td>
<td>Closes a window</td>
</tr>
</tbody></table>
<p>表格中也可以使用普通文本的删除线，斜体等效果</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Help</td>
<td><del>Display the</del> help window.</td>
</tr>
<tr>
<td>Close</td>
<td><em>Closes</em> a window</td>
</tr>
</tbody></table>
<p>表格可以指定对齐方式</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="center">居中</th>
<th align="right">右对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<p>表格中嵌入图片</p>
<table>
<thead>
<tr>
<th>图片</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><img src= "/img/loading.gif" data-src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td>
<td>baidu</td>
</tr>
</tbody></table>
<p>##<a name="emoji"/>添加表情<br>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p>
<p>比如<code>:blush:</code>，可以显示:blush:。</p>
<p>具体每一个表情的符号码，可以查询GitHub的官方网页<a href="http://www.emoji-cheat-sheet.com" target="_blank" rel="noopener external nofollow noreferrer">http://www.emoji-cheat-sheet.com</a>。</p>
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习整理</title>
    <url>/posts/64075.html</url>
    <content><![CDATA[<pre><code>mysql学习内容整理、存储引擎、索引、性能优化、切分</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一存储引擎">一、存储引擎</a><ul>
<li><a href="#innodb">InnoDB</a></li>
<li><a href="#myisam">MyISAM</a></li>
<li><a href="#比较">比较</a></li>
</ul>
</li>
<li><a href="#二数据类型">二、数据类型</a><ul>
<li><a href="#整型">整型</a></li>
<li><a href="#浮点数">浮点数</a></li>
<li><a href="#字符串">字符串</a></li>
<li><a href="#时间和日期">时间和日期</a></li>
</ul>
</li>
<li><a href="#三索引">三、索引</a><ul>
<li><a href="#b-tree-原理">B+ Tree 原理</a></li>
<li><a href="#索引分类">索引分类</a></li>
<li><a href="#索引的优点">索引的优点</a></li>
<li><a href="#索引优化">索引优化</a></li>
</ul>
</li>
<li><a href="#四查询性能优化">四、查询性能优化</a><ul>
<li><a href="#使用-explain-进行分析">使用 Explain 进行分析</a></li>
<li><a href="#优化数据访问">优化数据访问</a></li>
<li><a href="#重构查询方式">重构查询方式</a></li>
</ul>
</li>
<li><a href="#五切分">五、切分</a><ul>
<li><a href="#水平切分">水平切分</a></li>
<li><a href="#垂直切分">垂直切分</a></li>
<li><a href="#sharding-策略">Sharding 策略</a></li>
<li><a href="#sharding-存在的问题及解决方案">Sharding 存在的问题及解决方案</a></li>
</ul>
</li>
<li><a href="#六复制">六、复制</a><ul>
<li><a href="#主从复制">主从复制</a></li>
<li><a href="#读写分离">读写分离</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h1><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>InnoDB 是 MySQL 默认的事务型存储引擎，只有在需要 InnoDB 不支持的特性时，才考虑使用其它存储引擎。</p>
<p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ 间隙锁（next-key locking）防止幻影读。</p>
<p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>
<p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>
<p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p>
<h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>MyISAM 设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用 MyISAM。</p>
<p>MyISAM 提供了大量的特性，包括压缩表、空间数据索引等。</p>
<p>不支持事务。</p>
<p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p>
<p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p>
<p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul>
<li><p>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</p>
</li>
<li><p>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</p>
</li>
<li><p>外键：InnoDB 支持外键。</p>
</li>
<li><p>备份：InnoDB 支持在线热备份。</p>
</li>
<li><p>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</p>
</li>
<li><p>其它特性：MyISAM 支持压缩表和空间数据索引。</p>
</li>
</ul>
<h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。</p>
<p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p>
<p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p>
<p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p>
<p>VARCHAR 会保留字符串末尾的空格，而 CHAR 会删除。</p>
<h2 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h2><p>MySQL 提供了两种相似的日期时间类型：DATETIME 和 TIMESTAMP。</p>
<h3 id="1-DATETIME"><a href="#1-DATETIME" class="headerlink" title="1. DATETIME"></a>1. DATETIME</h3><p>能够保存从 1001 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p>
<p>它与时区无关。</p>
<p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATETIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p>
<h3 id="2-TIMESTAMP"><a href="#2-TIMESTAMP" class="headerlink" title="2. TIMESTAMP"></a>2. TIMESTAMP</h3><p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年 到 2038 年。</p>
<p>它和时区有关，也就是说一个时间戳在不同的时区所代表的具体时间是不同的。</p>
<p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p>
<p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p>
<p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p>
<h1 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h1><p>索引能够轻易将查询性能提升几个数量级。</p>
<p>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。对于中到大型的表，索引就非常有效。但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</p>
<p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p>
<h2 id="B-Tree-原理"><a href="#B-Tree-原理" class="headerlink" title="B+ Tree 原理"></a>B+ Tree 原理</h2><h3 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h3><p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树时一颗查找树，并且所有叶子节点位于同一层。</p>
<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>
<p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key<sub>i</sub> 和 key<sub>i+1</sub>，且不为 null，则该指针指向节点的所有 key 大于等于 key<sub>i</sub> 且小于等于 key<sub>i+1</sub>。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//061c88c1-572f-424f-b580-9cbce903a3fe.png"/> </div><br>

<h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p>
<p>插入删除操作记录会破坏平衡树的平衡性，因此在插入删除时，需要对树进行一个分裂、合并、旋转等操作。</p>
<h3 id="3-与红黑树的比较"><a href="#3-与红黑树的比较" class="headerlink" title="3. 与红黑树的比较"></a>3. 与红黑树的比较</h3><p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因：</p>
<p>（一）更少的检索次数</p>
<p>平衡树检索数据的时间复杂度等于树高 h，而树高大致为 O(h)=O(log<sub>d</sub>N)，其中 d 为每个节点的出度。</p>
<p>红黑树的出度为 2，而 B+ Tree 的出度一般都非常大。红黑树的树高 h 很明显比 B+ Tree 大非常多，因此检索的次数也就更多。</p>
<p>（二）利用计算机预读特性</p>
<p>为了减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的旋转时间，因此速度会非常快。</p>
<p>操作系统一般将内存和磁盘分割成固态大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点，并且可以利用预读特性，相邻的节点也能够被预先载入。</p>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="1-B-Tree-索引"><a href="#1-B-Tree-索引" class="headerlink" title="1. B+Tree 索引"></a>1. B+Tree 索引</h3><p>B+Tree 索引是大多数 MySQL 存储引擎的默认索引类型。</p>
<p>因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。除了用于查找，还可以用于排序和分组。</p>
<p>可以指定多个列作为索引列，多个索引列共同组成键。</p>
<p>B+Tree 索引适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。</p>
<p>如果不是按照索引列的顺序进行查找，则无法使用索引。</p>
<p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。</p>
<p>主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//c28c6fbc-2bc1-47d9-9b2e-cf3d4034f877.jpg"/> </div><br>

<p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//7ab8ca28-2a41-4adf-9502-cc0a21e63b51.jpg"/> </div><br>

<h3 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2. 哈希索引"></a>2. 哈希索引</h3><p>InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p>
<p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性，它具有以下限制：</p>
<ul>
<li>无法用于排序与分组；</li>
<li>只支持精确查找，无法用于部分查找和范围查找；</li>
</ul>
<h3 id="3-全文索引"><a href="#3-全文索引" class="headerlink" title="3. 全文索引"></a>3. 全文索引</h3><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p>
<p>全文索引一般使用倒排索引实现，它记录着关键词到其所在文档的映射。</p>
<p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p>
<h3 id="4-空间数据索引（R-Tree）"><a href="#4-空间数据索引（R-Tree）" class="headerlink" title="4. 空间数据索引（R-Tree）"></a>4. 空间数据索引（R-Tree）</h3><p>MyISAM 存储引擎支持空间数据索引，可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p>
<p>必须使用 GIS 相关的函数来维护数据。</p>
<h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul>
<li><p>大大减少了服务器需要扫描的数据行数。</p>
</li>
<li><p>帮助服务器避免进行排序和创建临时表（B+Tree 索引是有序的，可以用来做 ORDER BY 和 GROUP BY 操作）；</p>
</li>
<li><p>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，也就将相邻的数据都存储在一起）。</p>
</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="1-独立的列"><a href="#1-独立的列" class="headerlink" title="1. 独立的列"></a>1. 独立的列</h3><p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p>
<p>例如下面的查询不能使用 actor_id 列的索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> actor_id <span class="keyword">FROM</span> sakila.actor <span class="keyword">WHERE</span> actor_id + <span class="number">1</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-多列索引"><a href="#2-多列索引" class="headerlink" title="2. 多列索引"></a>2. 多列索引</h3><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> film_id, actor_ <span class="keyword">id</span> <span class="keyword">FROM</span> sakila.film_actor</span><br><span class="line"><span class="keyword">WHERE</span> actor_id = <span class="number">1</span> <span class="keyword">AND</span> film_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-索引列的顺序"><a href="#3-索引列的顺序" class="headerlink" title="3. 索引列的顺序"></a>3. 索引列的顺序</h3><p>让选择性最强的索引列放在前面，索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，查询效率也越高。</p>
<p>例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> staff_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> staff_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> customer_id)/<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> customer_id_selectivity,</span><br><span class="line"><span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> payment;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   staff_id_selectivity: 0.0001</span><br><span class="line">customer_id_selectivity: 0.0373</span><br><span class="line">               COUNT(*): 16049</span><br></pre></td></tr></table></figure>

<h3 id="4-前缀索引"><a href="#4-前缀索引" class="headerlink" title="4. 前缀索引"></a>4. 前缀索引</h3><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p>
<p>对于前缀长度的选取需要根据索引选择性来确定。</p>
<h3 id="5-覆盖索引"><a href="#5-覆盖索引" class="headerlink" title="5. 覆盖索引"></a>5. 覆盖索引</h3><p>索引包含所有需要查询的字段的值。</p>
<p>具有以下优点：</p>
<ul>
<li>因为索引条目通常远小于数据行的大小，所以若只读取索引，能大大减少数据访问量。</li>
<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>
<li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</li>
</ul>
<h1 id="四、查询性能优化"><a href="#四、查询性能优化" class="headerlink" title="四、查询性能优化"></a>四、查询性能优化</h1><h2 id="使用-Explain-进行分析"><a href="#使用-Explain-进行分析" class="headerlink" title="使用 Explain 进行分析"></a>使用 Explain 进行分析</h2><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p>
<p>比较重要的字段有：</p>
<ul>
<li>select_type : 查询类型，有简单查询、联合查询、子查询等</li>
<li>key : 使用的索引</li>
<li>rows : 扫描的行数</li>
</ul>
<p>更多内容请参考：<a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener external nofollow noreferrer">MySQL 性能优化神器 Explain 使用分析</a></p>
<h2 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h2><h3 id="1-减少请求的数据量"><a href="#1-减少请求的数据量" class="headerlink" title="1. 减少请求的数据量"></a>1. 减少请求的数据量</h3><p>（一）只返回必要的列</p>
<p>最好不要使用 SELECT * 语句。</p>
<p>（二）只返回必要的行</p>
<p>使用 WHERE 语句进行查询过滤，有时候也需要使用 LIMIT 语句来限制返回的数据。</p>
<p>（三）缓存重复查询的数据</p>
<p>使用缓存可以避免在数据库中进行查询，特别要查询的数据经常被重复查询，缓存可以带来的查询性能提升将会是非常明显的。</p>
<h3 id="2-减少服务器端扫描的行数"><a href="#2-减少服务器端扫描的行数" class="headerlink" title="2. 减少服务器端扫描的行数"></a>2. 减少服务器端扫描的行数</h3><p>最有效的方式是使用索引来覆盖查询。</p>
<h2 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h2><h3 id="1-切分大查询"><a href="#1-切分大查询" class="headerlink" title="1. 切分大查询"></a>1. 切分大查询</h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELEFT FROM messages WHERE <span class="keyword">create</span> &lt; <span class="keyword">DATE_SUB</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">rows_affected = 0</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    rows_affected = do_query(</span><br><span class="line">    <span class="string">"DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> rows_affected &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="2-分解大连接查询"><a href="#2-分解大连接查询" class="headerlink" title="2. 分解大连接查询"></a>2. 分解大连接查询</h3><p>将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：</p>
<ul>
<li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li>
<li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li>
<li>减少锁竞争；</li>
<li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。</li>
<li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab</span><br><span class="line"><span class="keyword">JOIN</span> tag_post <span class="keyword">ON</span> tag_post.tag_id=tag.id</span><br><span class="line"><span class="keyword">JOIN</span> post <span class="keyword">ON</span> tag_post.post_id=post.id</span><br><span class="line"><span class="keyword">WHERE</span> tag.tag=<span class="string">'mysql'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tag <span class="keyword">WHERE</span> tag=<span class="string">'mysql'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tag_post <span class="keyword">WHERE</span> tag_id=<span class="number">1234</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> post <span class="keyword">WHERE</span> post.id <span class="keyword">IN</span> (<span class="number">123</span>,<span class="number">456</span>,<span class="number">567</span>,<span class="number">9098</span>,<span class="number">8904</span>);</span><br></pre></td></tr></table></figure>

<h1 id="五、切分"><a href="#五、切分" class="headerlink" title="五、切分"></a>五、切分</h1><h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//63c2909f-0c5f-496f-9fe5-ee9176b31aba.jpg"/> </div><br>

<p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p>
<p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p>
<h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//e130e5b8-b19a-4f1e-b860-223040525cf6.jpg"/> </div><br>

<p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p>
<p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库 payDB、用户数据库 userDB 等。</p>
<h2 id="Sharding-策略"><a href="#Sharding-策略" class="headerlink" title="Sharding 策略"></a>Sharding 策略</h2><ul>
<li>哈希取模：hash(key) % NUM_DB</li>
<li>范围：可以是 ID 范围也可以是时间范围</li>
<li>映射表：使用单独的一个数据库来存储映射关系</li>
</ul>
<h2 id="Sharding-存在的问题及解决方案"><a href="#Sharding-存在的问题及解决方案" class="headerlink" title="Sharding 存在的问题及解决方案"></a>Sharding 存在的问题及解决方案</h2><h3 id="1-事务问题"><a href="#1-事务问题" class="headerlink" title="1. 事务问题"></a>1. 事务问题</h3><p>使用分布式事务来解决，比如 XA 接口。</p>
<h3 id="2-JOIN"><a href="#2-JOIN" class="headerlink" title="2. JOIN"></a>2. JOIN</h3><p>可以将原来的 JOIN 查询分解成多个单表查询，然后在用户程序中进行 JOIN。</p>
<h3 id="3-ID-唯一性"><a href="#3-ID-唯一性" class="headerlink" title="3. ID 唯一性"></a>3. ID 唯一性</h3><ul>
<li>使用全局唯一 ID：GUID。</li>
<li>为每个分片指定一个 ID 范围。</li>
<li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)。</li>
</ul>
<p>更多内容请参考：</p>
<ul>
<li><a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6" target="_blank" rel="noopener external nofollow noreferrer">How Sharding Works</a></li>
<li><a href="https://tech.meituan.com/dianping_order_db_sharding.html" target="_blank" rel="noopener external nofollow noreferrer">大众点评订单系统分库分表实践</a></li>
</ul>
<h1 id="六、复制"><a href="#六、复制" class="headerlink" title="六、复制"></a>六、复制</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p>
<ul>
<li><strong>binlog 线程</strong> ：负责将主服务器上的数据更改写入二进制文件（binlog）中。</li>
<li><strong>I/O 线程</strong> ：负责从主服务器上读取二进制日志文件，并写入从服务器的中继日志中。</li>
<li><strong>SQL 线程</strong> ：负责读取中继日志并重放其中的 SQL 语句。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//master-slave.png"/> </div><br>

<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作。</p>
<p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p>
<p>MySQL 读写分离能提高性能的原因在于：</p>
<ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>
<li>从服务器可以配置 MyISAM 引擎，提升查询性能以及节约系统开销；</li>
<li>增加冗余，提高可用性。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//master-slave-proxy.png"/> </div><br>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>BaronScbwartz, PeterZaitsev, VadimTkacbenko, 等. 高性能 MySQL[M]. 电子工业出版社, 2013.</li>
<li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html" target="_blank" rel="noopener external nofollow noreferrer">20+ 条 MySQL 性能优化的最佳经验</a></li>
<li><a href="http://blog.720ui.com/2017/mysql_core_09_multi_db_table2/" target="_blank" rel="noopener external nofollow noreferrer" title="服务端指南 数据存储篇 | MySQL（09） 分库与分表带来的分布式困境与应对之策">服务端指南 数据存储篇 | MySQL（09） 分库与分表带来的分布式困境与应对之策</a></li>
<li><a href="https://stackoverflow.com/questions/788829/how-to-create-unique-row-id-in-sharded-databases" target="_blank" rel="noopener external nofollow noreferrer">How to create unique row ID in sharded databases?</a></li>
<li><a href="http://geekswithblogs.net/shaunxu/archive/2012/01/07/sql-azure-federation-ndash-introduction.aspx" target="_blank" rel="noopener external nofollow noreferrer" title="Title of this entry.">SQL Azure Federation – Introduction</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener external nofollow noreferrer">MySQL 索引背后的数据结构及算法原理</a></li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-字符串相关操作</title>
    <url>/posts/36806.html</url>
    <content><![CDATA[<p>   <strong>Python 字符串操作</strong><br>（string替换、删除、截取、复制、连接、比较、查找、包含、大小写转换）</p>
<h3 id="一、去空格及特殊符号"><a href="#一、去空格及特殊符号" class="headerlink" title="一、去空格及特殊符号"></a>一、去空格及特殊符号</h3><pre><code>s.strip().lstrip().rstrip(&apos;,&apos;)</code></pre><h3 id="二、复制字符串"><a href="#二、复制字符串" class="headerlink" title="二、复制字符串"></a>二、复制字符串</h3><pre><code>#strcpy(sStr1,sStr2)
sStr1 = &apos;strcpy&apos;
sStr2 = sStr1
sStr1 = &apos;strcpy2&apos;
print(sStr2)</code></pre><h3 id="三、连接字符串"><a href="#三、连接字符串" class="headerlink" title="三、连接字符串"></a>三、连接字符串</h3><pre><code>#strcat(sStr1,sStr2)
sStr1 = &apos;strcat&apos;
sStr2 = &apos;append&apos;
sStr1 += sStr2
print(sStr1)</code></pre><h3 id="四、查找字符"><a href="#四、查找字符" class="headerlink" title="四、查找字符"></a>四、查找字符</h3><pre><code>#strchr(sStr1,sStr2)
# &lt; 0 为未找到
sStr1 = &apos;strchr&apos;
sStr2 = &apos;s&apos;
nPos = sStr1.index(sStr2)
print(nPos)</code></pre><h3 id="五、比较字符串"><a href="#五、比较字符串" class="headerlink" title="五、比较字符串"></a>五、比较字符串</h3><pre><code>#strcmp(sStr1,sStr2)
sStr1 = &apos;strchr&apos;
sStr2 = &apos;strch&apos;
print(cmp(sStr1,sStr2))</code></pre><h3 id="六、扫描字符串是否包含指定的字符"><a href="#六、扫描字符串是否包含指定的字符" class="headerlink" title="六、扫描字符串是否包含指定的字符"></a>六、扫描字符串是否包含指定的字符</h3><pre><code>#strspn(sStr1,sStr2)
sStr1 = &apos;12345678&apos;
sStr2 = &apos;456&apos;
#sStr1 and chars both in sStr1 and sStr2
print(len(sStr1 and sStr2))</code></pre><h3 id="七、字符串长度"><a href="#七、字符串长度" class="headerlink" title="七、字符串长度"></a>七、字符串长度</h3><pre><code>#strlen(sStr1)
sStr1 = &apos;strlen&apos;
print(len(sStr1))</code></pre><h3 id="八、将字符串中的大小写转换"><a href="#八、将字符串中的大小写转换" class="headerlink" title="八、将字符串中的大小写转换"></a>八、将字符串中的大小写转换</h3><pre><code>#strlwr(sStr1)
sStr1 = &apos;JCstrlwr&apos;
sStr1 = sStr1.upper()
#sStr1 = sStr1.lower()
print(sStr1)</code></pre><h3 id="九、追加指定长度的字符串"><a href="#九、追加指定长度的字符串" class="headerlink" title="九、追加指定长度的字符串"></a>九、追加指定长度的字符串</h3><pre><code>#strncat(sStr1,sStr2,n)
sStr1 = &apos;12345&apos;
sStr2 = &apos;abcdef&apos;
n = 3
sStr1 += sStr2[0:n]
print(sStr1)</code></pre><h3 id="十、字符串指定长度比较"><a href="#十、字符串指定长度比较" class="headerlink" title="十、字符串指定长度比较"></a>十、字符串指定长度比较</h3><pre><code>#strncmp(sStr1,sStr2,n)
sStr1 = &apos;12345&apos;
sStr2 = &apos;123bc&apos;
n = 3
print( cmp(sStr1[0:n],sStr2[0:n]))</code></pre><h3 id="十一、复制指定长度的字符"><a href="#十一、复制指定长度的字符" class="headerlink" title="十一、复制指定长度的字符"></a>十一、复制指定长度的字符</h3><pre><code>#strncpy(sStr1,sStr2,n)
sStr1 = &apos;&apos;
sStr2 = &apos;12345&apos;
n = 3
sStr1 = sStr2[0:n]
print(sStr1)</code></pre><h3 id="十二、将字符串前n个字符替换为指定的字符"><a href="#十二、将字符串前n个字符替换为指定的字符" class="headerlink" title="十二、将字符串前n个字符替换为指定的字符"></a>十二、将字符串前n个字符替换为指定的字符</h3><pre><code>#strnset(sStr1,ch,n)
sStr1 = &apos;12345&apos;
ch = &apos;r&apos;
n = 3
sStr1 = n * ch + sStr1[3:]
print(sStr1)</code></pre><h3 id="十三、扫描字符串"><a href="#十三、扫描字符串" class="headerlink" title="十三、扫描字符串"></a>十三、扫描字符串</h3><pre><code>#strpbrk(sStr1,sStr2)
sStr1 = &apos;cekjgdklab&apos;
sStr2 = &apos;gka&apos;
nPos = -1
for c in sStr1:
    if c in sStr2:
        nPos = sStr1.index(c)
        break
print( nPos)</code></pre><h3 id="十四、翻转字符串"><a href="#十四、翻转字符串" class="headerlink" title="十四、翻转字符串"></a>十四、翻转字符串</h3><pre><code>#strrev(sStr1)
sStr1 = &apos;abcdefg&apos;
sStr1 = sStr1[::-1]
print(sStr1)</code></pre><h3 id="十五、查找字符串"><a href="#十五、查找字符串" class="headerlink" title="十五、查找字符串"></a>十五、查找字符串</h3><pre><code>#strstr(sStr1,sStr2)
sStr1 = &apos;abcdefg&apos;
sStr2 = &apos;cde&apos;
print(sStr1.find(sStr2))</code></pre><h3 id="十六、分割字符串"><a href="#十六、分割字符串" class="headerlink" title="十六、分割字符串"></a>十六、分割字符串</h3><pre><code>#strtok(sStr1,sStr2)
sStr1 = &apos;ab,cde,fgh,ijk&apos;
sStr2 = &apos;,&apos;
sStr1 = sStr1[sStr1.find(sStr2) + 1:]
print(sStr1)
#或者
s = &apos;ab,cde,fgh,ijk&apos;
print(s.split(&apos;,&apos;))</code></pre><h3 id="十七、连接字符串"><a href="#十七、连接字符串" class="headerlink" title="十七、连接字符串"></a>十七、连接字符串</h3><pre><code>delimiter = &apos;,&apos;
mylist = [&apos;Brazil&apos;, &apos;Russia&apos;, &apos;India&apos;, &apos;China&apos;]
print(delimiter.join(mylist))
PHP 中 addslashes 的实现
def addslashes(s):
    d = {&apos;&quot;&apos;:&apos;\\&quot;&apos;, &quot;&apos;&quot;:&quot;\\&apos;&quot;, &quot;\0&quot;:&quot;\\\0&quot;, &quot;\\&quot;:&quot;\\\\&quot;}
    return &apos;&apos;.join(d.get(c, c) for c in s) 
s = &quot;John &apos;Johny&apos; Doe (a.k.a. \&quot;Super Joe\&quot;)\\\0&quot;
print(s)
print( addslashes(s))</code></pre><h3 id="十八、只显示字母与数字"><a href="#十八、只显示字母与数字" class="headerlink" title="十八、只显示字母与数字"></a>十八、只显示字母与数字</h3><pre><code>def OnlyCharNum(s,oth=&apos;&apos;):
    s2 = s.lower();
    fomart = &apos;abcdefghijklmnopqrstuvwxyz0123456789&apos;
    for c in s2:
        if not c in fomart:
            s = s.replace(c,&apos;&apos;);
    return s;

print(OnlyStr(&quot;a000 aa-b&quot;))</code></pre><h3 id="十九、截取字符串"><a href="#十九、截取字符串" class="headerlink" title="十九、截取字符串"></a>十九、截取字符串</h3><pre><code>str = ’0123456789′
print str[0:3] #截取第一位到第三位的字符
print str[:] #截取字符串的全部字符
print str[6:] #截取第七个字符到结尾
print str[:-3] #截取从头开始到倒数第三个字符之前
print str[2] #截取第三个字符
print str[-1] #截取倒数第一个字符
print str[::-1] #创造一个与原字符串顺序相反的字符串
print str[-3:-1] #截取倒数第三位与倒数第一位之前的字符
print str[-3:] #截取倒数第三位到结尾
print str[:-5:-3] #逆序截取，具体啥意思没搞明白？</code></pre><h3 id="二十、直接贴过来"><a href="#二十、直接贴过来" class="headerlink" title="二十、直接贴过来"></a>二十、直接贴过来</h3><pre><code>str = &quot;Hello My friend&quot;
字符串是一个整体。如果你想直接修改字符串的某一部分，是不可能的。但我们能够读出字符串的某一部分。
子字符串的提取
str[:6]
字符串包含判断操作符：in，not in
&quot;He&quot; in str
&quot;she&quot; not in str

string模块，还提供了很多方法，如
S.find(substring, [start [,end]]) #可指范围查找子串，返回索引值，否则返回-1
S.rfind(substring,[start [,end]]) #反向查找
S.index(substring,[start [,end]]) #同find，只是找不到产生ValueError异常
S.rindex(substring,[start [,end]])#同上反向查找
S.count(substring,[start [,end]]) #返回找到子串的个数

S.lowercase()
S.capitalize()      #首字母大写
S.lower()           #转小写
S.upper()           #转大写
S.swapcase()        #大小写互换

S.split(str, &apos; &apos;)   #将string转list，以空格切分
S.join(list, &apos; &apos;)   #将list转string，以空格连接

处理字符串的内置函数
len(str)                #串长度
cmp(&quot;my friend&quot;, str)   #字符串比较。第一个大，返回1
max(&apos;abcxyz&apos;)           #寻找字符串中最大的字符
min(&apos;abcxyz&apos;)           #寻找字符串中最小的字符

string的转换

float(str) #变成浮点数，float(&quot;1e-1&quot;)  结果为0.1
int(str)        #变成整型，  int(&quot;12&quot;)  结果为12
int(str,base)   #变成base进制整型数，int(&quot;11&quot;,2) 结果为2
long(str)       #变成长整型，
long(str,base)  #变成base进制长整型，

字符串的格式化（注意其转义字符，大多如C语言的，略）
str_format % (参数列表) #参数列表是以tuple的形式定义的，即不可运行中改变
&gt;&gt;&gt;print &quot;&quot;%s&apos;s height is %dcm&quot; % (&quot;My brother&quot;, 180)
          #结果显示为 My brother&apos;s height is 180cm</code></pre>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Radis学习整理</title>
    <url>/posts/55138.html</url>
    <content><![CDATA[<pre><code>Radis缓存技术知识、数据类型、使用场景、数据持久化、事务等</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一概述">一、概述</a></li>
<li><a href="#二数据类型">二、数据类型</a><ul>
<li><a href="#string">STRING</a></li>
<li><a href="#list">LIST</a></li>
<li><a href="#set">SET</a></li>
<li><a href="#hash">HASH</a></li>
<li><a href="#zset">ZSET</a></li>
</ul>
</li>
<li><a href="#三数据结构">三、数据结构</a><ul>
<li><a href="#字典">字典</a></li>
<li><a href="#跳跃表">跳跃表</a></li>
</ul>
</li>
<li><a href="#四使用场景">四、使用场景</a><ul>
<li><a href="#计数器">计数器</a></li>
<li><a href="#缓存">缓存</a></li>
<li><a href="#查找表">查找表</a></li>
<li><a href="#消息队列">消息队列</a></li>
<li><a href="#会话缓存">会话缓存</a></li>
<li><a href="#分布式锁实现">分布式锁实现</a></li>
<li><a href="#其它">其它</a></li>
</ul>
</li>
<li><a href="#五redis-与-memcached">五、Redis 与 Memcached</a><ul>
<li><a href="#数据类型">数据类型</a></li>
<li><a href="#数据持久化">数据持久化</a></li>
<li><a href="#分布式">分布式</a></li>
<li><a href="#内存管理机制">内存管理机制</a></li>
</ul>
</li>
<li><a href="#六键的过期时间">六、键的过期时间</a></li>
<li><a href="#七数据淘汰策略">七、数据淘汰策略</a></li>
<li><a href="#八持久化">八、持久化</a><ul>
<li><a href="#rdb-持久化">RDB 持久化</a></li>
<li><a href="#aof-持久化">AOF 持久化</a></li>
</ul>
</li>
<li><a href="#九事务">九、事务</a></li>
<li><a href="#十事件">十、事件</a><ul>
<li><a href="#文件事件">文件事件</a></li>
<li><a href="#时间事件">时间事件</a></li>
<li><a href="#事件的调度与执行">事件的调度与执行</a></li>
</ul>
</li>
<li><a href="#十一复制">十一、复制</a><ul>
<li><a href="#连接过程">连接过程</a></li>
<li><a href="#主从链">主从链</a></li>
</ul>
</li>
<li><a href="#十二sentinel">十二、Sentinel</a></li>
<li><a href="#十三分片">十三、分片</a></li>
<li><a href="#十四一个简单的论坛系统分析">十四、一个简单的论坛系统分析</a><ul>
<li><a href="#文章信息">文章信息</a></li>
<li><a href="#点赞功能">点赞功能</a></li>
<li><a href="#对文章进行排序">对文章进行排序</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>
<p>键的类型只能为字符串，值支持的五种类型数据类型为：字符串、列表、集合、有序集合、散列表。</p>
<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>
<h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">可以存储的值</th>
<th align="center">操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">STRING</td>
<td align="center">字符串、整数或者浮点数</td>
<td align="center">对整个字符串或者字符串的其中一部分执行操作</br> 对整数和浮点数执行自增或者自减操作</td>
</tr>
<tr>
<td align="center">LIST</td>
<td align="center">列表</td>
<td align="center">从两端压入或者弹出元素</br> 读取单个或者多个元素</br> 进行修剪，只保留一个范围内的元素</td>
</tr>
<tr>
<td align="center">SET</td>
<td align="center">无序集合</td>
<td align="center">添加、获取、移除单个元素</br> 检查一个元素是否存在于集合中</br> 计算交集、并集、差集</br> 从集合里面随机获取元素</td>
</tr>
<tr>
<td align="center">HASH</td>
<td align="center">包含键值对的无序散列表</td>
<td align="center">添加、获取、移除单个键值对</br> 获取所有键值对</br> 检查某个键是否存在</td>
</tr>
<tr>
<td align="center">ZSET</td>
<td align="center">有序集合</td>
<td align="center">添加、获取、删除元素</br> 根据分值范围或者成员来获取元素</br> 计算一个键的排名</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/" target="_blank" rel="noopener external nofollow noreferrer">What Redis data structures look like</a></p>
</blockquote>
<h2 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//6019b2db-bc3e-4408-b6d8-96025f4481d6.png" width="400"/> </div><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">&gt; get hello</span><br><span class="line">"world"</span><br><span class="line">&gt; del hello</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; get hello</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h2 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//fb327611-7e2b-4f2f-9f5b-38592d408f07.png" width="400"/> </div><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt; rpush list-key item</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; rpush list-key item2</span><br><span class="line">(integer) 2</span><br><span class="line">&gt; rpush list-key item</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) "item"</span><br><span class="line">2) "item2"</span><br><span class="line">3) "item"</span><br><span class="line"></span><br><span class="line">&gt; lindex list-key 1</span><br><span class="line">"item2"</span><br><span class="line"></span><br><span class="line">&gt; lpop list-key</span><br><span class="line">"item"</span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) "item2"</span><br><span class="line">2) "item"</span><br></pre></td></tr></table></figure>

<h2 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png" width="400"/> </div><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt; sadd set-key item</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item3</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) "item"</span><br><span class="line">2) "item2"</span><br><span class="line">3) "item3"</span><br><span class="line"></span><br><span class="line">&gt; sismember set-key item4</span><br><span class="line">(integer) 0</span><br><span class="line">&gt; sismember set-key item</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) "item"</span><br><span class="line">2) "item3"</span><br></pre></td></tr></table></figure>

<h2 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//7bd202a7-93d4-4f3a-a878-af68ae25539a.png" width="400"/> </div><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt; hset hash-key sub-key1 value1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key sub-key2 value2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key sub-key1 value1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) "sub-key1"</span><br><span class="line">2) "value1"</span><br><span class="line">3) "sub-key2"</span><br><span class="line">4) "value2"</span><br><span class="line"></span><br><span class="line">&gt; hdel hash-key sub-key2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hdel hash-key sub-key2</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hget hash-key sub-key1</span><br><span class="line">"value1"</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) "sub-key1"</span><br><span class="line">2) "value1"</span><br></pre></td></tr></table></figure>

<h2 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h2><div align="center"> <img src= "/img/loading.gif" data-src="../pics//1202b2d6-9469-4251-bd47-ca6034fb6116.png" width="400"/> </div><br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt; zadd zset-key 728 member1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) "member1"</span><br><span class="line">2) "728"</span><br><span class="line">3) "member0"</span><br><span class="line">4) "982"</span><br><span class="line"></span><br><span class="line">&gt; zrangebyscore zset-key 0 800 withscores</span><br><span class="line">1) "member1"</span><br><span class="line">2) "728"</span><br><span class="line"></span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) "member0"</span><br><span class="line">2) "982"</span><br></pre></td></tr></table></figure>

<h1 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>dictht 是一个散列表结构，使用拉链法保存哈希冲突的 dictEntry。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class="line"><span class="comment"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">        <span class="keyword">double</span> d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>

<p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">long</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure>

<p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>
<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>
<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>
<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的操作也需要到对应的 dictht 去执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class="line"><span class="comment"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class="line"><span class="comment"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class="line"><span class="comment"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class="line"><span class="comment"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class="line"><span class="comment"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class="line"><span class="comment"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dictRehash</span><span class="params">(dict *d, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> empty_visits = n * <span class="number">10</span>; <span class="comment">/* Max number of empty buckets to visit. */</span></span><br><span class="line">    <span class="keyword">if</span> (!dictIsRehashing(d)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n-- &amp;&amp; d-&gt;ht[<span class="number">0</span>].used != <span class="number">0</span>) &#123;</span><br><span class="line">        dictEntry *de, *nextde;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Note that rehashidx can't overflow as we are sure there are more</span></span><br><span class="line"><span class="comment">         * elements because ht[0].used != 0 */</span></span><br><span class="line">        assert(d-&gt;ht[<span class="number">0</span>].<span class="built_in">size</span> &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) d-&gt;rehashidx);</span><br><span class="line">        <span class="keyword">while</span> (d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            d-&gt;rehashidx++;</span><br><span class="line">            <span class="keyword">if</span> (--empty_visits == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        de = d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx];</span><br><span class="line">        <span class="comment">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class="line">        <span class="keyword">while</span> (de) &#123;</span><br><span class="line">            <span class="keyword">uint64_t</span> h;</span><br><span class="line"></span><br><span class="line">            nextde = de-&gt;next;</span><br><span class="line">            <span class="comment">/* Get the index in the new hash table */</span></span><br><span class="line">            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[<span class="number">1</span>].sizemask;</span><br><span class="line">            de-&gt;next = d-&gt;ht[<span class="number">1</span>].table[h];</span><br><span class="line">            d-&gt;ht[<span class="number">1</span>].table[h] = de;</span><br><span class="line">            d-&gt;ht[<span class="number">0</span>].used--;</span><br><span class="line">            d-&gt;ht[<span class="number">1</span>].used++;</span><br><span class="line">            de = nextde;</span><br><span class="line">        &#125;</span><br><span class="line">        d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx] = <span class="literal">NULL</span>;</span><br><span class="line">        d-&gt;rehashidx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we already rehashed the whole table... */</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].used == <span class="number">0</span>) &#123;</span><br><span class="line">        zfree(d-&gt;ht[<span class="number">0</span>].table);</span><br><span class="line">        d-&gt;ht[<span class="number">0</span>] = d-&gt;ht[<span class="number">1</span>];</span><br><span class="line">        _dictReset(&amp;d-&gt;ht[<span class="number">1</span>]);</span><br><span class="line">        d-&gt;rehashidx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* More to rehash... */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><p>是有序集合的底层实现之一。</p>
<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//beba612e-dc5b-4fc2-869d-0b23408ac90a.png"/> </div><br>

<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//0ea37ee2-c224-4c79-b895-e131c6805c40.png"/> </div><br>

<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>
<ul>
<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>
<li>更容易实现；</li>
<li>支持无锁操作。</li>
</ul>
<h1 id="四、使用场景"><a href="#四、使用场景" class="headerlink" title="四、使用场景"></a>四、使用场景</h1><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>
<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>
<h2 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h2><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>
<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>List 是一个双向链表，可以通过 lpop 和 lpush 写入和读取消息。</p>
<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>
<h2 id="会话缓存"><a href="#会话缓存" class="headerlink" title="会话缓存"></a>会话缓存</h2><p>在分布式场景下具有多个应用服务器，可以使用 Redis 来统一存储这些应用服务器的会话信息。</p>
<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器。</p>
<h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>
<p>可以使用 Reids 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>
<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>
<h1 id="五、Redis-与-Memcached"><a href="#五、Redis-与-Memcached" class="headerlink" title="五、Redis 与 Memcached"></a>五、Redis 与 Memcached</h1><p>两者都是非关系型内存键值数据库，主要有以下不同：</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>
<h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>
<p>Redis Cluster 实现了分布式的支持。</p>
<h2 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h2><ul>
<li><p>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>
</li>
<li><p>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题，但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</p>
</li>
</ul>
<h1 id="六、键的过期时间"><a href="#六、键的过期时间" class="headerlink" title="六、键的过期时间"></a>六、键的过期时间</h1><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>
<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>
<h1 id="七、数据淘汰策略"><a href="#七、数据淘汰策略" class="headerlink" title="七、数据淘汰策略"></a>七、数据淘汰策略</h1><p>可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>
<p>Reids 具体有 6 种淘汰策略：</p>
<table>
<thead>
<tr>
<th align="center">策略</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">volatile-lru</td>
<td align="center">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td align="center">volatile-ttl</td>
<td align="center">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>
</tr>
<tr>
<td align="center">volatile-random</td>
<td align="center">从已设置过期时间的数据集中任意选择数据淘汰</td>
</tr>
<tr>
<td align="center">allkeys-lru</td>
<td align="center">从所有数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td align="center">allkeys-random</td>
<td align="center">从所有数据集中任意选择数据进行淘汰</td>
</tr>
<tr>
<td align="center">noeviction</td>
<td align="center">禁止驱逐数据</td>
</tr>
</tbody></table>
<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>
<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>
<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p>
<h1 id="八、持久化"><a href="#八、持久化" class="headerlink" title="八、持久化"></a>八、持久化</h1><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>
<h2 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h2><p>将某个时间点的所有数据都存放到硬盘上。</p>
<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>
<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>
<p>如果数据量很大，保存快照的时间会很长。</p>
<h2 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h2><p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>
<p>使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">同步频率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">always</td>
<td align="center">每个写命令都同步</td>
</tr>
<tr>
<td align="center">everysec</td>
<td align="center">每秒同步一次</td>
</tr>
<tr>
<td align="center">no</td>
<td align="center">让操作系统来决定何时同步</td>
</tr>
</tbody></table>
<ul>
<li>always 选项会严重减低服务器的性能；</li>
<li>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>
<li>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>
</ul>
<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>
<h1 id="九、事务"><a href="#九、事务" class="headerlink" title="九、事务"></a>九、事务</h1><p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>
<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>
<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>
<h1 id="十、事件"><a href="#十、事件" class="headerlink" title="十、事件"></a>十、事件</h1><p>Redis 服务器是一个事件驱动程序。</p>
<h2 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h2><p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>
<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//9ea86eb5-000a-4281-b948-7b567bd6f1d8.png"/> </div><br>

<h2 id="时间事件"><a href="#时间事件" class="headerlink" title="时间事件"></a>时间事件</h2><p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>
<p>时间事件又分为：</p>
<ul>
<li>定时事件：是让一段程序在指定的时间之内执行一次；</li>
<li>周期性事件：是让一段程序每隔指定时间就执行一次。</li>
</ul>
<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>
<h2 id="事件的调度与执行"><a href="#事件的调度与执行" class="headerlink" title="事件的调度与执行"></a>事件的调度与执行</h2><p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>
<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aeProcessEvents</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取到达时间离当前时间最接近的时间事件</span></span><br><span class="line">    time_event = aeSearchNearestTimer()</span><br><span class="line">    <span class="comment"># 计算最接近的时间事件距离到达还有多少毫秒</span></span><br><span class="line">    remaind_ms = time_event.when - unix_ts_now()</span><br><span class="line">    <span class="comment"># 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span></span><br><span class="line">    <span class="keyword">if</span> remaind_ms &lt; <span class="number">0</span>:</span><br><span class="line">        remaind_ms = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 根据 remaind_ms 的值，创建 timeval</span></span><br><span class="line">    timeval = create_timeval_with_ms(remaind_ms)</span><br><span class="line">    <span class="comment"># 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span></span><br><span class="line">    aeApiPoll(timeval)</span><br><span class="line">    <span class="comment"># 处理所有已产生的文件事件</span></span><br><span class="line">    procesFileEvents()</span><br><span class="line">    <span class="comment"># 处理所有已到达的时间事件</span></span><br><span class="line">    processTimeEvents()</span><br></pre></td></tr></table></figure>

<p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化服务器</span></span><br><span class="line">    init_server()</span><br><span class="line">    <span class="comment"># 一直处理事件，直到服务器关闭为止</span></span><br><span class="line">    <span class="keyword">while</span> server_is_not_shutdown():</span><br><span class="line">        aeProcessEvents()</span><br><span class="line">    <span class="comment"># 服务器关闭，执行清理操作</span></span><br><span class="line">    clean_server()</span><br></pre></td></tr></table></figure>

<p>从事件处理的角度来看，服务器运行流程如下：</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//c0a9fa91-da2e-4892-8c9f-80206a6f7047.png" width="400"/> </div><br>

<h1 id="十一、复制"><a href="#十一、复制" class="headerlink" title="十一、复制"></a>十一、复制</h1><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>
<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>
<h2 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h2><ol>
<li><p>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>
</li>
<li><p>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>
</li>
<li><p>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>
</li>
</ol>
<h2 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h2><p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png" width="600"/> </div><br>

<h1 id="十二、Sentinel"><a href="#十二、Sentinel" class="headerlink" title="十二、Sentinel"></a>十二、Sentinel</h1><p>Sentinel（哨兵）可以监听主服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>
<h1 id="十三、分片"><a href="#十三、分片" class="headerlink" title="十三、分片"></a>十三、分片</h1><p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>
<p>假设有 4 个 Reids 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，… 等等，有不同的方式来选择一个指定的键存储在哪个实例中。</p>
<ul>
<li>最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>
<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>
</ul>
<p>根据执行分片的位置，可以分为三种分片方式：</p>
<ul>
<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>
<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>
<li>服务器分片：Redis Cluster。</li>
</ul>
<h1 id="十四、一个简单的论坛系统分析"><a href="#十四、一个简单的论坛系统分析" class="headerlink" title="十四、一个简单的论坛系统分析"></a>十四、一个简单的论坛系统分析</h1><p>该论坛系统功能如下：</p>
<ul>
<li>可以发布文章；</li>
<li>可以对文章进行点赞；</li>
<li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示。</li>
</ul>
<h2 id="文章信息"><a href="#文章信息" class="headerlink" title="文章信息"></a>文章信息</h2><p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p>
<p>Redis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//7c54de21-e2ff-402e-bc42-4037de1c1592.png" width="400"/> </div><br>

<h2 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h2><p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p>
<p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//485fdf34-ccf8-4185-97c6-17374ee719a0.png" width="400"/> </div><br>

<h2 id="对文章进行排序"><a href="#对文章进行排序" class="headerlink" title="对文章进行排序"></a>对文章进行排序</h2><p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//f7d170a3-e446-4a64-ac2d-cb95028f81a8.png" width="800"/> </div><br>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Carlson J L. Redis in Action[J]. Media.johnwiley.com.au, 2013.</li>
<li><a href="http://redisbook.com/index.html" target="_blank" rel="noopener external nofollow noreferrer">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></li>
<li><a href="https://redislabs.com/ebook/foreword/" target="_blank" rel="noopener external nofollow noreferrer">REDIS IN ACTION</a></li>
<li><a href="http://ticki.github.io/blog/skip-lists-done-right/" target="_blank" rel="noopener external nofollow noreferrer">Skip Lists: Done Right</a></li>
<li><a href="http://www.cnblogs.com/loveincode/p/7411911.html" target="_blank" rel="noopener external nofollow noreferrer">论述 Redis 和 Memcached 的差异</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/redis-guide" target="_blank" rel="noopener external nofollow noreferrer">Redis 3.0 中文版- 分片</a></li>
<li><a href="http://www.scienjus.com/redis-use-case/" target="_blank" rel="noopener external nofollow noreferrer">Redis 应用场景</a></li>
<li><a href="http://developers-club.com/posts/270339/" target="_blank" rel="noopener external nofollow noreferrer">Observer vs Pub-Sub</a></li>
<li><a href="https://redis.io/topics/lru-cache" target="_blank" rel="noopener external nofollow noreferrer">Using Redis as an LRU cache</a></li>
</ul>
]]></content>
      <tags>
        <tag>Radis</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL学习</title>
    <url>/posts/32011.html</url>
    <content><![CDATA[<pre><code>sql基础、库表的基本操作、连接、分组、函数、视图、触发器、权限、事务等。。。</code></pre><h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p>
<p>主键的值不允许修改，也不允许复用（不能使用已经删除的主键值赋给新数据行的主键）。</p>
<p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p>
<p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p>
<p>SQL 支持以下三种注释：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br></pre></td></tr></table></figure>

<p>数据库创建与使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure>

<h1 id="二、创建表"><a href="#二、创建表" class="headerlink" title="二、创建表"></a>二、创建表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  col1 <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  col2 <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  col3 <span class="built_in">DATE</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></table></figure>

<h1 id="三、修改表"><a href="#三、修改表" class="headerlink" title="三、修改表"></a>三、修改表</h1><p>添加列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">col</span> <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure>

<p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure>

<h1 id="四、插入"><a href="#四、插入" class="headerlink" title="四、插入"></a>四、插入</h1><p>普通插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2)</span><br><span class="line"><span class="keyword">VALUES</span>(val1, val2);</span><br></pre></td></tr></table></figure>

<p>插入检索出来的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br></pre></td></tr></table></figure>

<p>将一个表的内容插入到一个新表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>

<h1 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mytable</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">col</span> = val</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h1 id="六、删除"><a href="#六、删除" class="headerlink" title="六、删除"></a>六、删除</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><strong>TRUNCATE TABLE</strong>  可以清空表，也就是删除所有行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure>

<p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p>
<h1 id="七、查询"><a href="#七、查询" class="headerlink" title="七、查询"></a>七、查询</h1><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>

<h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p>
<p>返回前 5 行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>返回第 3 ~ 5 行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h1 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h1><ul>
<li><strong>ASC</strong> ：升序（默认）</li>
<li><strong>DESC</strong> ：降序</li>
</ul>
<p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h1 id="九、过滤"><a href="#九、过滤" class="headerlink" title="九、过滤"></a>九、过滤</h1><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>下表显示了 WHERE 子句可用的操作符</p>
<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&lt;&gt; !=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&lt;= !&gt;</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">&gt;= !&lt;</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">BETWEEN</td>
<td align="center">在两个值之间</td>
</tr>
<tr>
<td align="center">IS NULL</td>
<td align="center">为 NULL 值</td>
</tr>
</tbody></table>
<p>应该注意到，NULL 与 0、空字符串都不同。</p>
<p><strong>AND 和 OR</strong>  用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p>
<p><strong>IN</strong>  操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p>
<p><strong>NOT</strong>  操作符用于否定一个条件。</p>
<h1 id="十、通配符"><a href="#十、通配符" class="headerlink" title="十、通配符"></a>十、通配符</h1><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p>
<ul>
<li><p><strong>%</strong>  匹配 &gt;=0 个任意字符；</p>
</li>
<li><p><strong>_</strong>  匹配 ==1 个任意字符；</p>
</li>
<li><p><strong>[ ]</strong>  可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p>
</li>
</ul>
<p>使用 Like 来进行通配符匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> <span class="keyword">LIKE</span> <span class="string">'[^AB]%'</span>; <span class="comment">-- 不以 A 和 B 开头的任意文本</span></span><br></pre></td></tr></table></figure>

<p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p>
<h1 id="十一、计算字段"><a href="#十一、计算字段" class="headerlink" title="十一、计算字段"></a>十一、计算字段</h1><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p>
<p>计算字段通常需要使用  <strong>AS</strong>  来取别名，否则输出的时候字段名为计算表达式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 * col2 <span class="keyword">AS</span> <span class="keyword">alias</span></span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>

<p><strong>CONCAT()</strong>  用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">TRIM</span>(col1), <span class="string">'('</span>, <span class="keyword">TRIM</span>(col2), <span class="string">')'</span>) <span class="keyword">AS</span> concat_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>

<h1 id="十二、函数"><a href="#十二、函数" class="headerlink" title="十二、函数"></a>十二、函数</h1><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p>
<h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AVG()</td>
<td align="center">返回某列的平均值</td>
</tr>
<tr>
<td align="center">COUNT()</td>
<td align="center">返回某列的行数</td>
</tr>
<tr>
<td align="center">MAX()</td>
<td align="center">返回某列的最大值</td>
</tr>
<tr>
<td align="center">MIN()</td>
<td align="center">返回某列的最小值</td>
</tr>
<tr>
<td align="center">SUM()</td>
<td align="center">返回某列值之和</td>
</tr>
</tbody></table>
<p>AVG() 会忽略 NULL 行。</p>
<p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure>

<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LEFT()</td>
<td align="center">左边的字符</td>
</tr>
<tr>
<td align="center">RIGHT()</td>
<td align="center">右边的字符</td>
</tr>
<tr>
<td align="center">LOWER()</td>
<td align="center">转换为小写字符</td>
</tr>
<tr>
<td align="center">UPPER()</td>
<td align="center">转换为大写字符</td>
</tr>
<tr>
<td align="center">LTRIM()</td>
<td align="center">去除左边的空格</td>
</tr>
<tr>
<td align="center">RTRIM()</td>
<td align="center">去除右边的空格</td>
</tr>
<tr>
<td align="center">LENGTH()</td>
<td align="center">长度</td>
</tr>
<tr>
<td align="center">SOUNDEX()</td>
<td align="center">转换为语音值</td>
</tr>
</tbody></table>
<p>其中， <strong>SOUNDEX()</strong>  可以将一个字符串转换为描述其语音表示的字母数字模式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(col1) = <span class="keyword">SOUNDEX</span>(<span class="string">'apple'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h2><ul>
<li>日期格式：YYYY-MM-DD</li>
<li>时间格式：HH:MM:SS</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函 数</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AddDate()</td>
<td align="center">增加一个日期（天、周等）</td>
</tr>
<tr>
<td align="center">AddTime()</td>
<td align="center">增加一个时间（时、分等）</td>
</tr>
<tr>
<td align="center">CurDate()</td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center">CurTime()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">Date()</td>
<td align="center">返回日期时间的日期部分</td>
</tr>
<tr>
<td align="center">DateDiff()</td>
<td align="center">计算两个日期之差</td>
</tr>
<tr>
<td align="center">Date_Add()</td>
<td align="center">高度灵活的日期运算函数</td>
</tr>
<tr>
<td align="center">Date_Format()</td>
<td align="center">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td align="center">Day()</td>
<td align="center">返回一个日期的天数部分</td>
</tr>
<tr>
<td align="center">DayOfWeek()</td>
<td align="center">对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td align="center">Hour()</td>
<td align="center">返回一个时间的小时部分</td>
</tr>
<tr>
<td align="center">Minute()</td>
<td align="center">返回一个时间的分钟部分</td>
</tr>
<tr>
<td align="center">Month()</td>
<td align="center">返回一个日期的月份部分</td>
</tr>
<tr>
<td align="center">Now()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">Second()</td>
<td align="center">返回一个时间的秒部分</td>
</tr>
<tr>
<td align="center">Time()</td>
<td align="center">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td align="center">Year()</td>
<td align="center">返回一个日期的年份部分</td>
</tr>
</tbody></table>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-4-14 20:25:11</span><br></pre></td></tr></table></figure>

<h2 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIN()</td>
<td align="center">正弦</td>
</tr>
<tr>
<td align="center">COS()</td>
<td align="center">余弦</td>
</tr>
<tr>
<td align="center">TAN()</td>
<td align="center">正切</td>
</tr>
<tr>
<td align="center">ABS()</td>
<td align="center">绝对值</td>
</tr>
<tr>
<td align="center">SQRT()</td>
<td align="center">平方根</td>
</tr>
<tr>
<td align="center">MOD()</td>
<td align="center">余数</td>
</tr>
<tr>
<td align="center">EXP()</td>
<td align="center">指数</td>
</tr>
<tr>
<td align="center">PI()</td>
<td align="center">圆周率</td>
</tr>
<tr>
<td align="center">RAND()</td>
<td align="center">随机数</td>
</tr>
</tbody></table>
<h1 id="十三、分组"><a href="#十三、分组" class="headerlink" title="十三、分组"></a>十三、分组</h1><p>分组就是把具有相同的数据值的行放在同一组中。</p>
<p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p>
<p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span>;</span><br></pre></td></tr></table></figure>

<p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">num</span>;</span><br></pre></td></tr></table></figure>

<p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">num</span> &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>分组规定：</p>
<ul>
<li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li>
<li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li>
<li>NULL 的行会单独分为一组；</li>
<li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li>
</ul>
<h1 id="十四、子查询"><a href="#十四、子查询" class="headerlink" title="十四、子查询"></a>十四、子查询</h1><p>子查询中只能返回一个字段的数据。</p>
<p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br></pre></td></tr></table></figure>

<p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line">                   <span class="keyword">FROM</span> Orders</span><br><span class="line">                   <span class="keyword">WHERE</span> Orders.cust_id = Customers.cust_id)</span><br><span class="line">                   <span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure>

<h1 id="十五、连接"><a href="#十五、连接" class="headerlink" title="十五、连接"></a>十五、连接</h1><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p>
<p>连接可以替换子查询，并且比子查询的效率一般会更快。</p>
<p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p>
<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key = B.key;</span><br></pre></td></tr></table></figure>

<p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A, tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.key = B.key;</span><br></pre></td></tr></table></figure>

<p>在没有条件语句的情况下返回笛卡尔积。</p>
<h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p>
<p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p>
<p>子查询版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> department = (</span><br><span class="line">      <span class="keyword">SELECT</span> department</span><br><span class="line">      <span class="keyword">FROM</span> employee</span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">"Jim"</span>);</span><br></pre></td></tr></table></figure>

<p>自连接版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department = e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name = <span class="string">"Jim"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h2><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p>
<p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br></pre></td></tr></table></figure>

<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p>
<p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br></pre></td></tr></table></figure>

<p>customers 表：</p>
<table>
<thead>
<tr>
<th align="center">cust_id</th>
<th align="center">cust_name</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">c</td>
</tr>
</tbody></table>
<p>orders 表：</p>
<table>
<thead>
<tr>
<th align="center">order_id</th>
<th align="center">cust_id</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">3</td>
</tr>
</tbody></table>
<p>结果：</p>
<table>
<thead>
<tr>
<th align="center">cust_id</th>
<th align="center">cust_name</th>
<th align="center">order_id</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">a</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">a</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">c</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">c</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">b</td>
<td align="center">Null</td>
</tr>
</tbody></table>
<h1 id="十六、组合查询"><a href="#十六、组合查询" class="headerlink" title="十六、组合查询"></a>十六、组合查询</h1><p>使用  <strong>UNION</strong>  来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p>
<p>每个查询必须包含相同的列、表达式和聚集函数。</p>
<p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p>
<p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">col</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">col</span> =<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h1 id="十七、视图"><a href="#十七、视图" class="headerlink" title="十七、视图"></a>十七、视图</h1><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p>
<p>对视图的操作和对普通表的操作一样。</p>
<p>视图具有如下好处：</p>
<ul>
<li>简化复杂的 SQL 操作，比如复杂的连接；</li>
<li>只使用实际表的一部分数据；</li>
<li>通过只给用户访问视图的权限，保证数据的安全性；</li>
<li>更改数据格式和表示。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(col1, col2) <span class="keyword">AS</span> concat_col, col3*col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 = val;</span><br></pre></td></tr></table></figure>

<h1 id="十八、存储过程"><a href="#十八、存储过程" class="headerlink" title="十八、存储过程"></a>十八、存储过程</h1><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p>
<p>使用存储过程的好处：</p>
<ul>
<li>代码封装，保证了一定的安全性；</li>
<li>代码复用；</li>
<li>由于是预先编译，因此具有很高的性能。</li>
</ul>
<p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p>
<p>包含 in、out 和 inout 三种参数。</p>
<p>给变量赋值都需要用 select into 语句。</p>
<p>每次只能给一个变量赋值，不支持集合的操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="built_in">int</span> )</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="built_in">int</span>;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y*y <span class="keyword">into</span> ret;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> myprocedure(@ret);</span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure>

<h1 id="十九、游标"><a href="#十九、游标" class="headerlink" title="十九、游标"></a>十九、游标</h1><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p>
<p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p>
<p>使用游标的四个步骤：</p>
<ol>
<li>声明游标，这个过程没有实际检索出数据；</li>
<li>打开游标；</li>
<li>取出数据；</li>
<li>关闭游标；</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure(<span class="keyword">out</span> ret <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> col1 <span class="keyword">from</span> mytable;</span><br><span class="line">        <span class="comment"># 定义了一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1</span></span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        open mycursor;</span><br><span class="line"></span><br><span class="line">        repeat</span><br><span class="line">            fetch mycursor into ret;</span><br><span class="line">            <span class="keyword">select</span> ret;</span><br><span class="line">        until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line"></span><br><span class="line">        close mycursor;</span><br><span class="line">    <span class="keyword">end</span> //</span><br><span class="line"> delimiter ;</span><br></pre></td></tr></table></figure>

<h1 id="二十、触发器"><a href="#二十、触发器" class="headerlink" title="二十、触发器"></a>二十、触发器</h1><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p>
<p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p>
<p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">SELECT</span> NEW.col <span class="keyword">into</span> @<span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">result</span>; <span class="comment">-- 获取结果</span></span><br></pre></td></tr></table></figure>

<p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p>
<p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p>
<p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p>
<h1 id="二十一、事务管理"><a href="#二十一、事务管理" class="headerlink" title="二十一、事务管理"></a>二十一、事务管理</h1><p>基本术语：</p>
<ul>
<li>事务（transaction）指一组 SQL 语句；</li>
<li>回退（rollback）指撤销指定 SQL 语句的过程；</li>
<li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li>
<li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li>
</ul>
<p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p>
<p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p>
<p>通过设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p>
<p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line">// ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure>

<h1 id="二十二、字符集"><a href="#二十二、字符集" class="headerlink" title="二十二、字符集"></a>二十二、字符集</h1><p>基本术语：</p>
<ul>
<li>字符集为字母和符号的集合；</li>
<li>编码为某个字符集成员的内部表示；</li>
<li>校对字符指定如何比较，主要用于排序和分组。</li>
</ul>
<p>除了给表指定字符集和校对外，也可以给列指定：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(<span class="keyword">col</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci )</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure>

<p>可以在排序、分组时指定校对：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">col</span> <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></table></figure>

<h1 id="二十三、权限管理"><a href="#二十三、权限管理" class="headerlink" title="二十三、权限管理"></a>二十三、权限管理</h1><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><strong>创建账户</strong> </p>
<p>新创建的账户没有任何权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myuser <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>修改账户名</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> myuser <span class="keyword">TO</span> newuser;</span><br></pre></td></tr></table></figure>

<p><strong>删除账户</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></table></figure>

<p><strong>查看权限</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> myuser;</span><br></pre></td></tr></table></figure>

<p><strong>授予权限</strong> </p>
<p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">TO</span> myuser;</span><br></pre></td></tr></table></figure>

<p><strong>删除权限</strong> </p>
<p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li>
<li>整个数据库，使用 ON database.*；</li>
<li>特定的表，使用 ON database.table；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.* <span class="keyword">FROM</span> myuser;</span><br></pre></td></tr></table></figure>

<p><strong>更改密码</strong> </p>
<p>必须使用 Password() 函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser = <span class="keyword">Password</span>(<span class="string">'new_password'</span>);</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>BenForta. SQL 必知必会 [M]. 人民邮电出版社, 2013.</li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL经典例题学习</title>
    <url>/posts/20676.html</url>
    <content><![CDATA[<pre><code>SQL方面的经典例题实践。</code></pre><h3 id="数据库建库语句"><a href="#数据库建库语句" class="headerlink" title="数据库建库语句"></a>数据库建库语句</h3><pre><code>use fuxi;

CREATE TABLE STUDENT
(
  SNO       VARCHAR(3) NOT NULL,
  SNAME     VARCHAR(4) NOT NULL,
  SSEX      VARCHAR(2) NOT NULL,
  SBIRTHDAY DATETIME,
  CLASS     VARCHAR(5)
);

CREATE TABLE COURSE
(
  CNO   VARCHAR(5)  NOT NULL,
  CNAME VARCHAR(10) NOT NULL,
  TNO   VARCHAR(10) NOT NULL
);

CREATE TABLE SCORE
(
  SNO    VARCHAR(3)     NOT NULL,
  CNO    VARCHAR(5)     NOT NULL,
  DEGREE NUMERIC(10, 1) NOT NULL
);

CREATE TABLE TEACHER
(
  TNO       VARCHAR(3)  NOT NULL,
  TNAME     VARCHAR(4)  NOT NULL,
  TSEX      VARCHAR(2)  NOT NULL,
  TBIRTHDAY DATETIME    NOT NULL,
  PROF      VARCHAR(6),
  DEPART    VARCHAR(10) NOT NULL
);</code></pre><h3 id="数据库数据录入"><a href="#数据库数据录入" class="headerlink" title="数据库数据录入"></a>数据库数据录入</h3><pre><code>INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (108, &apos;曾华&apos;
  , &apos;男&apos;, &apos;1977-09-01&apos;, 95033);
INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (105, &apos;匡明&apos;
  , &apos;男&apos;, &apos;1975-10-02&apos;, 95031);
INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (107, &apos;王丽&apos;
  , &apos;女&apos;, &apos;1976-01-23&apos;, 95033);
INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (101, &apos;李军&apos;
  , &apos;男&apos;, &apos;1976-02-20&apos;, 95033);
INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (109, &apos;王芳&apos;
  , &apos;女&apos;, &apos;1975-02-10&apos;, 95031);
INSERT INTO STUDENT (SNO, SNAME, SSEX, SBIRTHDAY, CLASS) VALUES (103, &apos;陆君&apos;
  , &apos;男&apos;, &apos;1974-06-03&apos;, 95031);

INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;3-105&apos;, &apos;计算机导论&apos;, 825);
INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;3-245&apos;, &apos;操作系统&apos;, 804);
INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;6-166&apos;, &apos;数据电路&apos;, 856);
INSERT INTO COURSE (CNO, CNAME, TNO) VALUES (&apos;9-888&apos;, &apos;高等数学&apos;, 100);

INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (103, &apos;3-245&apos;, 86);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (105, &apos;3-245&apos;, 75);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (109, &apos;3-245&apos;, 68);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (103, &apos;3-105&apos;, 92);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (105, &apos;3-105&apos;, 88);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (109, &apos;3-105&apos;, 76);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (101, &apos;3-105&apos;, 64);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (107, &apos;3-105&apos;, 91);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (101, &apos;6-166&apos;, 85);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (107, &apos;6-106&apos;, 79);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (108, &apos;3-105&apos;, 78);
INSERT INTO SCORE (SNO, CNO, DEGREE) VALUES (108, &apos;6-166&apos;, 81);

INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART)
VALUES (804, &apos;李诚&apos;, &apos;男&apos;, &apos;1958-12-02&apos;, &apos;副教授&apos;, &apos;计算机系&apos;);
INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART)
VALUES (856, &apos;张旭&apos;, &apos;男&apos;, &apos;1969-03-12&apos;, &apos;讲师&apos;, &apos;电子工程系&apos;);
INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART)
VALUES (825, &apos;王萍&apos;, &apos;女&apos;, &apos;1972-05-05&apos;, &apos;助教&apos;, &apos;计算机系&apos;);
INSERT INTO TEACHER (TNO, TNAME, TSEX, TBIRTHDAY, PROF, DEPART)
VALUES (831, &apos;刘冰&apos;, &apos;女&apos;, &apos;1977-08-14&apos;, &apos;助教&apos;, &apos;电子工程系&apos;);</code></pre><ul>
<li><p>1、 查询Student表中的所有记录的Sname、Ssex和Class列。</p>
<pre><code>select SNAME,SSEX,CLASS from STUDENT;</code></pre></li>
<li><p>2、 查询教师所有的单位即不重复的Depart列。</p>
<pre><code>select distinct DEPART from TEACHER1;</code></pre></li>
<li><p>3、 查询Student表的所有记录。</p>
<pre><code>select * from STUDENT;</code></pre></li>
<li><p>4、 查询Score表中成绩在60到80之间的所有记录。</p>
<pre><code>select *
from SCORE
where DEGREE &gt; 60 and DEGREE &lt; 80;</code></pre></li>
<li><p>5、 查询Score表中成绩为85，86或88的记录。</p>
<pre><code>select *
from SCORE
where DEGREE = 85 or DEGREE = 86 or DEGREE = 88;</code></pre></li>
<li><p>6、 查询Student表中“95031”班或性别为“女”的同学记录。</p>
<pre><code>select *
from STUDENT
where CLASS = &apos;95031&apos; or SSEX = &apos;女&apos;;</code></pre></li>
<li><p>7、 以Class降序查询Student表的所有记录。</p>
<pre><code>select *
from STUDENT
order by CLASS desc;</code></pre></li>
<li><p>8、 以Cno升序、Degree降序查询Score表的所有记录。</p>
<pre><code>select *
from SCORE
order by CNO asc, DEGREE desc;</code></pre></li>
<li><p>9、 查询“95031”班的学生人数。</p>
<pre><code>select count(*)
from STUDENT
where CLASS = &apos;95031&apos;;</code></pre></li>
<li><p>10、查询Score表中的最高分的学生学号和课程号。</p>
<pre><code>select
  sno,
  CNO
from SCORE
where DEGREE = (
  select max(DEGREE)
  from SCORE
);</code></pre></li>
<li><p>11、查询‘3-105’号课程的平均分。</p>
<pre><code>select avg(DEGREE)
from SCORE
where CNO = &apos;3-105&apos;;</code></pre></li>
<li><p>12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。</p>
<pre><code>select
  avg(DEGREE),
  CNO
from SCORE
where cno like &apos;3%&apos;
group by CNO
having count(*) &gt; 5;</code></pre></li>
<li><p>13、查询最低分大于70，最高分小于90的Sno列。</p>
<pre><code>select SNO
from SCORE
group by SNO
having min(DEGREE) &gt; 70 and max(DEGREE) &lt; 90;</code></pre></li>
<li><p>14、查询所有学生的Sname、Cno和Degree列。</p>
<pre><code>select
  SNAME,
  CNO,
  DEGREE
from STUDENT, SCORE
where STUDENT.SNO = SCORE.SNO;</code></pre></li>
<li><p>15、查询所有学生的Sno、Cname和Degree列。</p>
<pre><code>select
  SCORE.SNO,
  CNO,
  DEGREE
from STUDENT, SCORE
where STUDENT.SNO = SCORE.SNO;</code></pre></li>
<li><p>16、查询所有学生的Sname、Cname和Degree列。</p>
<pre><code>SELECT
  A.SNAME,
  B.CNAME,
  C.DEGREE
FROM STUDENT A
  JOIN (COURSE B, SCORE C)
    ON A.SNO = C.SNO AND B.CNO = C.CNO;</code></pre></li>
<li><p>17、查询“95033”班所选课程的平均分。</p>
<pre><code>select avg(DEGREE)
from SCORE
where sno in (select SNO
              from STUDENT
              where CLASS = &apos;95033&apos;);</code></pre></li>
<li><p>18、假设使用如下命令建立了一个grade表：</p>
<pre><code>create table grade (
  low  numeric(3, 0),
  upp  numeric(3),
  rank char(1)
);
insert into grade values (90, 100, &apos;A&apos;);
insert into grade values (80, 89, &apos;B&apos;);
insert into grade values (70, 79, &apos;C&apos;);
insert into grade values (60, 69, &apos;D&apos;);
insert into grade values (0, 59, &apos;E&apos;);</code></pre></li>
<li><p>现查询所有同学的Sno、Cno和rank列。</p>
<pre><code>SELECT
  A.SNO,
  A.CNO,
  B.RANK
FROM SCORE A, grade B
WHERE A.DEGREE BETWEEN B.LOW AND B.UPP
ORDER BY RANK;</code></pre></li>
<li><p>19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。</p>
<pre><code>select *
from SCORE
where CNO = &apos;3-105&apos; and DEGREE &gt; ALL (
  select DEGREE
  from SCORE
  where SNO = &apos;109&apos;
);

set @@global.sql_mode = &apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;
set sql_mode = &apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</code></pre></li>
<li><p>20、查询score中选学一门以上课程的同学中分数为非最高分成绩的记录</p>
<pre><code>select *
from SCORE
where DEGREE &lt; (select MAX(DEGREE)
                from SCORE)
group by SNO
having count(*) &gt; 1;</code></pre></li>
<li><p>21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录。</p>
<pre><code>同19</code></pre></li>
<li><p>22、查询和学号为108的同学同年出生的所有学生的Sno、Sname和Sbirthday列。</p>
<pre><code>select
  SNO,
  SNAME,
  SBIRTHDAY
from STUDENT
where year(SBIRTHDAY) = (
  select year(SBIRTHDAY)
  from STUDENT
  where SNO = &apos;108&apos;
);</code></pre></li>
<li><p>23、查询“张旭“教师任课的学生成绩。</p>
<pre><code>select *
from SCORE
where cno = (
  select CNO
  from COURSE
    inner join TEACHER on COURSE.TNO = TEACHER.TNO and TNAME = &apos;张旭&apos;
);</code></pre></li>
<li><p>24、查询选修某课程的同学人数多于5人的教师姓名。</p>
<pre><code>select TNAME
from TEACHER
where TNO = (
  select TNO
  from COURSE
  where CNO = (select CNO
               from SCORE
               group by CNO
               having count(SNO) &gt; 5)
);</code></pre></li>
<li><p>25、查询95033班和95031班全体学生的记录。</p>
<pre><code>select *
from STUDENT
where CLASS in (&apos;95033&apos;, &apos;95031&apos;);</code></pre></li>
<li><p>26、查询存在有85分以上成绩的课程Cno.</p>
<pre><code>select cno
from SCORE
group by CNO
having MAX(DEGREE) &gt; 85;</code></pre></li>
<li><p>27、查询出“计算机系“教师所教课程的成绩表。</p>
<pre><code>select *
from SCORE
where CNO in (select CNO
              from TEACHER, COURSE
              where DEPART = &apos;计算机系&apos; and COURSE.TNO = TEACHER.TNO);</code></pre></li>
<li><p>28、查询“计算机系”与“电子工程系“不同职称的教师的Tname和Prof</p>
<pre><code>select
  tname,
  prof
from TEACHER
where depart = &apos;计算机系&apos; and prof not in (
  select prof
  from TEACHER
  where depart = &apos;电子工程系&apos;
);</code></pre></li>
<li><p>29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。</p>
<pre><code>select
  CNO,
  SNO,
  DEGREE
from SCORE
where CNO = &apos;3-105&apos; and DEGREE &gt; any (
  select DEGREE
  from SCORE
  where CNO = &apos;3-245&apos;
)
order by DEGREE desc;</code></pre></li>
<li><p>30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree.</p>
<pre><code>SELECT *
FROM SCORE
WHERE DEGREE &gt; ALL (
  SELECT DEGREE
  FROM SCORE
  WHERE CNO = &apos;3-245&apos;
)
ORDER by DEGREE desc;</code></pre></li>
<li><p>31、查询所有教师和同学的name、sex和birthday.</p>
<pre><code>select
  TNAME     name,
  TSEX      sex,
  TBIRTHDAY birthday
from TEACHER
union
select
  sname     name,
  SSEX      sex,
  SBIRTHDAY birthday
from STUDENT;</code></pre></li>
<li><p>32、查询所有“女”教师和“女”同学的name、sex和birthday.</p>
<pre><code>select
  TNAME     name,
  TSEX      sex,
  TBIRTHDAY birthday
from TEACHER
where TSEX = &apos;女&apos;
union
select
  sname     name,
  SSEX      sex,
  SBIRTHDAY birthday
from STUDENT
where SSEX = &apos;女&apos;;</code></pre></li>
<li><p>33、查询成绩比该课程平均成绩低的同学的成绩表。</p>
<pre><code>SELECT A.*
FROM SCORE A
WHERE DEGREE &lt; (SELECT AVG(DEGREE)
                FROM SCORE B
                WHERE A.CNO = B.CNO);</code></pre></li>
<li><p>34、查询所有任课教师的Tname和Depart.</p>
<pre><code>select
  TNAME,
  DEPART
from TEACHER a
where exists(select *
             from COURSE b
             where a.TNO = b.TNO);</code></pre></li>
<li><p>35、查询所有未讲课的教师的Tname和Depart.</p>
<pre><code>select
  TNAME,
  DEPART
from TEACHER a
where tno not in (select tno
                  from COURSE);</code></pre></li>
<li><p>36、查询至少有2名男生的班号。</p>
<pre><code>select CLASS
from STUDENT
where SSEX = &apos;男&apos;
group by CLASS
having count(SSEX) &gt; 1;</code></pre></li>
<li><p>37、查询Student表中不姓“王”的同学记录。</p>
<pre><code>select *
from STUDENT
where SNAME not like &quot;王%&quot;;</code></pre></li>
<li><p>38、查询Student表中每个学生的姓名和年龄。</p>
<pre><code>select
  SNAME,
  year(now()) - year(SBIRTHDAY)
from STUDENT;</code></pre></li>
<li><p>39、查询Student表中最大和最小的Sbirthday日期值。</p>
<pre><code>select min(SBIRTHDAY) birthday
from STUDENT
union
select max(SBIRTHDAY) birthday
from STUDENT;</code></pre></li>
<li><p>40、以班号和年龄从大到小的顺序查询Student表中的全部记录。</p>
<pre><code>select *
from STUDENT
order by CLASS desc, year(now()) - year(SBIRTHDAY) desc;</code></pre></li>
<li><p>41、查询“男”教师及其所上的课程。</p>
<pre><code>select *
from TEACHER, COURSE
where TSEX = &apos;男&apos; and COURSE.TNO = TEACHER.TNO;</code></pre></li>
<li><p>42、查询最高分同学的Sno、Cno和Degree列。</p>
<pre><code>select
  sno,
  CNO,
  DEGREE
from SCORE
where DEGREE = (select max(DEGREE)
                from SCORE);</code></pre></li>
<li><p>43、查询和“李军”同性别的所有同学的Sname.</p>
<pre><code>select sname
from STUDENT
where SSEX = (select SSEX
              from STUDENT
              where SNAME = &apos;李军&apos;);</code></pre></li>
<li><p>44、查询和“李军”同性别并同班的同学Sname.</p>
<pre><code>select sname
from STUDENT
where (SSEX, CLASS) = (select
                         SSEX,
                         CLASS
                       from STUDENT
                       where SNAME = &apos;李军&apos;);</code></pre></li>
<li><p>45、查询所有选修“计算机导论”课程的“男”同学的成绩表</p>
<pre><code>select *
from SCORE, STUDENT
where SCORE.SNO = STUDENT.SNO and SSEX = &apos;男&apos; and CNO = (
  select CNO
  from COURSE
  where CNAME = &apos;计算机导论&apos;);</code></pre></li>
</ul>
<ul>
<li>46、使用游标方式来同时查询每位同学的名字，他所选课程及成绩。</li>
</ul>
<pre><code>declare
 cursor student_cursor is
  select S.SNO,S.SNAME,C.CNAME,SC.DEGREE as DEGREE
  from STUDENT S, COURSE C, SCORE SC
  where S.SNO=SC.SNO
  and SC.CNO=C.CNO;

  student_row student_cursor%ROWTYPE;

begin
  open student_cursor;
   loop
    fetch student_cursor INTO student_row;
    exit when student_cursor%NOTFOUND;
     dbms_output.put_line( student_row.SNO || &apos;&apos; || 

student_row.SNAME|| &apos;&apos; || student_row.CNAME || &apos;&apos; ||

student_row.DEGREE);
   end loop;
  close student_cursor;
END;
/ </code></pre><ul>
<li><p>47、 声明触发器指令，每当有同学转换班级时执行触发器显示当前和之前所在班级。</p>
<pre><code>CREATE OR REPLACE TRIGGER display_class_changes 
AFTER DELETE OR INSERT OR UPDATE ON student 
FOR EACH ROW 
WHEN (NEW.sno &gt; 0) 

BEGIN 

   dbms_output.put_line(&apos;Old class: &apos; || :OLD.class); 
   dbms_output.put_line(&apos;New class: &apos; || :NEW.class); 
END; 
/ </code></pre></li>
</ul>
<pre><code>Update student
set class=95031
where sno=109;</code></pre><ul>
<li><p>48、 删除已设置的触发器指令</p>
<pre><code>DROP TRIGGER display_class_changes;</code></pre></li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Butterfly 文章Demo</title>
    <url>/posts/56200.html</url>
    <content><![CDATA[<p>Page Front-matter</p>
<p>– 页面</p>
<p>写法    解释<br>title    【必需】页面标题<br>date    【必需】页面创建日期<br>type    【必需】标籤、分类和友情链接三个页面需要配置<br>updated    【可选】页面更新日期<br>description    【可选】页面描述<br>keywords    【可选】页面关键字<br>comments    【可选】显示页面评论模块(默认 true)<br>top_img    【可选】页面顶部图片<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aside    【可选】显示侧边栏 (默认 true)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p>
<p>Post Front-matter</p>
<p>写法    解释<br>title    【必需】文章标题<br>date    【必需】文章创建日期<br>updated    【可选】文章更新日期<br>tags    【可选】文章标籤<br>categories    【可选】文章分类<br>keywords    【可选】文章关键字<br>description    【可选】文章描述<br>top_img    【可选】文章顶部图片<br>cover    【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments    【可选】显示文章评论模块(默认 true)<br>toc    【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number    【可选】显示toc_number(默认为设置中toc的number配置)<br>auto_open    【可选】是否自动打开TOC(默认为设置中toc的auto_open配置)<br>copyright    【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Emoji</title>
    <url>/posts/61455.html</url>
    <content><![CDATA[<pre><code>github的全部表情系列</code></pre><h1 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a>Emoji表情</h1><p>将对应emoji表情的符号码复制后输入你的markdown文本即可显示emoji表情。<br>如<code>:blush:</code>，显示为:blush:</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:bowtie:</code></td>
<td align="center">:bowtie:</td>
<td align="center"><code>:smile:</code></td>
<td align="center">:smile:</td>
<td align="center"><code>:laughing:</code></td>
<td align="center">:laughing:</td>
</tr>
<tr>
<td align="center"><code>:blush:</code></td>
<td align="center">:blush:</td>
<td align="center"><code>:smiley:</code></td>
<td align="center">:smiley:</td>
<td align="center"><code>:relaxed:</code></td>
<td align="center">:relaxed:</td>
</tr>
<tr>
<td align="center"><code>:smirk:</code></td>
<td align="center">:smirk:</td>
<td align="center"><code>:heart_eyes:</code></td>
<td align="center">:heart_eyes:</td>
<td align="center"><code>:kissing_heart:</code></td>
<td align="center">:kissing_heart:</td>
</tr>
<tr>
<td align="center"><code>:kissing_closed_eyes:</code></td>
<td align="center">:kissing_closed_eyes:</td>
<td align="center"><code>:flushed:</code></td>
<td align="center">:flushed:</td>
<td align="center"><code>:relieved:</code></td>
<td align="center">:relieved:</td>
</tr>
<tr>
<td align="center"><code>:satisfied:</code></td>
<td align="center">:satisfied:</td>
<td align="center"><code>:grin:</code></td>
<td align="center">:grin:</td>
<td align="center"><code>:wink:</code></td>
<td align="center">:wink:</td>
</tr>
<tr>
<td align="center"><code>:stuck_out_tongue_winking_eye:</code></td>
<td align="center">:stuck_out_tongue_winking_eye:</td>
<td align="center"><code>:stuck_out_tongue_closed_eyes:</code></td>
<td align="center">:stuck_out_tongue_closed_eyes:</td>
<td align="center"><code>:grinning:</code></td>
<td align="center">:grinning:</td>
</tr>
<tr>
<td align="center"><code>:kissing:</code></td>
<td align="center">:kissing:</td>
<td align="center"><code>:kissing_smiling_eyes:</code></td>
<td align="center">:kissing_smiling_eyes:</td>
<td align="center"><code>:stuck_out_tongue:</code></td>
<td align="center">:stuck_out_tongue:</td>
</tr>
<tr>
<td align="center"><code>:sleeping:</code></td>
<td align="center">:sleeping:</td>
<td align="center"><code>:worried:</code></td>
<td align="center">:worried:</td>
<td align="center"><code>:frowning:</code></td>
<td align="center">:frowning:</td>
</tr>
<tr>
<td align="center"><code>:anguished:</code></td>
<td align="center">:anguished:</td>
<td align="center"><code>:open_mouth:</code></td>
<td align="center">:open_mouth:</td>
<td align="center"><code>:grimacing:</code></td>
<td align="center">:grimacing:</td>
</tr>
<tr>
<td align="center"><code>:confused:</code></td>
<td align="center">:confused:</td>
<td align="center"><code>:hushed:</code></td>
<td align="center">:hushed:</td>
<td align="center"><code>:expressionless:</code></td>
<td align="center">:expressionless:</td>
</tr>
<tr>
<td align="center"><code>:unamused:</code></td>
<td align="center">:unamused:</td>
<td align="center"><code>:sweat_smile:</code></td>
<td align="center">:sweat_smile:</td>
<td align="center"><code>:sweat:</code></td>
<td align="center">:sweat:</td>
</tr>
<tr>
<td align="center"><code>:disappointed_relieved:</code></td>
<td align="center">:disappointed_relieved:</td>
<td align="center"><code>:weary:</code></td>
<td align="center">:weary:</td>
<td align="center"><code>:pensive:</code></td>
<td align="center">:pensive:</td>
</tr>
<tr>
<td align="center"><code>:disappointed:</code></td>
<td align="center">:disappointed:</td>
<td align="center"><code>:confounded:</code></td>
<td align="center">:confounded:</td>
<td align="center"><code>:fearful:</code></td>
<td align="center">:fearful:</td>
</tr>
<tr>
<td align="center"><code>:cold_sweat:</code></td>
<td align="center">:cold_sweat:</td>
<td align="center"><code>:persevere:</code></td>
<td align="center">:persevere:</td>
<td align="center"><code>:cry:</code></td>
<td align="center">:cry:</td>
</tr>
<tr>
<td align="center"><code>:sob:</code></td>
<td align="center">:sob:</td>
<td align="center"><code>:joy:</code></td>
<td align="center">:joy:</td>
<td align="center"><code>:astonished:</code></td>
<td align="center">:astonished:</td>
</tr>
<tr>
<td align="center"><code>:scream:</code></td>
<td align="center">:scream:</td>
<td align="center"><code>:neckbeard:</code></td>
<td align="center">:neckbeard:</td>
<td align="center"><code>:tired_face:</code></td>
<td align="center">:tired_face:</td>
</tr>
<tr>
<td align="center"><code>:angry:</code></td>
<td align="center">:angry:</td>
<td align="center"><code>:rage:</code></td>
<td align="center">:rage:</td>
<td align="center"><code>:triumph:</code></td>
<td align="center">:triumph:</td>
</tr>
<tr>
<td align="center"><code>:sleepy:</code></td>
<td align="center">:sleepy:</td>
<td align="center"><code>:yum:</code></td>
<td align="center">:yum:</td>
<td align="center"><code>:mask:</code></td>
<td align="center">:mask:</td>
</tr>
<tr>
<td align="center"><code>:sunglasses:</code></td>
<td align="center">:sunglasses:</td>
<td align="center"><code>:dizzy_face:</code></td>
<td align="center">:dizzy_face:</td>
<td align="center"><code>:imp:</code></td>
<td align="center">:imp:</td>
</tr>
<tr>
<td align="center"><code>:smiling_imp:</code></td>
<td align="center">:smiling_imp:</td>
<td align="center"><code>:neutral_face:</code></td>
<td align="center">:neutral_face:</td>
<td align="center"><code>:no_mouth:</code></td>
<td align="center">:no_mouth:</td>
</tr>
<tr>
<td align="center"><code>:innocent:</code></td>
<td align="center">:innocent:</td>
<td align="center"><code>:alien:</code></td>
<td align="center">:alien:</td>
<td align="center"><code>:yellow_heart:</code></td>
<td align="center">:yellow_heart:</td>
</tr>
<tr>
<td align="center"><code>:blue_heart:</code></td>
<td align="center">:blue_heart:</td>
<td align="center"><code>:purple_heart:</code></td>
<td align="center">:purple_heart:</td>
<td align="center"><code>:heart:</code></td>
<td align="center">:heart:</td>
</tr>
<tr>
<td align="center"><code>:green_heart:</code></td>
<td align="center">:green_heart:</td>
<td align="center"><code>:broken_heart:</code></td>
<td align="center">:broken_heart:</td>
<td align="center"><code>:heartbeat:</code></td>
<td align="center">:heartbeat:</td>
</tr>
<tr>
<td align="center"><code>:heartpulse:</code></td>
<td align="center">:heartpulse:</td>
<td align="center"><code>:two_hearts:</code></td>
<td align="center">:two_hearts:</td>
<td align="center"><code>:revolving_hearts:</code></td>
<td align="center">:revolving_hearts:</td>
</tr>
<tr>
<td align="center"><code>:cupid:</code></td>
<td align="center">:cupid:</td>
<td align="center"><code>:sparkling_heart:</code></td>
<td align="center">:sparkling_heart:</td>
<td align="center"><code>:sparkles:</code></td>
<td align="center">:sparkles:</td>
</tr>
<tr>
<td align="center"><code>:star:</code></td>
<td align="center">:star:</td>
<td align="center"><code>:star2:</code></td>
<td align="center">:star2:</td>
<td align="center"><code>:dizzy:</code></td>
<td align="center">:dizzy:</td>
</tr>
<tr>
<td align="center"><code>:boom:</code></td>
<td align="center">:boom:</td>
<td align="center"><code>:collision:</code></td>
<td align="center">:collision:</td>
<td align="center"><code>:anger:</code></td>
<td align="center">:anger:</td>
</tr>
<tr>
<td align="center"><code>:exclamation:</code></td>
<td align="center">:exclamation:</td>
<td align="center"><code>:question:</code></td>
<td align="center">:question:</td>
<td align="center"><code>:grey_exclamation:</code></td>
<td align="center">:grey_exclamation:</td>
</tr>
<tr>
<td align="center"><code>:grey_question:</code></td>
<td align="center">:grey_question:</td>
<td align="center"><code>:zzz:</code></td>
<td align="center">:zzz:</td>
<td align="center"><code>:dash:</code></td>
<td align="center">:dash:</td>
</tr>
<tr>
<td align="center"><code>:sweat_drops:</code></td>
<td align="center">:sweat_drops:</td>
<td align="center"><code>:notes:</code></td>
<td align="center">:notes:</td>
<td align="center"><code>:musical_note:</code></td>
<td align="center">:musical_note:</td>
</tr>
<tr>
<td align="center"><code>:fire:</code></td>
<td align="center">:fire:</td>
<td align="center"><code>:hankey:</code></td>
<td align="center">:hankey:</td>
<td align="center"><code>:poop:</code></td>
<td align="center">:poop:</td>
</tr>
<tr>
<td align="center"><code>::</code></td>
<td align="center">:shit:</td>
<td align="center"><code>:+1:</code></td>
<td align="center">:+1:</td>
<td align="center"><code>:thumbsup:</code></td>
<td align="center">:thumbsup:</td>
</tr>
<tr>
<td align="center"><code>:-1:</code></td>
<td align="center">:-1:</td>
<td align="center"><code>:thumbsdown:</code></td>
<td align="center">:thumbsdown:</td>
<td align="center"><code>:ok_hand:</code></td>
<td align="center">:ok_hand:</td>
</tr>
<tr>
<td align="center"><code>:punch:</code></td>
<td align="center">:punch:</td>
<td align="center"><code>:facepunch:</code></td>
<td align="center">:facepunch:</td>
<td align="center"><code>:fist:</code></td>
<td align="center">:fist:</td>
</tr>
<tr>
<td align="center"><code>:v:</code></td>
<td align="center">:v:</td>
<td align="center"><code>:wave:</code></td>
<td align="center">:wave:</td>
<td align="center"><code>:hand:</code></td>
<td align="center">:hand:</td>
</tr>
<tr>
<td align="center"><code>:raised_hand:</code></td>
<td align="center">:raised_hand:</td>
<td align="center"><code>:open_hands:</code></td>
<td align="center">:open_hands:</td>
<td align="center"><code>:point_up:</code></td>
<td align="center">:point_up:</td>
</tr>
<tr>
<td align="center"><code>:point_down:</code></td>
<td align="center">:point_down:</td>
<td align="center"><code>:point_left:</code></td>
<td align="center">:point_left:</td>
<td align="center"><code>:point_right:</code></td>
<td align="center">:point_right:</td>
</tr>
<tr>
<td align="center"><code>:raised_hands:</code></td>
<td align="center">:raised_hands:</td>
<td align="center"><code>:pray:</code></td>
<td align="center">:pray:</td>
<td align="center"><code>:point_up_2:</code></td>
<td align="center">:point_up_2:</td>
</tr>
<tr>
<td align="center"><code>:clap:</code></td>
<td align="center">:clap:</td>
<td align="center"><code>:muscle:</code></td>
<td align="center">:muscle:</td>
<td align="center"><code>:metal:</code></td>
<td align="center">:metal:</td>
</tr>
<tr>
<td align="center"><code>:fu:</code></td>
<td align="center">:fu:</td>
<td align="center"><code>:walking:</code></td>
<td align="center">:walking:</td>
<td align="center"><code>:runner:</code></td>
<td align="center">:runner:</td>
</tr>
<tr>
<td align="center"><code>:running:</code></td>
<td align="center">:running:</td>
<td align="center"><code>:couple:</code></td>
<td align="center">:couple:</td>
<td align="center"><code>:family:</code></td>
<td align="center">:family:</td>
</tr>
<tr>
<td align="center"><code>:two_men_holding_hands:</code></td>
<td align="center">:two_men_holding_hands:</td>
<td align="center"><code>:two_women_holding_hands:</code></td>
<td align="center">:two_women_holding_hands:</td>
<td align="center"><code>:dancer:</code></td>
<td align="center">:dancer:</td>
</tr>
<tr>
<td align="center"><code>:dancers:</code></td>
<td align="center">:dancers:</td>
<td align="center"><code>:ok_woman:</code></td>
<td align="center">:ok_woman:</td>
<td align="center"><code>:no_good:</code></td>
<td align="center">:no_good:</td>
</tr>
<tr>
<td align="center"><code>:information_desk_person:</code></td>
<td align="center">:information_desk_person:</td>
<td align="center"><code>:raising_hand:</code></td>
<td align="center">:raising_hand:</td>
<td align="center"><code>:bride_with_veil:</code></td>
<td align="center">:bride_with_veil:</td>
</tr>
<tr>
<td align="center"><code>:person_with_pouting_face:</code></td>
<td align="center">:person_with_pouting_face:</td>
<td align="center"><code>:person_frowning:</code></td>
<td align="center">:person_frowning:</td>
<td align="center"><code>:bow:</code></td>
<td align="center">:bow:</td>
</tr>
<tr>
<td align="center"><code>:couplekiss:</code></td>
<td align="center">:couplekiss:</td>
<td align="center"><code>:couple_with_heart:</code></td>
<td align="center">:couple_with_heart:</td>
<td align="center"><code>:massage:</code></td>
<td align="center">:massage:</td>
</tr>
<tr>
<td align="center"><code>:haircut:</code></td>
<td align="center">:haircut:</td>
<td align="center"><code>:nail_care:</code></td>
<td align="center">:nail_care:</td>
<td align="center"><code>:boy:</code></td>
<td align="center">:boy:</td>
</tr>
<tr>
<td align="center"><code>:girl:</code></td>
<td align="center">:girl:</td>
<td align="center"><code>:woman:</code></td>
<td align="center">:woman:</td>
<td align="center"><code>:man:</code></td>
<td align="center">:man:</td>
</tr>
<tr>
<td align="center"><code>:baby:</code></td>
<td align="center">:baby:</td>
<td align="center"><code>:older_woman:</code></td>
<td align="center">:older_woman:</td>
<td align="center"><code>:older_man:</code></td>
<td align="center">:older_man:</td>
</tr>
<tr>
<td align="center"><code>:person_with_blond_hair:</code></td>
<td align="center">:person_with_blond_hair:</td>
<td align="center"><code>:man_with_gua_pi_mao:</code></td>
<td align="center">:man_with_gua_pi_mao:</td>
<td align="center"><code>:man_with_turban:</code></td>
<td align="center">:man_with_turban:</td>
</tr>
<tr>
<td align="center"><code>:construction_worker:</code></td>
<td align="center">:construction_worker:</td>
<td align="center"><code>:cop:</code></td>
<td align="center">:cop:</td>
<td align="center"><code>:angel:</code></td>
<td align="center">:angel:</td>
</tr>
<tr>
<td align="center"><code>:princess:</code></td>
<td align="center">:princess:</td>
<td align="center"><code>:smiley_cat:</code></td>
<td align="center">:smiley_cat:</td>
<td align="center"><code>:smile_cat:</code></td>
<td align="center">:smile_cat:</td>
</tr>
<tr>
<td align="center"><code>:heart_eyes_cat:</code></td>
<td align="center">:heart_eyes_cat:</td>
<td align="center"><code>:kissing_cat:</code></td>
<td align="center">:kissing_cat:</td>
<td align="center"><code>:smirk_cat:</code></td>
<td align="center">:smirk_cat:</td>
</tr>
<tr>
<td align="center"><code>:scream_cat:</code></td>
<td align="center">:scream_cat:</td>
<td align="center"><code>:crying_cat_face:</code></td>
<td align="center">:crying_cat_face:</td>
<td align="center"><code>:joy_cat:</code></td>
<td align="center">:joy_cat:</td>
</tr>
<tr>
<td align="center"><code>:pouting_cat:</code></td>
<td align="center">:pouting_cat:</td>
<td align="center"><code>:japanese_ogre:</code></td>
<td align="center">:japanese_ogre:</td>
<td align="center"><code>:japanese_goblin:</code></td>
<td align="center">:japanese_goblin:</td>
</tr>
<tr>
<td align="center"><code>:see_no_evil:</code></td>
<td align="center">:see_no_evil:</td>
<td align="center"><code>:hear_no_evil:</code></td>
<td align="center">:hear_no_evil:</td>
<td align="center"><code>:speak_no_evil:</code></td>
<td align="center">:speak_no_evil:</td>
</tr>
<tr>
<td align="center"><code>:guardsman:</code></td>
<td align="center">:guardsman:</td>
<td align="center"><code>:skull:</code></td>
<td align="center">:skull:</td>
<td align="center"><code>:feet:</code></td>
<td align="center">:feet:</td>
</tr>
<tr>
<td align="center"><code>:lips:</code></td>
<td align="center">:lips:</td>
<td align="center"><code>:kiss:</code></td>
<td align="center">:kiss:</td>
<td align="center"><code>:droplet:</code></td>
<td align="center">:droplet:</td>
</tr>
<tr>
<td align="center"><code>:ear:</code></td>
<td align="center">:ear:</td>
<td align="center"><code>:eyes:</code></td>
<td align="center">:eyes:</td>
<td align="center"><code>:nose:</code></td>
<td align="center">:nose:</td>
</tr>
<tr>
<td align="center"><code>:tongue:</code></td>
<td align="center">:tongue:</td>
<td align="center"><code>:love_letter:</code></td>
<td align="center">:love_letter:</td>
<td align="center"><code>:bust_in_silhouette:</code></td>
<td align="center">:bust_in_silhouette:</td>
</tr>
<tr>
<td align="center"><code>:busts_in_silhouette:</code></td>
<td align="center">:busts_in_silhouette:</td>
<td align="center"><code>:speech_balloon:</code></td>
<td align="center">:speech_balloon:</td>
<td align="center"><code>:thought_balloon:</code></td>
<td align="center">:thought_balloon:</td>
</tr>
<tr>
<td align="center"><code>:feelsgood:</code></td>
<td align="center">:feelsgood:</td>
<td align="center"><code>:finnadie:</code></td>
<td align="center">:finnadie:</td>
<td align="center"><code>:goberserk:</code></td>
<td align="center">:goberserk:</td>
</tr>
<tr>
<td align="center"><code>:godmode:</code></td>
<td align="center">:godmode:</td>
<td align="center"><code>:hurtrealbad:</code></td>
<td align="center">:hurtrealbad:</td>
<td align="center"><code>:rage1:</code></td>
<td align="center">:rage1:</td>
</tr>
<tr>
<td align="center"><code>:rage2:</code></td>
<td align="center">:rage2:</td>
<td align="center"><code>:rage3:</code></td>
<td align="center">:rage3:</td>
<td align="center"><code>:rage4:</code></td>
<td align="center">:rage4:</td>
</tr>
<tr>
<td align="center"><code>:suspect:</code></td>
<td align="center">:suspect:</td>
<td align="center"><code>:trollface:</code></td>
<td align="center">:trollface:</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h2><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:sunny:</code></td>
<td align="center">:sunny:</td>
<td align="center"><code>:umbrella:</code></td>
<td align="center">:umbrella:</td>
<td align="center"><code>:cloud:</code></td>
<td align="center">:cloud:</td>
</tr>
<tr>
<td align="center"><code>:snowflake:</code></td>
<td align="center">:snowflake:</td>
<td align="center"><code>:snowman:</code></td>
<td align="center">:snowman:</td>
<td align="center"><code>:zap:</code></td>
<td align="center">:zap:</td>
</tr>
<tr>
<td align="center"><code>:cyclone:</code></td>
<td align="center">:cyclone:</td>
<td align="center"><code>:foggy:</code></td>
<td align="center">:foggy:</td>
<td align="center"><code>:ocean:</code></td>
<td align="center">:ocean:</td>
</tr>
<tr>
<td align="center"><code>:cat:</code></td>
<td align="center">:cat:</td>
<td align="center"><code>:dog:</code></td>
<td align="center">:dog:</td>
<td align="center"><code>:mouse:</code></td>
<td align="center">:mouse:</td>
</tr>
<tr>
<td align="center"><code>:hamster:</code></td>
<td align="center">:hamster:</td>
<td align="center"><code>:rabbit:</code></td>
<td align="center">:rabbit:</td>
<td align="center"><code>:wolf:</code></td>
<td align="center">:wolf:</td>
</tr>
<tr>
<td align="center"><code>:frog:</code></td>
<td align="center">:frog:</td>
<td align="center"><code>:tiger:</code></td>
<td align="center">:tiger:</td>
<td align="center"><code>:koala:</code></td>
<td align="center">:koala:</td>
</tr>
<tr>
<td align="center"><code>:bear:</code></td>
<td align="center">:bear:</td>
<td align="center"><code>:pig:</code></td>
<td align="center">:pig:</td>
<td align="center"><code>:pig_nose:</code></td>
<td align="center">:pig_nose:</td>
</tr>
<tr>
<td align="center"><code>:cow:</code></td>
<td align="center">:cow:</td>
<td align="center"><code>:boar:</code></td>
<td align="center">:boar:</td>
<td align="center"><code>:monkey_face:</code></td>
<td align="center">:monkey_face:</td>
</tr>
<tr>
<td align="center"><code>:monkey:</code></td>
<td align="center">:monkey:</td>
<td align="center"><code>:horse:</code></td>
<td align="center">:horse:</td>
<td align="center"><code>:racehorse:</code></td>
<td align="center">:racehorse:</td>
</tr>
<tr>
<td align="center"><code>:camel:</code></td>
<td align="center">:camel:</td>
<td align="center"><code>:sheep:</code></td>
<td align="center">:sheep:</td>
<td align="center"><code>:elephant:</code></td>
<td align="center">:elephant:</td>
</tr>
<tr>
<td align="center"><code>:panda_face:</code></td>
<td align="center">:panda_face:</td>
<td align="center"><code>:snake:</code></td>
<td align="center">:snake:</td>
<td align="center"><code>:bird:</code></td>
<td align="center">:bird:</td>
</tr>
<tr>
<td align="center"><code>:baby_chick:</code></td>
<td align="center">:baby_chick:</td>
<td align="center"><code>:hatched_chick:</code></td>
<td align="center">:hatched_chick:</td>
<td align="center"><code>:hatching_chick:</code></td>
<td align="center">:hatching_chick:</td>
</tr>
<tr>
<td align="center"><code>:chicken:</code></td>
<td align="center">:chicken:</td>
<td align="center"><code>:penguin:</code></td>
<td align="center">:penguin:</td>
<td align="center"><code>:turtle:</code></td>
<td align="center">:turtle:</td>
</tr>
<tr>
<td align="center"><code>:bug:</code></td>
<td align="center">:bug:</td>
<td align="center"><code>:honeybee:</code></td>
<td align="center">:honeybee:</td>
<td align="center"><code>:ant:</code></td>
<td align="center">:ant:</td>
</tr>
<tr>
<td align="center"><code>:beetle:</code></td>
<td align="center">:beetle:</td>
<td align="center"><code>:snail:</code></td>
<td align="center">:snail:</td>
<td align="center"><code>:octopus:</code></td>
<td align="center">:octopus:</td>
</tr>
<tr>
<td align="center"><code>:tropical_fish:</code></td>
<td align="center">:tropical_fish:</td>
<td align="center"><code>:fish:</code></td>
<td align="center">:fish:</td>
<td align="center"><code>:whale:</code></td>
<td align="center">:whale:</td>
</tr>
<tr>
<td align="center"><code>:whale2:</code></td>
<td align="center">:whale2:</td>
<td align="center"><code>:dolphin:</code></td>
<td align="center">:dolphin:</td>
<td align="center"><code>:cow2:</code></td>
<td align="center">:cow2:</td>
</tr>
<tr>
<td align="center"><code>:ram:</code></td>
<td align="center">:ram:</td>
<td align="center"><code>:rat:</code></td>
<td align="center">:rat:</td>
<td align="center"><code>:water_buffalo:</code></td>
<td align="center">:water_buffalo:</td>
</tr>
<tr>
<td align="center"><code>:tiger2:</code></td>
<td align="center">:tiger2:</td>
<td align="center"><code>:rabbit2:</code></td>
<td align="center">:rabbit2:</td>
<td align="center"><code>:dragon:</code></td>
<td align="center">:dragon:</td>
</tr>
<tr>
<td align="center"><code>:goat:</code></td>
<td align="center">:goat:</td>
<td align="center"><code>:rooster:</code></td>
<td align="center">:rooster:</td>
<td align="center"><code>:dog2:</code></td>
<td align="center">:dog2:</td>
</tr>
<tr>
<td align="center"><code>:pig2:</code></td>
<td align="center">:pig2:</td>
<td align="center"><code>:mouse2:</code></td>
<td align="center">:mouse2:</td>
<td align="center"><code>:ox:</code></td>
<td align="center">:ox:</td>
</tr>
<tr>
<td align="center"><code>:dragon_face:</code></td>
<td align="center">:dragon_face:</td>
<td align="center"><code>:blowfish:</code></td>
<td align="center">:blowfish:</td>
<td align="center"><code>:crocodile:</code></td>
<td align="center">:crocodile:</td>
</tr>
<tr>
<td align="center"><code>:dromedary_camel:</code></td>
<td align="center">:dromedary_camel:</td>
<td align="center"><code>:leopard:</code></td>
<td align="center">:leopard:</td>
<td align="center"><code>:cat2:</code></td>
<td align="center">:cat2:</td>
</tr>
<tr>
<td align="center"><code>:poodle:</code></td>
<td align="center">:poodle:</td>
<td align="center"><code>:paw_prints:</code></td>
<td align="center">:paw_prints:</td>
<td align="center"><code>:bouquet:</code></td>
<td align="center">:bouquet:</td>
</tr>
<tr>
<td align="center"><code>:cherry_blossom:</code></td>
<td align="center">:cherry_blossom:</td>
<td align="center"><code>:tulip:</code></td>
<td align="center">:tulip:</td>
<td align="center"><code>:four_leaf_clover:</code></td>
<td align="center">:four_leaf_clover:</td>
</tr>
<tr>
<td align="center"><code>:rose:</code></td>
<td align="center">:rose:</td>
<td align="center"><code>:sunflower:</code></td>
<td align="center">:sunflower:</td>
<td align="center"><code>:hibiscus:</code></td>
<td align="center">:hibiscus:</td>
</tr>
<tr>
<td align="center"><code>:maple_leaf:</code></td>
<td align="center">:maple_leaf:</td>
<td align="center"><code>:leaves:</code></td>
<td align="center">:leaves:</td>
<td align="center"><code>:fallen_leaf:</code></td>
<td align="center">:fallen_leaf:</td>
</tr>
<tr>
<td align="center"><code>:herb:</code></td>
<td align="center">:herb:</td>
<td align="center"><code>:mushroom:</code></td>
<td align="center">:mushroom:</td>
<td align="center"><code>:cactus:</code></td>
<td align="center">:cactus:</td>
</tr>
<tr>
<td align="center"><code>:palm_tree:</code></td>
<td align="center">:palm_tree:</td>
<td align="center"><code>:evergreen_tree:</code></td>
<td align="center">:evergreen_tree:</td>
<td align="center"><code>:deciduous_tree:</code></td>
<td align="center">:deciduous_tree:</td>
</tr>
<tr>
<td align="center"><code>:chestnut:</code></td>
<td align="center">:chestnut:</td>
<td align="center"><code>:seedling:</code></td>
<td align="center">:seedling:</td>
<td align="center"><code>:blossom:</code></td>
<td align="center">:blossom:</td>
</tr>
<tr>
<td align="center"><code>:ear_of_rice:</code></td>
<td align="center">:ear_of_rice:</td>
<td align="center"><code>:shell:</code></td>
<td align="center">:shell:</td>
<td align="center"><code>:globe_with_meridians:</code></td>
<td align="center">:globe_with_meridians:</td>
</tr>
<tr>
<td align="center"><code>:sun_with_face:</code></td>
<td align="center">:sun_with_face:</td>
<td align="center"><code>:full_moon_with_face:</code></td>
<td align="center">:full_moon_with_face:</td>
<td align="center"><code>:new_moon_with_face:</code></td>
<td align="center">:new_moon_with_face:</td>
</tr>
<tr>
<td align="center"><code>:new_moon:</code></td>
<td align="center">:new_moon:</td>
<td align="center"><code>:waxing_crescent_moon:</code></td>
<td align="center">:waxing_crescent_moon:</td>
<td align="center"><code>:first_quarter_moon:</code></td>
<td align="center">:first_quarter_moon:</td>
</tr>
<tr>
<td align="center"><code>:full_moon:</code></td>
<td align="center">:full_moon:</td>
<td align="center"><code>:waning_gibbous_moon:</code></td>
<td align="center">:waning_gibbous_moon:</td>
<td align="center"><code>:last_quarter_moon:</code></td>
<td align="center">:last_quarter_moon:</td>
</tr>
<tr>
<td align="center"><code>:waning_crescent_moon:</code></td>
<td align="center">:waning_crescent_moon:</td>
<td align="center"><code>:last_quarter_moon_with_face:</code></td>
<td align="center">:last_quarter_moon_with_face:</td>
<td align="center"><code>:first_quarter_moon_with_face:</code></td>
<td align="center">:first_quarter_moon_with_face:</td>
</tr>
<tr>
<td align="center"><code>:moon:</code></td>
<td align="center">:moon:</td>
<td align="center"><code>:earth_africa:</code></td>
<td align="center">:earth_africa:</td>
<td align="center"><code>:earth_americas:</code></td>
<td align="center">:earth_americas:</td>
</tr>
<tr>
<td align="center"><code>:earth_asia:</code></td>
<td align="center">:earth_asia:</td>
<td align="center"><code>:volcano:</code></td>
<td align="center">:volcano:</td>
<td align="center"><code>:milky_way:</code></td>
<td align="center">:milky_way:</td>
</tr>
<tr>
<td align="center"><code>:partly_sunny:</code></td>
<td align="center">:partly_sunny:</td>
<td align="center"><code>:octocat:</code></td>
<td align="center">:octocat:</td>
<td align="center"><code>:squirrel:</code></td>
<td align="center">:squirrel:</td>
</tr>
<tr>
<td align="center"><code>:waxing_gibbous_moon:</code></td>
<td align="center">:waxing_gibbous_moon:</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h2><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:bamboo:</code></td>
<td align="center">:bamboo:</td>
<td align="center"><code>:gift_heart:</code></td>
<td align="center">:gift_heart:</td>
<td align="center"><code>:dolls:</code></td>
<td align="center">:dolls:</td>
</tr>
<tr>
<td align="center"><code>:school_satchel:</code></td>
<td align="center">:school_satchel:</td>
<td align="center"><code>:mortar_board:</code></td>
<td align="center">:mortar_board:</td>
<td align="center"><code>:flags:</code></td>
<td align="center">:flags:</td>
</tr>
<tr>
<td align="center"><code>:fireworks:</code></td>
<td align="center">:fireworks:</td>
<td align="center"><code>:sparkler:</code></td>
<td align="center">:sparkler:</td>
<td align="center"><code>:wind_chime:</code></td>
<td align="center">:wind_chime:</td>
</tr>
<tr>
<td align="center"><code>:rice_scene:</code></td>
<td align="center">:rice_scene:</td>
<td align="center"><code>:jack_o_lantern:</code></td>
<td align="center">:jack_o_lantern:</td>
<td align="center"><code>:ghost:</code></td>
<td align="center">:ghost:</td>
</tr>
<tr>
<td align="center"><code>:santa:</code></td>
<td align="center">:santa:</td>
<td align="center"><code>:christmas_tree:</code></td>
<td align="center">:christmas_tree:</td>
<td align="center"><code>:gift:</code></td>
<td align="center">:gift:</td>
</tr>
<tr>
<td align="center"><code>:bell:</code></td>
<td align="center">:bell:</td>
<td align="center"><code>:no_bell:</code></td>
<td align="center">:no_bell:</td>
<td align="center"><code>:tanabata_tree:</code></td>
<td align="center">:tanabata_tree:</td>
</tr>
<tr>
<td align="center"><code>:tada:</code></td>
<td align="center">:tada:</td>
<td align="center"><code>:confetti_ball:</code></td>
<td align="center">:confetti_ball:</td>
<td align="center"><code>:balloon:</code></td>
<td align="center">:balloon:</td>
</tr>
<tr>
<td align="center"><code>:crystal_ball:</code></td>
<td align="center">:crystal_ball:</td>
<td align="center"><code>:cd:</code></td>
<td align="center">:cd:</td>
<td align="center"><code>:dvd:</code></td>
<td align="center">:dvd:</td>
</tr>
<tr>
<td align="center"><code>:floppy_disk:</code></td>
<td align="center">:floppy_disk:</td>
<td align="center"><code>:camera:</code></td>
<td align="center">:camera:</td>
<td align="center"><code>:video_camera:</code></td>
<td align="center">:video_camera:</td>
</tr>
<tr>
<td align="center"><code>:movie_camera:</code></td>
<td align="center">:movie_camera:</td>
<td align="center"><code>:computer:</code></td>
<td align="center">:computer:</td>
<td align="center"><code>:tv:</code></td>
<td align="center">:tv:</td>
</tr>
<tr>
<td align="center"><code>:iphone:</code></td>
<td align="center">:iphone:</td>
<td align="center"><code>:phone:</code></td>
<td align="center">:phone:</td>
<td align="center"><code>:telephone:</code></td>
<td align="center">:telephone:</td>
</tr>
<tr>
<td align="center"><code>:telephone_receiver:</code></td>
<td align="center">:telephone_receiver:</td>
<td align="center"><code>:pager:</code></td>
<td align="center">:pager:</td>
<td align="center"><code>:fax:</code></td>
<td align="center">:fax:</td>
</tr>
<tr>
<td align="center"><code>:minidisc:</code></td>
<td align="center">:minidisc:</td>
<td align="center"><code>:vhs:</code></td>
<td align="center">:vhs:</td>
<td align="center"><code>:sound:</code></td>
<td align="center">:sound:</td>
</tr>
<tr>
<td align="center"><code>:speaker:</code></td>
<td align="center">:speaker:</td>
<td align="center"><code>:mute:</code></td>
<td align="center">:mute:</td>
<td align="center"><code>:loudspeaker:</code></td>
<td align="center">:loudspeaker:</td>
</tr>
<tr>
<td align="center"><code>:mega:</code></td>
<td align="center">:mega:</td>
<td align="center"><code>:hourglass:</code></td>
<td align="center">:hourglass:</td>
<td align="center"><code>:hourglass_flowing_sand:</code></td>
<td align="center">:hourglass_flowing_sand:</td>
</tr>
<tr>
<td align="center"><code>:alarm_clock:</code></td>
<td align="center">:alarm_clock:</td>
<td align="center"><code>:watch:</code></td>
<td align="center">:watch:</td>
<td align="center"><code>:radio:</code></td>
<td align="center">:radio:</td>
</tr>
<tr>
<td align="center"><code>:satellite:</code></td>
<td align="center">:satellite:</td>
<td align="center"><code>:loop:</code></td>
<td align="center">:loop:</td>
<td align="center"><code>:mag:</code></td>
<td align="center">:mag:</td>
</tr>
<tr>
<td align="center"><code>:mag_right:</code></td>
<td align="center">:mag_right:</td>
<td align="center"><code>:unlock:</code></td>
<td align="center">:unlock:</td>
<td align="center"><code>:lock:</code></td>
<td align="center">:lock:</td>
</tr>
<tr>
<td align="center"><code>:lock_with_ink_pen:</code></td>
<td align="center">:lock_with_ink_pen:</td>
<td align="center"><code>:closed_lock_with_key:</code></td>
<td align="center">:closed_lock_with_key:</td>
<td align="center"><code>:key:</code></td>
<td align="center">:key:</td>
</tr>
<tr>
<td align="center"><code>:bulb:</code></td>
<td align="center">:bulb:</td>
<td align="center"><code>:flashlight:</code></td>
<td align="center">:flashlight:</td>
<td align="center"><code>:high_brightness:</code></td>
<td align="center">:high_brightness:</td>
</tr>
<tr>
<td align="center"><code>:low_brightness:</code></td>
<td align="center">:low_brightness:</td>
<td align="center"><code>:electric_plug:</code></td>
<td align="center">:electric_plug:</td>
<td align="center"><code>:battery:</code></td>
<td align="center">:battery:</td>
</tr>
<tr>
<td align="center"><code>:calling:</code></td>
<td align="center">:calling:</td>
<td align="center"><code>:email:</code></td>
<td align="center">:email:</td>
<td align="center"><code>:mailbox:</code></td>
<td align="center">:mailbox:</td>
</tr>
<tr>
<td align="center"><code>:postbox:</code></td>
<td align="center">:postbox:</td>
<td align="center"><code>:bath:</code></td>
<td align="center">:bath:</td>
<td align="center"><code>:bathtub:</code></td>
<td align="center">:bathtub:</td>
</tr>
<tr>
<td align="center"><code>:shower:</code></td>
<td align="center">:shower:</td>
<td align="center"><code>:toilet:</code></td>
<td align="center">:toilet:</td>
<td align="center"><code>:wrench:</code></td>
<td align="center">:wrench:</td>
</tr>
<tr>
<td align="center"><code>:nut_and_bolt:</code></td>
<td align="center">:nut_and_bolt:</td>
<td align="center"><code>:hammer:</code></td>
<td align="center">:hammer:</td>
<td align="center"><code>:seat:</code></td>
<td align="center">:seat:</td>
</tr>
<tr>
<td align="center"><code>:moneybag:</code></td>
<td align="center">:moneybag:</td>
<td align="center"><code>:yen:</code></td>
<td align="center">:yen:</td>
<td align="center"><code>:dollar:</code></td>
<td align="center">:dollar:</td>
</tr>
<tr>
<td align="center"><code>:pound:</code></td>
<td align="center">:pound:</td>
<td align="center"><code>:euro:</code></td>
<td align="center">:euro:</td>
<td align="center"><code>:credit_card:</code></td>
<td align="center">:credit_card:</td>
</tr>
<tr>
<td align="center"><code>:money_with_wings:</code></td>
<td align="center">:money_with_wings:</td>
<td align="center"><code>:e-mail:</code></td>
<td align="center">:e-mail:</td>
<td align="center"><code>:inbox_tray:</code></td>
<td align="center">:inbox_tray:</td>
</tr>
<tr>
<td align="center"><code>:outbox_tray:</code></td>
<td align="center">:outbox_tray:</td>
<td align="center"><code>:envelope:</code></td>
<td align="center">:envelope:</td>
<td align="center"><code>:incoming_envelope:</code></td>
<td align="center">:incoming_envelope:</td>
</tr>
<tr>
<td align="center"><code>:postal_horn:</code></td>
<td align="center">:postal_horn:</td>
<td align="center"><code>:mailbox_closed:</code></td>
<td align="center">:mailbox_closed:</td>
<td align="center"><code>:mailbox_with_mail:</code></td>
<td align="center">:mailbox_with_mail:</td>
</tr>
<tr>
<td align="center"><code>:mailbox_with_no_mail:</code></td>
<td align="center">:mailbox_with_no_mail:</td>
<td align="center"><code>:door:</code></td>
<td align="center">:door:</td>
<td align="center"><code>:smoking:</code></td>
<td align="center">:smoking:</td>
</tr>
<tr>
<td align="center"><code>:bomb:</code></td>
<td align="center">:bomb:</td>
<td align="center"><code>:gun:</code></td>
<td align="center">:gun:</td>
<td align="center"><code>:hocho:</code></td>
<td align="center">:hocho:</td>
</tr>
<tr>
<td align="center"><code>:pill:</code></td>
<td align="center">:pill:</td>
<td align="center"><code>:syringe:</code></td>
<td align="center">:syringe:</td>
<td align="center"><code>:page_facing_up:</code></td>
<td align="center">:page_facing_up:</td>
</tr>
<tr>
<td align="center"><code>:page_with_curl:</code></td>
<td align="center">:page_with_curl:</td>
<td align="center"><code>:bookmark_tabs:</code></td>
<td align="center">:bookmark_tabs:</td>
<td align="center"><code>:bar_chart:</code></td>
<td align="center">:bar_chart:</td>
</tr>
<tr>
<td align="center"><code>:chart_with_upwards_trend:</code></td>
<td align="center">:chart_with_upwards_trend:</td>
<td align="center"><code>:chart_with_downwards_trend:</code></td>
<td align="center">:chart_with_downwards_trend:</td>
<td align="center"><code>:scroll:</code></td>
<td align="center">:scroll:</td>
</tr>
<tr>
<td align="center"><code>:clipboard:</code></td>
<td align="center">:clipboard:</td>
<td align="center"><code>:calendar:</code></td>
<td align="center">:calendar:</td>
<td align="center"><code>:date:</code></td>
<td align="center">:date:</td>
</tr>
<tr>
<td align="center"><code>:card_index:</code></td>
<td align="center">:card_index:</td>
<td align="center"><code>:file_folder:</code></td>
<td align="center">:file_folder:</td>
<td align="center"><code>:open_file_folder:</code></td>
<td align="center">:open_file_folder:</td>
</tr>
<tr>
<td align="center"><code>:scissors:</code></td>
<td align="center">:scissors:</td>
<td align="center"><code>:pushpin:</code></td>
<td align="center">:pushpin:</td>
<td align="center"><code>:paperclip:</code></td>
<td align="center">:paperclip:</td>
</tr>
<tr>
<td align="center"><code>:black_nib:</code></td>
<td align="center">:black_nib:</td>
<td align="center"><code>:pencil2:</code></td>
<td align="center">:pencil2:</td>
<td align="center"><code>:straight_ruler:</code></td>
<td align="center">:straight_ruler:</td>
</tr>
<tr>
<td align="center"><code>:triangular_ruler:</code></td>
<td align="center">:triangular_ruler:</td>
<td align="center"><code>:closed_book:</code></td>
<td align="center">:closed_book:</td>
<td align="center"><code>:green_book:</code></td>
<td align="center">:green_book:</td>
</tr>
<tr>
<td align="center"><code>:blue_book:</code></td>
<td align="center">:blue_book:</td>
<td align="center"><code>:orange_book:</code></td>
<td align="center">:orange_book:</td>
<td align="center"><code>:notebook:</code></td>
<td align="center">:notebook:</td>
</tr>
<tr>
<td align="center"><code>:notebook_with_decorative_cover:</code></td>
<td align="center">:notebook_with_decorative_cover:</td>
<td align="center"><code>:ledger:</code></td>
<td align="center">:ledger:</td>
<td align="center"><code>:books:</code></td>
<td align="center">:books:</td>
</tr>
<tr>
<td align="center"><code>:bookmark:</code></td>
<td align="center">:bookmark:</td>
<td align="center"><code>:microscope:</code></td>
<td align="center">:microscope:</td>
<td align="center"><code>:telescope:</code></td>
<td align="center">:telescope:</td>
</tr>
<tr>
<td align="center"><code>:name_badge:</code></td>
<td align="center">:name_badge:</td>
<td align="center"><code>:newspaper:</code></td>
<td align="center">:newspaper:</td>
<td align="center"><code>:football:</code></td>
<td align="center">:football:</td>
</tr>
<tr>
<td align="center"><code>:basketball:</code></td>
<td align="center">:basketball:</td>
<td align="center"><code>:soccer:</code></td>
<td align="center">:soccer:</td>
<td align="center"><code>:baseball:</code></td>
<td align="center">:baseball:</td>
</tr>
<tr>
<td align="center"><code>:tennis:</code></td>
<td align="center">:tennis:</td>
<td align="center"><code>:8ball:</code></td>
<td align="center">:8ball:</td>
<td align="center"><code>:rugby_football:</code></td>
<td align="center">:rugby_football:</td>
</tr>
<tr>
<td align="center"><code>:bowling:</code></td>
<td align="center">:bowling:</td>
<td align="center"><code>:golf:</code></td>
<td align="center">:golf:</td>
<td align="center"><code>:mountain_bicyclist:</code></td>
<td align="center">:mountain_bicyclist:</td>
</tr>
<tr>
<td align="center"><code>:bicyclist:</code></td>
<td align="center">:bicyclist:</td>
<td align="center"><code>:horse_racing:</code></td>
<td align="center">:horse_racing:</td>
<td align="center"><code>:snowboarder:</code></td>
<td align="center">:snowboarder:</td>
</tr>
<tr>
<td align="center"><code>:swimmer:</code></td>
<td align="center">:swimmer:</td>
<td align="center"><code>:surfer:</code></td>
<td align="center">:surfer:</td>
<td align="center"><code>:ski:</code></td>
<td align="center">:ski:</td>
</tr>
<tr>
<td align="center"><code>:spades:</code></td>
<td align="center">:spades:</td>
<td align="center"><code>:hearts:</code></td>
<td align="center">:hearts:</td>
<td align="center"><code>:clubs:</code></td>
<td align="center">:clubs:</td>
</tr>
<tr>
<td align="center"><code>:diamonds:</code></td>
<td align="center">:diamonds:</td>
<td align="center"><code>:gem:</code></td>
<td align="center">:gem:</td>
<td align="center"><code>:ring:</code></td>
<td align="center">:ring:</td>
</tr>
<tr>
<td align="center"><code>:trophy:</code></td>
<td align="center">:trophy:</td>
<td align="center"><code>:musical_score:</code></td>
<td align="center">:musical_score:</td>
<td align="center"><code>:musical_keyboard:</code></td>
<td align="center">:musical_keyboard:</td>
</tr>
<tr>
<td align="center"><code>:violin:</code></td>
<td align="center">:violin:</td>
<td align="center"><code>:space_invader:</code></td>
<td align="center">:space_invader:</td>
<td align="center"><code>:video_game:</code></td>
<td align="center">:video_game:</td>
</tr>
<tr>
<td align="center"><code>:black_joker:</code></td>
<td align="center">:black_joker:</td>
<td align="center"><code>:flower_playing_cards:</code></td>
<td align="center">:flower_playing_cards:</td>
<td align="center"><code>:game_die:</code></td>
<td align="center">:game_die:</td>
</tr>
<tr>
<td align="center"><code>:dart:</code></td>
<td align="center">:dart:</td>
<td align="center"><code>:mahjong:</code></td>
<td align="center">:mahjong:</td>
<td align="center"><code>:clapper:</code></td>
<td align="center">:clapper:</td>
</tr>
<tr>
<td align="center"><code>:memo:</code></td>
<td align="center">:memo:</td>
<td align="center"><code>:pencil:</code></td>
<td align="center">:pencil:</td>
<td align="center"><code>:book:</code></td>
<td align="center">:book:</td>
</tr>
<tr>
<td align="center"><code>:art:</code></td>
<td align="center">:art:</td>
<td align="center"><code>:microphone:</code></td>
<td align="center">:microphone:</td>
<td align="center"><code>:headphones:</code></td>
<td align="center">:headphones:</td>
</tr>
<tr>
<td align="center"><code>:trumpet:</code></td>
<td align="center">:trumpet:</td>
<td align="center"><code>:saxophone:</code></td>
<td align="center">:saxophone:</td>
<td align="center"><code>:guitar:</code></td>
<td align="center">:guitar:</td>
</tr>
<tr>
<td align="center"><code>:shoe:</code></td>
<td align="center">:shoe:</td>
<td align="center"><code>:sandal:</code></td>
<td align="center">:sandal:</td>
<td align="center"><code>:high_heel:</code></td>
<td align="center">:high_heel:</td>
</tr>
<tr>
<td align="center"><code>:lipstick:</code></td>
<td align="center">:lipstick:</td>
<td align="center"><code>:boot:</code></td>
<td align="center">:boot:</td>
<td align="center"><code>:shirt:</code></td>
<td align="center">:shirt:</td>
</tr>
<tr>
<td align="center"><code>:tshirt:</code></td>
<td align="center">:tshirt:</td>
<td align="center"><code>:necktie:</code></td>
<td align="center">:necktie:</td>
<td align="center"><code>:womans_clothes:</code></td>
<td align="center">:womans_clothes:</td>
</tr>
<tr>
<td align="center"><code>:dress:</code></td>
<td align="center">:dress:</td>
<td align="center"><code>:running_shirt_with_sash:</code></td>
<td align="center">:running_shirt_with_sash:</td>
<td align="center"><code>:jeans:</code></td>
<td align="center">:jeans:</td>
</tr>
<tr>
<td align="center"><code>:kimono:</code></td>
<td align="center">:kimono:</td>
<td align="center"><code>:bikini:</code></td>
<td align="center">:bikini:</td>
<td align="center"><code>:ribbon:</code></td>
<td align="center">:ribbon:</td>
</tr>
<tr>
<td align="center"><code>:tophat:</code></td>
<td align="center">:tophat:</td>
<td align="center"><code>:crown:</code></td>
<td align="center">:crown:</td>
<td align="center"><code>:womans_hat:</code></td>
<td align="center">:womans_hat:</td>
</tr>
<tr>
<td align="center"><code>:mans_shoe:</code></td>
<td align="center">:mans_shoe:</td>
<td align="center"><code>:closed_umbrella:</code></td>
<td align="center">:closed_umbrella:</td>
<td align="center"><code>:briefcase:</code></td>
<td align="center">:briefcase:</td>
</tr>
<tr>
<td align="center"><code>:handbag:</code></td>
<td align="center">:handbag:</td>
<td align="center"><code>:pouch:</code></td>
<td align="center">:pouch:</td>
<td align="center"><code>:purse:</code></td>
<td align="center">:purse:</td>
</tr>
<tr>
<td align="center"><code>:eyeglasses:</code></td>
<td align="center">:eyeglasses:</td>
<td align="center"><code>:fishing_pole_and_fish:</code></td>
<td align="center">:fishing_pole_and_fish:</td>
<td align="center"><code>:coffee:</code></td>
<td align="center">:coffee:</td>
</tr>
<tr>
<td align="center"><code>:tea:</code></td>
<td align="center">:tea:</td>
<td align="center"><code>:sake:</code></td>
<td align="center">:sake:</td>
<td align="center"><code>:baby_bottle:</code></td>
<td align="center">:baby_bottle:</td>
</tr>
<tr>
<td align="center"><code>:beer:</code></td>
<td align="center">:beer:</td>
<td align="center"><code>:beers:</code></td>
<td align="center">:beers:</td>
<td align="center"><code>:cocktail:</code></td>
<td align="center">:cocktail:</td>
</tr>
<tr>
<td align="center"><code>:tropical_drink:</code></td>
<td align="center">:tropical_drink:</td>
<td align="center"><code>:wine_glass:</code></td>
<td align="center">:wine_glass:</td>
<td align="center"><code>:fork_and_knife:</code></td>
<td align="center">:fork_and_knife:</td>
</tr>
<tr>
<td align="center"><code>:pizza:</code></td>
<td align="center">:pizza:</td>
<td align="center"><code>:hamburger:</code></td>
<td align="center">:hamburger:</td>
<td align="center"><code>:fries:</code></td>
<td align="center">:fries:</td>
</tr>
<tr>
<td align="center"><code>:poultry_leg:</code></td>
<td align="center">:poultry_leg:</td>
<td align="center"><code>:meat_on_bone:</code></td>
<td align="center">:meat_on_bone:</td>
<td align="center"><code>:spaghetti:</code></td>
<td align="center">:spaghetti:</td>
</tr>
<tr>
<td align="center"><code>:curry:</code></td>
<td align="center">:curry:</td>
<td align="center"><code>:fried_shrimp:</code></td>
<td align="center">:fried_shrimp:</td>
<td align="center"><code>:bento:</code></td>
<td align="center">:bento:</td>
</tr>
<tr>
<td align="center"><code>:sushi:</code></td>
<td align="center">:sushi:</td>
<td align="center"><code>:fish_cake:</code></td>
<td align="center">:fish_cake:</td>
<td align="center"><code>:rice_ball:</code></td>
<td align="center">:rice_ball:</td>
</tr>
<tr>
<td align="center"><code>:rice_cracker:</code></td>
<td align="center">:rice_cracker:</td>
<td align="center"><code>:rice:</code></td>
<td align="center">:rice:</td>
<td align="center"><code>:ramen:</code></td>
<td align="center">:ramen:</td>
</tr>
<tr>
<td align="center"><code>:stew:</code></td>
<td align="center">:stew:</td>
<td align="center"><code>:oden:</code></td>
<td align="center">:oden:</td>
<td align="center"><code>:dango:</code></td>
<td align="center">:dango:</td>
</tr>
<tr>
<td align="center"><code>:egg:</code></td>
<td align="center">:egg:</td>
<td align="center"><code>:bread:</code></td>
<td align="center">:bread:</td>
<td align="center"><code>:doughnut:</code></td>
<td align="center">:doughnut:</td>
</tr>
<tr>
<td align="center"><code>:custard:</code></td>
<td align="center">:custard:</td>
<td align="center"><code>:icecream:</code></td>
<td align="center">:icecream:</td>
<td align="center"><code>:ice_cream:</code></td>
<td align="center">:ice_cream:</td>
</tr>
<tr>
<td align="center"><code>:shaved_ice:</code></td>
<td align="center">:shaved_ice:</td>
<td align="center"><code>:birthday:</code></td>
<td align="center">:birthday:</td>
<td align="center"><code>:cake:</code></td>
<td align="center">:cake:</td>
</tr>
<tr>
<td align="center"><code>:cookie:</code></td>
<td align="center">:cookie:</td>
<td align="center"><code>:chocolate_bar:</code></td>
<td align="center">:chocolate_bar:</td>
<td align="center"><code>:candy:</code></td>
<td align="center">:candy:</td>
</tr>
<tr>
<td align="center"><code>:lollipop:</code></td>
<td align="center">:lollipop:</td>
<td align="center"><code>:honey_pot:</code></td>
<td align="center">:honey_pot:</td>
<td align="center"><code>:apple:</code></td>
<td align="center">:apple:</td>
</tr>
<tr>
<td align="center"><code>:green_apple:</code></td>
<td align="center">:green_apple:</td>
<td align="center"><code>:tangerine:</code></td>
<td align="center">:tangerine:</td>
<td align="center"><code>:lemon:</code></td>
<td align="center">:lemon:</td>
</tr>
<tr>
<td align="center"><code>:cherries:</code></td>
<td align="center">:cherries:</td>
<td align="center"><code>:grapes:</code></td>
<td align="center">:grapes:</td>
<td align="center"><code>:watermelon:</code></td>
<td align="center">:watermelon:</td>
</tr>
<tr>
<td align="center"><code>:strawberry:</code></td>
<td align="center">:strawberry:</td>
<td align="center"><code>:peach:</code></td>
<td align="center">:peach:</td>
<td align="center"><code>:melon:</code></td>
<td align="center">:melon:</td>
</tr>
<tr>
<td align="center"><code>:banana:</code></td>
<td align="center">:banana:</td>
<td align="center"><code>:pear:</code></td>
<td align="center">:pear:</td>
<td align="center"><code>:pineapple:</code></td>
<td align="center">:pineapple:</td>
</tr>
<tr>
<td align="center"><code>:sweet_potato:</code></td>
<td align="center">:sweet_potato:</td>
<td align="center"><code>:eggplant:</code></td>
<td align="center">:eggplant:</td>
<td align="center"><code>:tomato:</code></td>
<td align="center">:tomato:</td>
</tr>
<tr>
<td align="center"><code>:corn:</code></td>
<td align="center">:corn:</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h2><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:house:</code></td>
<td align="center">:house:</td>
<td align="center"><code>:house_with_garden:</code></td>
<td align="center">:house_with_garden:</td>
<td align="center"><code>:school:</code></td>
<td align="center">:school:</td>
</tr>
<tr>
<td align="center"><code>:office:</code></td>
<td align="center">:office:</td>
<td align="center"><code>:post_office:</code></td>
<td align="center">:post_office:</td>
<td align="center"><code>:hospital:</code></td>
<td align="center">:hospital:</td>
</tr>
<tr>
<td align="center"><code>:bank:</code></td>
<td align="center">:bank:</td>
<td align="center"><code>:convenience_store:</code></td>
<td align="center">:convenience_store:</td>
<td align="center"><code>:love_hotel:</code></td>
<td align="center">:love_hotel:</td>
</tr>
<tr>
<td align="center"><code>:hotel:</code></td>
<td align="center">:hotel:</td>
<td align="center"><code>:wedding:</code></td>
<td align="center">:wedding:</td>
<td align="center"><code>:church:</code></td>
<td align="center">:church:</td>
</tr>
<tr>
<td align="center"><code>:department_store:</code></td>
<td align="center">:department_store:</td>
<td align="center"><code>:european_post_office:</code></td>
<td align="center">:european_post_office:</td>
<td align="center"><code>:city_sunrise:</code></td>
<td align="center">:city_sunrise:</td>
</tr>
<tr>
<td align="center"><code>:city_sunset:</code></td>
<td align="center">:city_sunset:</td>
<td align="center"><code>:japanese_castle:</code></td>
<td align="center">:japanese_castle:</td>
<td align="center"><code>:european_castle:</code></td>
<td align="center">:european_castle:</td>
</tr>
<tr>
<td align="center"><code>:tent:</code></td>
<td align="center">:tent:</td>
<td align="center"><code>:factory:</code></td>
<td align="center">:factory:</td>
<td align="center"><code>:tokyo_tower:</code></td>
<td align="center">:tokyo_tower:</td>
</tr>
<tr>
<td align="center"><code>:japan:</code></td>
<td align="center">:japan:</td>
<td align="center"><code>:mount_fuji:</code></td>
<td align="center">:mount_fuji:</td>
<td align="center"><code>:sunrise_over_mountains:</code></td>
<td align="center">:sunrise_over_mountains:</td>
</tr>
<tr>
<td align="center"><code>:sunrise:</code></td>
<td align="center">:sunrise:</td>
<td align="center"><code>:stars:</code></td>
<td align="center">:stars:</td>
<td align="center"><code>:statue_of_liberty:</code></td>
<td align="center">:statue_of_liberty:</td>
</tr>
<tr>
<td align="center"><code>:bridge_at_night:</code></td>
<td align="center">:bridge_at_night:</td>
<td align="center"><code>:carousel_horse:</code></td>
<td align="center">:carousel_horse:</td>
<td align="center"><code>:rainbow:</code></td>
<td align="center">:rainbow:</td>
</tr>
<tr>
<td align="center"><code>:ferris_wheel:</code></td>
<td align="center">:ferris_wheel:</td>
<td align="center"><code>:fountain:</code></td>
<td align="center">:fountain:</td>
<td align="center"><code>:roller_coaster:</code></td>
<td align="center">:roller_coaster:</td>
</tr>
<tr>
<td align="center"><code>:ship:</code></td>
<td align="center">:ship:</td>
<td align="center"><code>:speedboat:</code></td>
<td align="center">:speedboat:</td>
<td align="center"><code>:boat:</code></td>
<td align="center">:boat:</td>
</tr>
<tr>
<td align="center"><code>:sailboat:</code></td>
<td align="center">:sailboat:</td>
<td align="center"><code>:rowboat:</code></td>
<td align="center">:rowboat:</td>
<td align="center"><code>:anchor:</code></td>
<td align="center">:anchor:</td>
</tr>
<tr>
<td align="center"><code>:rocket:</code></td>
<td align="center">:rocket:</td>
<td align="center"><code>:airplane:</code></td>
<td align="center">:airplane:</td>
<td align="center"><code>:helicopter:</code></td>
<td align="center">:helicopter:</td>
</tr>
<tr>
<td align="center"><code>:steam_locomotive:</code></td>
<td align="center">:steam_locomotive:</td>
<td align="center"><code>:tram:</code></td>
<td align="center">:tram:</td>
<td align="center"><code>:mountain_railway:</code></td>
<td align="center">:mountain_railway:</td>
</tr>
<tr>
<td align="center"><code>:bike:</code></td>
<td align="center">:bike:</td>
<td align="center"><code>:aerial_tramway:</code></td>
<td align="center">:aerial_tramway:</td>
<td align="center"><code>:suspension_railway:</code></td>
<td align="center">:suspension_railway:</td>
</tr>
<tr>
<td align="center"><code>:mountain_cableway:</code></td>
<td align="center">:mountain_cableway:</td>
<td align="center"><code>:tractor:</code></td>
<td align="center">:tractor:</td>
<td align="center"><code>:blue_car:</code></td>
<td align="center">:blue_car:</td>
</tr>
<tr>
<td align="center"><code>:oncoming_automobile:</code></td>
<td align="center">:oncoming_automobile:</td>
<td align="center"><code>:car:</code></td>
<td align="center">:car:</td>
<td align="center"><code>:red_car:</code></td>
<td align="center">:red_car:</td>
</tr>
<tr>
<td align="center"><code>:taxi:</code></td>
<td align="center">:taxi:</td>
<td align="center"><code>:oncoming_taxi:</code></td>
<td align="center">:oncoming_taxi:</td>
<td align="center"><code>:articulated_lorry:</code></td>
<td align="center">:articulated_lorry:</td>
</tr>
<tr>
<td align="center"><code>:bus:</code></td>
<td align="center">:bus:</td>
<td align="center"><code>:oncoming_bus:</code></td>
<td align="center">:oncoming_bus:</td>
<td align="center"><code>:rotating_light:</code></td>
<td align="center">:rotating_light:</td>
</tr>
<tr>
<td align="center"><code>:police_car:</code></td>
<td align="center">:police_car:</td>
<td align="center"><code>:oncoming_police_car:</code></td>
<td align="center">:oncoming_police_car:</td>
<td align="center"><code>:fire_engine:</code></td>
<td align="center">:fire_engine:</td>
</tr>
<tr>
<td align="center"><code>:ambulance:</code></td>
<td align="center">:ambulance:</td>
<td align="center"><code>:minibus:</code></td>
<td align="center">:minibus:</td>
<td align="center"><code>:truck:</code></td>
<td align="center">:truck:</td>
</tr>
<tr>
<td align="center"><code>:train:</code></td>
<td align="center">:train:</td>
<td align="center"><code>:station:</code></td>
<td align="center">:station:</td>
<td align="center"><code>:train2:</code></td>
<td align="center">:train2:</td>
</tr>
<tr>
<td align="center"><code>:bullettrain_front:</code></td>
<td align="center">:bullettrain_front:</td>
<td align="center"><code>:bullettrain_side:</code></td>
<td align="center">:bullettrain_side:</td>
<td align="center"><code>:light_rail:</code></td>
<td align="center">:light_rail:</td>
</tr>
<tr>
<td align="center"><code>:monorail:</code></td>
<td align="center">:monorail:</td>
<td align="center"><code>:railway_car:</code></td>
<td align="center">:railway_car:</td>
<td align="center"><code>:trolleybus:</code></td>
<td align="center">:trolleybus:</td>
</tr>
<tr>
<td align="center"><code>:ticket:</code></td>
<td align="center">:ticket:</td>
<td align="center"><code>:fuelpump:</code></td>
<td align="center">:fuelpump:</td>
<td align="center"><code>:vertical_traffic_light:</code></td>
<td align="center">:vertical_traffic_light:</td>
</tr>
<tr>
<td align="center"><code>:traffic_light:</code></td>
<td align="center">:traffic_light:</td>
<td align="center"><code>:warning:</code></td>
<td align="center">:warning:</td>
<td align="center"><code>:construction:</code></td>
<td align="center">:construction:</td>
</tr>
<tr>
<td align="center"><code>:beginner:</code></td>
<td align="center">:beginner:</td>
<td align="center"><code>:atm:</code></td>
<td align="center">:atm:</td>
<td align="center"><code>:slot_machine:</code></td>
<td align="center">:slot_machine:</td>
</tr>
<tr>
<td align="center"><code>:busstop:</code></td>
<td align="center">:busstop:</td>
<td align="center"><code>:barber:</code></td>
<td align="center">:barber:</td>
<td align="center"><code>:hotsprings:</code></td>
<td align="center">:hotsprings:</td>
</tr>
<tr>
<td align="center"><code>:checkered_flag:</code></td>
<td align="center">:checkered_flag:</td>
<td align="center"><code>:crossed_flags:</code></td>
<td align="center">:crossed_flags:</td>
<td align="center"><code>:izakaya_lantern:</code></td>
<td align="center">:izakaya_lantern:</td>
</tr>
<tr>
<td align="center"><code>:moyai:</code></td>
<td align="center">:moyai:</td>
<td align="center"><code>:circus_tent:</code></td>
<td align="center">:circus_tent:</td>
<td align="center"><code>:performing_arts:</code></td>
<td align="center">:performing_arts:</td>
</tr>
<tr>
<td align="center"><code>:round_pushpin:</code></td>
<td align="center">:round_pushpin:</td>
<td align="center"><code>:triangular_flag_on_post:</code></td>
<td align="center">:triangular_flag_on_post:</td>
<td align="center"><code>:jp:</code></td>
<td align="center">:jp:</td>
</tr>
<tr>
<td align="center"><code>:kr:</code></td>
<td align="center">:kr:</td>
<td align="center"><code>:cn:</code></td>
<td align="center">:cn:</td>
<td align="center"><code>:us:</code></td>
<td align="center">:us:</td>
</tr>
<tr>
<td align="center"><code>:fr:</code></td>
<td align="center">:fr:</td>
<td align="center"><code>:es:</code></td>
<td align="center">:es:</td>
<td align="center"><code>:it:</code></td>
<td align="center">:it:</td>
</tr>
<tr>
<td align="center"><code>:ru:</code></td>
<td align="center">:ru:</td>
<td align="center"><code>:gb:</code></td>
<td align="center">:gb:</td>
<td align="center"><code>:uk:</code></td>
<td align="center">:uk:</td>
</tr>
<tr>
<td align="center"><code>:de:</code></td>
<td align="center">:de:</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:one:</code></td>
<td align="center">:one:</td>
<td align="center"><code>:two:</code></td>
<td align="center">:two:</td>
<td align="center"><code>:three:</code></td>
<td align="center">:three:</td>
</tr>
<tr>
<td align="center"><code>:four:</code></td>
<td align="center">:four:</td>
<td align="center"><code>:five:</code></td>
<td align="center">:five:</td>
<td align="center"><code>:six:</code></td>
<td align="center">:six:</td>
</tr>
<tr>
<td align="center"><code>:seven:</code></td>
<td align="center">:seven:</td>
<td align="center"><code>:eight:</code></td>
<td align="center">:eight:</td>
<td align="center"><code>:nine:</code></td>
<td align="center">:nine:</td>
</tr>
<tr>
<td align="center"><code>:keycap_ten:</code></td>
<td align="center">:keycap_ten:</td>
<td align="center"><code>:1234:</code></td>
<td align="center">:1234:</td>
<td align="center"><code>:zero:</code></td>
<td align="center">:zero:</td>
</tr>
<tr>
<td align="center"><code>:hash:</code></td>
<td align="center">:hash:</td>
<td align="center"><code>:symbols:</code></td>
<td align="center">:symbols:</td>
<td align="center"><code>:arrow_backward:</code></td>
<td align="center">:arrow_backward:</td>
</tr>
<tr>
<td align="center"><code>:arrow_down:</code></td>
<td align="center">:arrow_down:</td>
<td align="center"><code>:arrow_forward:</code></td>
<td align="center">:arrow_forward:</td>
<td align="center"><code>:arrow_left:</code></td>
<td align="center">:arrow_left:</td>
</tr>
<tr>
<td align="center"><code>:capital_abcd:</code></td>
<td align="center">:capital_abcd:</td>
<td align="center"><code>:abcd:</code></td>
<td align="center">:abcd:</td>
<td align="center"><code>:abc:</code></td>
<td align="center">:abc:</td>
</tr>
<tr>
<td align="center"><code>:arrow_lower_left:</code></td>
<td align="center">:arrow_lower_left:</td>
<td align="center"><code>:arrow_lower_right:</code></td>
<td align="center">:arrow_lower_right:</td>
<td align="center"><code>:arrow_right:</code></td>
<td align="center">:arrow_right:</td>
</tr>
<tr>
<td align="center"><code>:arrow_up:</code></td>
<td align="center">:arrow_up:</td>
<td align="center"><code>:arrow_upper_left:</code></td>
<td align="center">:arrow_upper_left:</td>
<td align="center"><code>:arrow_upper_right:</code></td>
<td align="center">:arrow_upper_right:</td>
</tr>
<tr>
<td align="center"><code>:arrow_double_down:</code></td>
<td align="center">:arrow_double_down:</td>
<td align="center"><code>:arrow_double_up:</code></td>
<td align="center">:arrow_double_up:</td>
<td align="center"><code>:arrow_down_small:</code></td>
<td align="center">:arrow_down_small:</td>
</tr>
<tr>
<td align="center"><code>:arrow_heading_down:</code></td>
<td align="center">:arrow_heading_down:</td>
<td align="center"><code>:arrow_heading_up:</code></td>
<td align="center">:arrow_heading_up:</td>
<td align="center"><code>:leftwards_arrow_with_hook:</code></td>
<td align="center">:leftwards_arrow_with_hook:</td>
</tr>
<tr>
<td align="center"><code>:arrow_right_hook:</code></td>
<td align="center">:arrow_right_hook:</td>
<td align="center"><code>:left_right_arrow:</code></td>
<td align="center">:left_right_arrow:</td>
<td align="center"><code>:arrow_up_down:</code></td>
<td align="center">:arrow_up_down:</td>
</tr>
<tr>
<td align="center"><code>:arrow_up_small:</code></td>
<td align="center">:arrow_up_small:</td>
<td align="center"><code>:arrows_clockwise:</code></td>
<td align="center">:arrows_clockwise:</td>
<td align="center"><code>:arrows_counterclockwise:</code></td>
<td align="center">:arrows_counterclockwise:</td>
</tr>
<tr>
<td align="center"><code>:rewind:</code></td>
<td align="center">:rewind:</td>
<td align="center"><code>:fast_forward:</code></td>
<td align="center">:fast_forward:</td>
<td align="center"><code>:information_source:</code></td>
<td align="center">:information_source:</td>
</tr>
<tr>
<td align="center"><code>:ok:</code></td>
<td align="center">:ok:</td>
<td align="center"><code>:twisted_rightwards_arrows:</code></td>
<td align="center">:twisted_rightwards_arrows:</td>
<td align="center"><code>:repeat:</code></td>
<td align="center">:repeat:</td>
</tr>
<tr>
<td align="center"><code>:repeat_one:</code></td>
<td align="center">:repeat_one:</td>
<td align="center"><code>:new:</code></td>
<td align="center">:new:</td>
<td align="center"><code>:top:</code></td>
<td align="center">:top:</td>
</tr>
<tr>
<td align="center"><code>:up:</code></td>
<td align="center">:up:</td>
<td align="center"><code>:cool:</code></td>
<td align="center">:cool:</td>
<td align="center"><code>:free:</code></td>
<td align="center">:free:</td>
</tr>
<tr>
<td align="center"><code>:ng:</code></td>
<td align="center">:ng:</td>
<td align="center"><code>:cinema:</code></td>
<td align="center">:cinema:</td>
<td align="center"><code>:koko:</code></td>
<td align="center">:koko:</td>
</tr>
<tr>
<td align="center"><code>:signal_strength:</code></td>
<td align="center">:signal_strength:</td>
<td align="center"><code>:u5272:</code></td>
<td align="center">:u5272:</td>
<td align="center"><code>:u5408:</code></td>
<td align="center">:u5408:</td>
</tr>
<tr>
<td align="center"><code>:u55b6:</code></td>
<td align="center">:u55b6:</td>
<td align="center"><code>:u6307:</code></td>
<td align="center">:u6307:</td>
<td align="center"><code>:u6708:</code></td>
<td align="center">:u6708:</td>
</tr>
<tr>
<td align="center"><code>:u6709:</code></td>
<td align="center">:u6709:</td>
<td align="center"><code>:u6e80:</code></td>
<td align="center">:u6e80:</td>
<td align="center"><code>:u7121:</code></td>
<td align="center">:u7121:</td>
</tr>
<tr>
<td align="center"><code>:u7533:</code></td>
<td align="center">:u7533:</td>
<td align="center"><code>:u7a7a:</code></td>
<td align="center">:u7a7a:</td>
<td align="center"><code>:u7981:</code></td>
<td align="center">:u7981:</td>
</tr>
<tr>
<td align="center"><code>:sa:</code></td>
<td align="center">:sa:</td>
<td align="center"><code>:restroom:</code></td>
<td align="center">:restroom:</td>
<td align="center"><code>:mens:</code></td>
<td align="center">:mens:</td>
</tr>
<tr>
<td align="center"><code>:womens:</code></td>
<td align="center">:womens:</td>
<td align="center"><code>:baby_symbol:</code></td>
<td align="center">:baby_symbol:</td>
<td align="center"><code>:no_smoking:</code></td>
<td align="center">:no_smoking:</td>
</tr>
<tr>
<td align="center"><code>:parking:</code></td>
<td align="center">:parking:</td>
<td align="center"><code>:wheelchair:</code></td>
<td align="center">:wheelchair:</td>
<td align="center"><code>:metro:</code></td>
<td align="center">:metro:</td>
</tr>
<tr>
<td align="center"><code>:baggage_claim:</code></td>
<td align="center">:baggage_claim:</td>
<td align="center"><code>:accept:</code></td>
<td align="center">:accept:</td>
<td align="center"><code>:wc:</code></td>
<td align="center">:wc:</td>
</tr>
<tr>
<td align="center"><code>:potable_water:</code></td>
<td align="center">:potable_water:</td>
<td align="center"><code>:put_litter_in_its_place:</code></td>
<td align="center">:put_litter_in_its_place:</td>
<td align="center"><code>:secret:</code></td>
<td align="center">:secret:</td>
</tr>
<tr>
<td align="center"><code>:congratulations:</code></td>
<td align="center">:congratulations:</td>
<td align="center"><code>:m:</code></td>
<td align="center">:m:</td>
<td align="center"><code>:passport_control:</code></td>
<td align="center">:passport_control:</td>
</tr>
<tr>
<td align="center"><code>:left_luggage:</code></td>
<td align="center">:left_luggage:</td>
<td align="center"><code>:customs:</code></td>
<td align="center">:customs:</td>
<td align="center"><code>:ideograph_advantage:</code></td>
<td align="center">:ideograph_advantage:</td>
</tr>
<tr>
<td align="center"><code>:cl:</code></td>
<td align="center">:cl:</td>
<td align="center"><code>:sos:</code></td>
<td align="center">:sos:</td>
<td align="center"><code>:id:</code></td>
<td align="center">:id:</td>
</tr>
<tr>
<td align="center"><code>:no_entry_sign:</code></td>
<td align="center">:no_entry_sign:</td>
<td align="center"><code>:underage:</code></td>
<td align="center">:underage:</td>
<td align="center"><code>:no_mobile_phones:</code></td>
<td align="center">:no_mobile_phones:</td>
</tr>
<tr>
<td align="center"><code>:do_not_litter:</code></td>
<td align="center">:do_not_litter:</td>
<td align="center"><code>:non-potable_water:</code></td>
<td align="center">:non-potable_water:</td>
<td align="center"><code>:no_bicycles:</code></td>
<td align="center">:no_bicycles:</td>
</tr>
<tr>
<td align="center"><code>:no_pedestrians:</code></td>
<td align="center">:no_pedestrians:</td>
<td align="center"><code>:children_crossing:</code></td>
<td align="center">:children_crossing:</td>
<td align="center"><code>:no_entry:</code></td>
<td align="center">:no_entry:</td>
</tr>
<tr>
<td align="center"><code>:eight_spoked_asterisk:</code></td>
<td align="center">:eight_spoked_asterisk:</td>
<td align="center"><code>:eight_pointed_black_star:</code></td>
<td align="center">:eight_pointed_black_star:</td>
<td align="center"><code>:heart_decoration:</code></td>
<td align="center">:heart_decoration:</td>
</tr>
<tr>
<td align="center"><code>:vs:</code></td>
<td align="center">:vs:</td>
<td align="center"><code>:vibration_mode:</code></td>
<td align="center">:vibration_mode:</td>
<td align="center"><code>:mobile_phone_off:</code></td>
<td align="center">:mobile_phone_off:</td>
</tr>
<tr>
<td align="center"><code>:chart:</code></td>
<td align="center">:chart:</td>
<td align="center"><code>:currency_exchange:</code></td>
<td align="center">:currency_exchange:</td>
<td align="center"><code>:aries:</code></td>
<td align="center">:aries:</td>
</tr>
<tr>
<td align="center"><code>:taurus:</code></td>
<td align="center">:taurus:</td>
<td align="center"><code>:gemini:</code></td>
<td align="center">:gemini:</td>
<td align="center"><code>:cancer:</code></td>
<td align="center">:cancer:</td>
</tr>
<tr>
<td align="center"><code>:leo:</code></td>
<td align="center">:leo:</td>
<td align="center"><code>:virgo:</code></td>
<td align="center">:virgo:</td>
<td align="center"><code>:libra:</code></td>
<td align="center">:libra:</td>
</tr>
<tr>
<td align="center"><code>:scorpius:</code></td>
<td align="center">:scorpius:</td>
<td align="center"><code>:sagittarius:</code></td>
<td align="center">:sagittarius:</td>
<td align="center"><code>:capricorn:</code></td>
<td align="center">:capricorn:</td>
</tr>
<tr>
<td align="center"><code>:aquarius:</code></td>
<td align="center">:aquarius:</td>
<td align="center"><code>:pisces:</code></td>
<td align="center">:pisces:</td>
<td align="center"><code>:ophiuchus:</code></td>
<td align="center">:ophiuchus:</td>
</tr>
<tr>
<td align="center"><code>:six_pointed_star:</code></td>
<td align="center">:six_pointed_star:</td>
<td align="center"><code>:negative_squared_cross_mark:</code></td>
<td align="center">:negative_squared_cross_mark:</td>
<td align="center"><code>:a:</code></td>
<td align="center">:a:</td>
</tr>
<tr>
<td align="center"><code>:b:</code></td>
<td align="center">:b:</td>
<td align="center"><code>:ab:</code></td>
<td align="center">:ab:</td>
<td align="center"><code>:o2:</code></td>
<td align="center">:o2:</td>
</tr>
<tr>
<td align="center"><code>:diamond_shape_with_a_dot_inside:</code></td>
<td align="center">:diamond_shape_with_a_dot_inside:</td>
<td align="center"><code>:recycle:</code></td>
<td align="center">:recycle:</td>
<td align="center"><code>:end:</code></td>
<td align="center">:end:</td>
</tr>
<tr>
<td align="center"><code>:on:</code></td>
<td align="center">:on:</td>
<td align="center"><code>:soon:</code></td>
<td align="center">:soon:</td>
<td align="center"><code>:clock1:</code></td>
<td align="center">:clock1:</td>
</tr>
<tr>
<td align="center"><code>:clock130:</code></td>
<td align="center">:clock130:</td>
<td align="center"><code>:clock10:</code></td>
<td align="center">:clock10:</td>
<td align="center"><code>:clock1030:</code></td>
<td align="center">:clock1030:</td>
</tr>
<tr>
<td align="center"><code>:clock11:</code></td>
<td align="center">:clock11:</td>
<td align="center"><code>:clock1130:</code></td>
<td align="center">:clock1130:</td>
<td align="center"><code>:clock12:</code></td>
<td align="center">:clock12:</td>
</tr>
<tr>
<td align="center"><code>:clock1230:</code></td>
<td align="center">:clock1230:</td>
<td align="center"><code>:clock2:</code></td>
<td align="center">:clock2:</td>
<td align="center"><code>:clock230:</code></td>
<td align="center">:clock230:</td>
</tr>
<tr>
<td align="center"><code>:clock3:</code></td>
<td align="center">:clock3:</td>
<td align="center"><code>:clock330:</code></td>
<td align="center">:clock330:</td>
<td align="center"><code>:clock4:</code></td>
<td align="center">:clock4:</td>
</tr>
<tr>
<td align="center"><code>:clock430:</code></td>
<td align="center">:clock430:</td>
<td align="center"><code>:clock5:</code></td>
<td align="center">:clock5:</td>
<td align="center"><code>:clock530:</code></td>
<td align="center">:clock530:</td>
</tr>
<tr>
<td align="center"><code>:clock6:</code></td>
<td align="center">:clock6:</td>
<td align="center"><code>:clock630:</code></td>
<td align="center">:clock630:</td>
<td align="center"><code>:clock7:</code></td>
<td align="center">:clock7:</td>
</tr>
<tr>
<td align="center"><code>:clock730:</code></td>
<td align="center">:clock730:</td>
<td align="center"><code>:clock8:</code></td>
<td align="center">:clock8:</td>
<td align="center"><code>:clock830:</code></td>
<td align="center">:clock830:</td>
</tr>
<tr>
<td align="center"><code>:clock9:</code></td>
<td align="center">:clock9:</td>
<td align="center"><code>:clock930:</code></td>
<td align="center">:clock930:</td>
<td align="center"><code>:heavy_dollar_sign:</code></td>
<td align="center">:heavy_dollar_sign:</td>
</tr>
<tr>
<td align="center"><code>:copyright:</code></td>
<td align="center">:copyright:</td>
<td align="center"><code>:registered:</code></td>
<td align="center">:registered:</td>
<td align="center"><code>:tm:</code></td>
<td align="center">:tm:</td>
</tr>
<tr>
<td align="center"><code>:x:</code></td>
<td align="center">:x:</td>
<td align="center"><code>:heavy_exclamation_mark:</code></td>
<td align="center">:heavy_exclamation_mark:</td>
<td align="center"><code>:bangbang:</code></td>
<td align="center">:bangbang:</td>
</tr>
<tr>
<td align="center"><code>:interrobang:</code></td>
<td align="center">:interrobang:</td>
<td align="center"><code>:o:</code></td>
<td align="center">:o:</td>
<td align="center"><code>:heavy_multiplication_x:</code></td>
<td align="center">:heavy_multiplication_x:</td>
</tr>
<tr>
<td align="center"><code>:heavy_plus_sign:</code></td>
<td align="center">:heavy_plus_sign:</td>
<td align="center"><code>:heavy_minus_sign:</code></td>
<td align="center">:heavy_minus_sign:</td>
<td align="center"><code>:heavy_division_sign:</code></td>
<td align="center">:heavy_division_sign:</td>
</tr>
<tr>
<td align="center"><code>:white_flower:</code></td>
<td align="center">:white_flower:</td>
<td align="center"><code>:100:</code></td>
<td align="center">:100:</td>
<td align="center"><code>:heavy_check_mark:</code></td>
<td align="center">:heavy_check_mark:</td>
</tr>
<tr>
<td align="center"><code>:ballot_box_with_check:</code></td>
<td align="center">:ballot_box_with_check:</td>
<td align="center"><code>:radio_button:</code></td>
<td align="center">:radio_button:</td>
<td align="center"><code>:link:</code></td>
<td align="center">:link:</td>
</tr>
<tr>
<td align="center"><code>:curly_loop:</code></td>
<td align="center">:curly_loop:</td>
<td align="center"><code>:wavy_dash:</code></td>
<td align="center">:wavy_dash:</td>
<td align="center"><code>:part_alternation_mark:</code></td>
<td align="center">:part_alternation_mark:</td>
</tr>
<tr>
<td align="center"><code>:trident:</code></td>
<td align="center">:trident:</td>
<td align="center"><code>:black_large_square:</code></td>
<td align="center">:black_large_square:</td>
<td align="center"><code>:white_large_square:</code></td>
<td align="center">:white_large_square:</td>
</tr>
<tr>
<td align="center"><code>:white_check_mark:</code></td>
<td align="center">:white_check_mark:</td>
<td align="center"><code>:white_square_button:</code></td>
<td align="center">:white_square_button:</td>
<td align="center"><code>:black_square_button:</code></td>
<td align="center">:black_square_button:</td>
</tr>
<tr>
<td align="center"><code>:black_circle:</code></td>
<td align="center">:black_circle:</td>
<td align="center"><code>:white_circle:</code></td>
<td align="center">:white_circle:</td>
<td align="center"><code>:red_circle:</code></td>
<td align="center">:red_circle:</td>
</tr>
<tr>
<td align="center"><code>:large_blue_circle:</code></td>
<td align="center">:large_blue_circle:</td>
<td align="center"><code>:large_blue_diamond:</code></td>
<td align="center">:large_blue_diamond:</td>
<td align="center"><code>:large_orange_diamond:</code></td>
<td align="center">:large_orange_diamond:</td>
</tr>
<tr>
<td align="center"><code>:small_blue_diamond:</code></td>
<td align="center">:small_blue_diamond:</td>
<td align="center"><code>:small_orange_diamond:</code></td>
<td align="center">:small_orange_diamond:</td>
<td align="center"><code>:small_red_triangle:</code></td>
<td align="center">:small_red_triangle:</td>
</tr>
<tr>
<td align="center"><code>:small_red_triangle_down:</code></td>
<td align="center">:small_red_triangle_down:</td>
<td align="center"><code>:shipit:</code></td>
<td align="center">:shipit:</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>集合</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p>
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/posts/63534.html</url>
    <content><![CDATA[<hr>
<p>title: test</p>
<hr>
<p>test</p>
]]></content>
  </entry>
  <entry>
    <title>hello hexo blog</title>
    <url>/posts/15624.html</url>
    <content><![CDATA[<p>####1、新博客创建</p>
<p>1.在source文件中进行.md文件的创建，这个文件就是新的博客文件</p>
<pre><code>博客上端要有title（标题）、date（日期）、tags（标签）等记录</code></pre><p>2、通过hexo进行博客渲染和上传</p>
<pre><code>hexo g    渲染
hexo d    上传</code></pre><p>然后先执行hexo clean，然后重新hexo g，并且hexo d<br>hexo g<br>hexo d<br>$ hexo generate          //生成静态页面</p>
<p>$ hexo deploy            //部署到Github</p>
<img src= "/img/loading.gif" data-src="https://raw.githubusercontent.com/wangchuanli001/Resume/master/img/emps.jpg">
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pm2在Linux后台监控hexo运行</title>
    <url>/posts/3791.html</url>
    <content><![CDATA[<p>自己搭建了一个Hexo渲染的博客，并用Nginx为他作了反代，根据官方的方式使用 hexo server &amp; 时发现，当我关闭终端时博客也就关闭了，并不能一直在后台运行，查阅资料发现可以通过pm2来托管。</p>
<p>第一步，安装pm2</p>
<p>npm install -g pm2</p>
<p>第二步，在博客根目录写一个名为hexo_run.js的脚本</p>
<p>//run<br>const { exec } = require(‘child_process’)<br>exec(‘hexo server’,(error, stdout, stderr) =&gt; {<br>        if(error){<br>                console.log(‘exec error: ${error}’)<br>                return<br>        }<br>        console.log(‘stdout: ${stdout}’);<br>        console.log(‘stderr: ${stderr}’);<br>})</p>
<p>第三步，到博客根目录运行脚本</p>
<p>pm2 start hexo_run.js<br>1<br>pm2的相关命令</p>
<p>pm2 start hexo_run.js    #启动<br>pm2 list    #查看pm2管理的所有服务</p>
<p>pm2 stop all    #停止pm2列表的所有服务<br>pm2 stop 0 #停止进程为0的进程</p>
<p>pm2 reload all #重新载入列表所有进程<br>pm2 reload 0 #重载列表中进程为0的进程</p>
<p>pm2 restart all    #重启列表中所有的进程<br>pm2 restart 0    #重启列表中进程为0的进程</p>
<p>pm2 delete 0    #删除列表中进程为0的进程<br>pm2 delete all    #删除列表中所有的进程</p>
]]></content>
      <categories>
        <category>pm2</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>pm2</tag>
        <tag>hexo</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式学习</title>
    <url>/posts/13105.html</url>
    <content><![CDATA[<pre><code>正则表达式的学习和使用</code></pre><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>正则表达式用于文本内容的查找和替换。</p>
<p>正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。</p>
<p><a href="https://regexr.com/" target="_blank" rel="noopener external nofollow noreferrer">正则表达式在线工具</a></p>
<h1 id="二、匹配单个字符"><a href="#二、匹配单个字符" class="headerlink" title="二、匹配单个字符"></a>二、匹配单个字符</h1><p><strong>.</strong>  可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p>
<p><strong>.</strong>  是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \ 进行转义，即在 . 前面加上 \ 。</p>
<p>正则表达式一般是区分大小写的，但是也有些实现是不区分。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nam.</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<p>My  <strong>name</strong>  is Zheng.</p>
<h1 id="三、匹配一组字符"><a href="#三、匹配一组字符" class="headerlink" title="三、匹配一组字符"></a>三、匹配一组字符</h1><p><strong>[ ]</strong>  定义一个字符集合；</p>
<p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p>
<p><strong>-</strong>  只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p>
<p><strong>^</strong>  在 [ ] 中是取非操作。</p>
<p><strong>应用</strong> </p>
<p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串：</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc[^0-9]</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<ol>
<li><strong>abcd</strong> </li>
<li>abc1</li>
<li>abc2</li>
</ol>
<h1 id="四、使用元字符"><a href="#四、使用元字符" class="headerlink" title="四、使用元字符"></a>四、使用元字符</h1><h2 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h2><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[\b]</td>
<td align="center">回退（删除）一个字符</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">垂直制表符</td>
</tr>
</tbody></table>
<p>\r\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \n。</p>
<p>\r\n\r\n 可以匹配 Windows 下的空白行，因为它将匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p>
<h2 id="匹配特定的字符类别"><a href="#匹配特定的字符类别" class="headerlink" title="匹配特定的字符类别"></a>匹配特定的字符类别</h2><h3 id="1-数字元字符"><a href="#1-数字元字符" class="headerlink" title="1. 数字元字符"></a>1. 数字元字符</h3><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">数字字符，等价于 [0-9]</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">非数字字符，等价于 [^0-9]</td>
</tr>
</tbody></table>
<h3 id="2-字母数字元字符"><a href="#2-字母数字元字符" class="headerlink" title="2. 字母数字元字符"></a>2. 字母数字元字符</h3><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\w</td>
<td align="center">大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">对 \w 取非</td>
</tr>
</tbody></table>
<h3 id="3-空白字符元字符"><a href="#3-空白字符元字符" class="headerlink" title="3. 空白字符元字符"></a>3. 空白字符元字符</h3><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\s</td>
<td align="center">任何一个空白字符，等价于 [\f\n\r\t\v]</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">对 \s 取非</td>
</tr>
</tbody></table>
<p>\x 匹配十六进制字符，\0 匹配八进制，例如 \x0A 对应 ASCII 字符 10，等价于 \n。</p>
<h1 id="五、重复匹配"><a href="#五、重复匹配" class="headerlink" title="五、重复匹配"></a>五、重复匹配</h1><ul>
<li><strong>+</strong>  匹配 1 个或者多个字符</li>
<li><strong>\</strong> * 匹配 0 个或者多个</li>
<li><strong>?</strong>  匹配 0 个或者 1 个</li>
</ul>
<p><strong>应用</strong> </p>
<p>匹配邮箱地址。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[\w.]+@\w+\.\w+</span><br></pre></td></tr></table></figure>

<p>[\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p>
<p><strong>匹配结果</strong> </p>
<p><strong>abc.def<span>@</span>qq.com</strong> </p>
<ul>
<li><strong>{n}</strong>  匹配 n 个字符</li>
<li><strong>{m, n}</strong>  匹配 m~n 个字符</li>
<li><strong>{m,}</strong>  至少匹配 m 个字符</li>
</ul>
<p>* 和 + 都是贪婪型元字符，会匹配最多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m, n}? 。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.+c</span><br></pre></td></tr></table></figure>

<p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p>
<p><strong>匹配结果</strong> </p>
<p><strong>abcabcabc</strong> </p>
<h1 id="六、位置匹配"><a href="#六、位置匹配" class="headerlink" title="六、位置匹配"></a>六、位置匹配</h1><h2 id="单词边界"><a href="#单词边界" class="headerlink" title="单词边界"></a>单词边界</h2><p><strong>\b</strong>  可以匹配一个单词的边界，边界是指位于 \w 和 \W 之间的位置；<strong>\B</strong> 匹配一个不是单词边界的位置。</p>
<p>\b 只匹配位置，不匹配字符，因此 \babc\b 匹配出来的结果为 3 个字符。</p>
<h2 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h2><p><strong>^</strong>  匹配整个字符串的开头，<strong>$</strong> 匹配结尾。</p>
<p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p>
<p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p>
<p><strong>应用</strong> </p>
<p>匹配代码中以 // 开始的注释行</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\s*\&#x2F;\&#x2F;.*$</span><br></pre></td></tr></table></figure>

<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//600e9c75-5033-4dad-ae2b-930957db638e.png"/> </div><br>

<p><strong>匹配结果</strong> </p>
<ol>
<li>public void fun() {</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 1</strong> </li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;    int a = 1;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;    int b = 2;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 2</strong> </li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;    int c = a + b;</li>
<li>}</li>
</ol>
<h1 id="七、使用子表达式"><a href="#七、使用子表达式" class="headerlink" title="七、使用子表达式"></a>七、使用子表达式</h1><p>使用  <strong>( )</strong>  定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p>
<p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(ab)&#123;2,&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<p><strong>ababab</strong> </p>
<p><strong>|</strong>  是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(19|20)\d&#123;2&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<ol>
<li><strong>1900</strong> </li>
<li><strong>2010</strong> </li>
<li>1020</li>
</ol>
<p><strong>应用</strong> </p>
<p>匹配 IP 地址。</p>
<p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p>
<ul>
<li>一位数字</li>
<li>不以 0 开头的两位数字</li>
<li>1 开头的三位数</li>
<li>2 开头，第 2 位是 0-4 的三位数</li>
<li>25 开头，第 3 位是 0-5 的三位数</li>
</ul>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))\.)&#123;3&#125;(25[0-5]|(2[0-4]\d)|(1\d&#123;2&#125;)|([1-9]\d)|(\d))</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<ol>
<li><strong>192.168.0.1</strong> </li>
<li>00.00.00.00</li>
<li>555.555.555.555</li>
</ol>
<h1 id="八、回溯引用"><a href="#八、回溯引用" class="headerlink" title="八、回溯引用"></a>八、回溯引用</h1><p>回溯引用使用  <strong>\n</strong>  来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p>
<p><strong>应用</strong> </p>
<p>匹配 HTML 中合法的标题元素。</p>
<p><strong>正则表达式</strong> </p>
<p>\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;(h[1-6])&gt;\w*?&lt;\&#x2F;\1&gt;</span><br></pre></td></tr></table></figure>

<p><strong>匹配结果</strong> </p>
<ol>
<li><strong>&lt;h1&gt;x&lt;/h1&gt;</strong> </li>
<li><strong>&lt;h2&gt;x&lt;/h2&gt;</strong> </li>
<li>&lt;h3&gt;x&lt;/h1&gt;</li>
</ol>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>需要用到两个正则表达式。</p>
<p><strong>应用</strong> </p>
<p>修改电话号码格式。</p>
<p><strong>文本</strong> </p>
<p>313-555-1234</p>
<p><strong>查找正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>替换正则表达式</strong> </p>
<p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">($1) $3-$5</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong> </p>
<p>(313) 555-1234</p>
<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\l</td>
<td align="center">把下个字符转换为小写</td>
</tr>
<tr>
<td align="center">\u</td>
<td align="center">把下个字符转换为大写</td>
</tr>
<tr>
<td align="center">\L</td>
<td align="center">把\L 和\E 之间的字符全部转换为小写</td>
</tr>
<tr>
<td align="center">\U</td>
<td align="center">把\U 和\E 之间的字符全部转换为大写</td>
</tr>
<tr>
<td align="center">\E</td>
<td align="center">结束\L 或者\U</td>
</tr>
</tbody></table>
<p><strong>应用</strong> </p>
<p>把文本的第二个和第三个字符转换为大写。</p>
<p><strong>文本</strong> </p>
<p>abcd</p>
<p><strong>查找</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(\w)(\w&#123;2&#125;)(\w)</span><br></pre></td></tr></table></figure>

<p><strong>替换</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$1\U$2\E$3</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong> </p>
<p>aBCd</p>
<h1 id="九、前后查找"><a href="#九、前后查找" class="headerlink" title="九、前后查找"></a>九、前后查找</h1><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用  <strong>?=</strong>  来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?&lt;= 定义（注: javaScript 不支持向后匹配, java 对其支持也不完善）。</p>
<p><strong>应用</strong> </p>
<p>查找出邮件地址 @ 字符前面的部分。</p>
<p><strong>正则表达式</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\w+(?&#x3D;@)</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong> </p>
<p><strong>abc</strong> @qq.com</p>
<p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p>
<h1 id="十、嵌入条件"><a href="#十、嵌入条件" class="headerlink" title="十、嵌入条件"></a>十、嵌入条件</h1><h2 id="回溯引用条件"><a href="#回溯引用条件" class="headerlink" title="回溯引用条件"></a>回溯引用条件</h2><p>条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p>
<p><strong>正则表达式</strong> </p>
<p>子表达式 (\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(\()?abc(?(1)\))</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong> </p>
<ol>
<li><strong>(abc)</strong> </li>
<li><strong>abc</strong> </li>
<li>(abc</li>
</ol>
<h2 id="前后查找条件"><a href="#前后查找条件" class="headerlink" title="前后查找条件"></a>前后查找条件</h2><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p>
<p><strong>正则表达式</strong> </p>
<p> ?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \d{5} ，才继续匹配 -\d{4} 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d&#123;5&#125;(?(?&#x3D;-)-\d&#123;4&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong> </p>
<ol>
<li><strong>11111</strong> </li>
<li>22222-</li>
<li><strong>33333-4444</strong> </li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>BenForta. 正则表达式必知必会 [M]. 人民邮电出版社, 2007.</li>
</ul>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列学习</title>
    <url>/posts/54936.html</url>
    <content><![CDATA[<pre><code>消息队列模式和它的应用场景、可靠性、同步和异步性</code></pre><h1 id="一、消息模型"><a href="#一、消息模型" class="headerlink" title="一、消息模型"></a>一、消息模型</h1><h2 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h2><p>消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//09b52bcb-88ba-4e36-8244-b375f16ad116.jpg"/> </div><br>

<h2 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h2><p>消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//ddb5ff4c-4ada-46aa-9bf1-140bdb5e4676.jpg"/> </div><br>

<p>发布与订阅模式和观察者模式有以下不同：</p>
<ul>
<li>观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，发布者与订阅者不知道对方的存在，它们之间通过频道进行通信。</li>
<li>观察者模式是同步的，当事件触发时，主题会去调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，发布者向频道发送一个消息之后，就不需要关心订阅者何时去订阅这个消息。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//bee1ff1d-c80f-4b3c-b58c-7073a8896ab2.jpg"/> </div><br>

<p>参考：</p>
<ul>
<li><a href="http://developers-club.com/posts/270339/" target="_blank" rel="noopener external nofollow noreferrer">Observer vs Pub-Sub</a></li>
<li><a href="https://blog.csdn.net/lizhitao/article/details/47723105" target="_blank" rel="noopener external nofollow noreferrer">消息队列中点对点与发布订阅区别</a></li>
</ul>
<h1 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h1><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>
<p>例如在注册流程中通常需要发送验证邮件来确保注册用户的身份合法，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>
<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>
<h2 id="流量削锋"><a href="#流量削锋" class="headerlink" title="流量削锋"></a>流量削锋</h2><p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>
<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>
<h2 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h2><p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>
<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p>
<h1 id="三、可靠性"><a href="#三、可靠性" class="headerlink" title="三、可靠性"></a>三、可靠性</h1><h2 id="发送端的可靠性"><a href="#发送端的可靠性" class="headerlink" title="发送端的可靠性"></a>发送端的可靠性</h2><p>发送端完成操作后一定能将消息成功发送到消息队列中。</p>
<p>实现方法：</p>
<ul>
<li>在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</li>
</ul>
<h2 id="接收端的可靠性"><a href="#接收端的可靠性" class="headerlink" title="接收端的可靠性"></a>接收端的可靠性</h2><p>接收端能够从消息中间件成功消费一次消息。</p>
<p>实现方法：</p>
<ul>
<li>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</li>
<li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li>
</ul>
]]></content>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀blog订阅</title>
    <url>/posts/35693.html</url>
    <content><![CDATA[<pre><code>一些优秀的IT的博客MARK</code></pre><h1 id="Rss-IT人"><a href="#Rss-IT人" class="headerlink" title="Rss-IT人"></a>Rss-IT人</h1><p>======</p>
<h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ol>
<li><p>酷壳</p>
<p> 网站 : <a href="http://CoolShell.cn" target="_blank" rel="noopener external nofollow noreferrer">CoolShell.cn</a><br> Rss地址 : <a href="http://coolshell.cn/feed" target="_blank" rel="noopener external nofollow noreferrer">http://coolshell.cn/feed</a></p>
</li>
<li><p>阮一峰的网络日志  </p>
<p> 网站 : <a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener external nofollow noreferrer">ruanyifeng.com/blog</a>  </p>
<p> Rss地址 : <a href="http://www.ruanyifeng.com/blog/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.ruanyifeng.com/blog/atom.xml</a></p>
</li>
<li><p>四火的唠叨  </p>
<p> 网站 :   <a href="http://www.raychase.net" target="_blank" rel="noopener external nofollow noreferrer">raychase.net</a>  </p>
<p> Rss地址 : <a href="http://www.raychase.net/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.raychase.net/feed</a> </p>
</li>
<li><p>云风的 BLOG  </p>
<p> 网站 : <a href="http://blog.codingnow.com" target="_blank" rel="noopener external nofollow noreferrer">blog.codingnow.com</a>    </p>
<p> Rss地址 : <a href="http://blog.codingnow.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://blog.codingnow.com/atom.xml</a></p>
</li>
<li><p>运维与架构  </p>
<p> 网站 : <a href="http://www.nginx.cn" target="_blank" rel="noopener external nofollow noreferrer">nginx.cn</a>  </p>
<p> Rss地址 : <a href="http://www.nginx.cn/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.nginx.cn/feed</a></p>
</li>
<li><p>ImportNew  </p>
<p> 网站 : <a href="http://www.importnew.com" target="_blank" rel="noopener external nofollow noreferrer">importnew.com</a>   </p>
<p> Rss地址 : <a href="http://www.importnew.com/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.importnew.com/feed</a></p>
</li>
<li><p>Styling Android  </p>
<p> 网站 : <a href="http://blog.stylingandroid.com" target="_blank" rel="noopener external nofollow noreferrer">blog.stylingandroid.com</a>  </p>
<p> Rss地址 : <a href="http://feeds.feedburner.com/StylingAndroid" target="_blank" rel="noopener external nofollow noreferrer">http://feeds.feedburner.com/StylingAndroid</a></p>
</li>
<li><p>Trinea(Rss暂时不可用，待修复，网页可以正常访问)  </p>
<p> 网站 : <a href="http://www.trinea.cn" target="_blank" rel="noopener external nofollow noreferrer">trinea.cn</a>  </p>
<p> Rss地址 : <a href="http://www.trinea.cn/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://www.trinea.cn/feed/</a></p>
</li>
<li><p>破船之家  </p>
<p> 网站 : <a href="http://www.beyondvincent.com" target="_blank" rel="noopener external nofollow noreferrer">beyondvincent.com</a>  </p>
<p> Rss地址 : <a href="http://beyondvincent.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://beyondvincent.com/atom.xml</a></p>
</li>
<li><p>老罗的Android开发之旅  </p>
<p>网站 : <a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/luoshengyang</a>  </p>
<p>Rss地址 : <a href="http://blog.csdn.net/luoshengyang/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/luoshengyang/rss/list</a></p>
</li>
<li><p>代码家  </p>
<p>网站 : <a href="http://blog.daimajia.com/" target="_blank" rel="noopener external nofollow noreferrer">blog.daimajia.com</a>  </p>
<p>Rss地址 : <a href="http://blog.daimajia.com/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://blog.daimajia.com/feed/</a></p>
</li>
<li><p>fookwood  </p>
<p>网站 : <a href="http://www.fookwood.com" target="_blank" rel="noopener external nofollow noreferrer">fookwood.com</a>  </p>
<p>Rss地址 : <a href="http://www.fookwood.com/feeding" target="_blank" rel="noopener external nofollow noreferrer">www.fookwood.com/feeding</a></p>
</li>
<li><p>Android Notice  </p>
<p>网站 : <a href="http://androidniceties.tumblr.com/" target="_blank" rel="noopener external nofollow noreferrer">androidniceties.tumblr.com/</a>   </p>
<p>Rss地址 : <a href="http://androidniceties.tumblr.com/rss" target="_blank" rel="noopener external nofollow noreferrer">http://androidniceties.tumblr.com/rss</a> </p>
</li>
<li><p>sage42  </p>
<p>网站 : <a href="http://www.sage42.org/" target="_blank" rel="noopener external nofollow noreferrer">sage42.org</a>  </p>
<p>Rss地址 : <a href="http://www.sage42.org/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://www.sage42.org/feed/</a></p>
</li>
<li><p>danlew – Android小技巧  </p>
<p>网站 : <a href="http://blog.danlew.net" target="_blank" rel="noopener external nofollow noreferrer">blog.danlew.net</a>  </p>
<p>Rss地址 : <a href="http://blog.danlew.net/rss/" target="_blank" rel="noopener external nofollow noreferrer">http://blog.danlew.net/rss/</a></p>
</li>
<li><p>Job伯乐在线-Android频道  </p>
<p>网站 : <a href="http://blog.jobbole.com/" target="_blank" rel="noopener external nofollow noreferrer">blog.jobbole.com/</a>  </p>
<p>Rss地址 : <a href="http://blog.jobbole.com/category/android/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://blog.jobbole.com/category/android/feed/</a></p>
</li>
<li><p>Android-arsenal  </p>
<p>网站 : <a href="http://android-arsenal.com" target="_blank" rel="noopener external nofollow noreferrer">android-arsenal.com/</a>  </p>
<p>Rss地址 : <a href="http://android-arsenal.com/rss.xml" target="_blank" rel="noopener external nofollow noreferrer">http://android-arsenal.com/rss.xml</a></p>
</li>
<li><p>Innost的专栏  </p>
<p>网站 : <a href="http://blog.csdn.net/innost" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/innost/</a>   </p>
<p>Rss地址 : <a href="http://blog.csdn.net/innost/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/innost/rss/list</a></p>
</li>
<li><p>StormZhang  </p>
<p>网站 : <a href="http://stormzhang.com/" target="_blank" rel="noopener external nofollow noreferrer">stormzhang.com</a>   </p>
<p>Rss地址 : （不可用）</p>
</li>
<li><p>WKLKEN PYTHON  </p>
<p>网站 : <a href="http://www.wklken.me" target="_blank" rel="noopener external nofollow noreferrer">wklken.me</a>   </p>
<p>Rss地址 : <a href="http://www.wklken.me/feed.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.wklken.me/feed.xml</a></p>
</li>
<li><p>云在千锋  </p>
<p>网站 ： <a href="http://blog.chengyunfeng.com/" target="_blank" rel="noopener external nofollow noreferrer">blog.chengyunfeng.com</a>  </p>
<p>Rss地址 ： <a href="http://blog.chengyunfeng.com/?feed=rss2" target="_blank" rel="noopener external nofollow noreferrer">http://blog.chengyunfeng.com/?feed=rss2</a></p>
</li>
<li><p>Chris Banes   </p>
<p>网站 ： <a href="https://chris.banes.me" target="_blank" rel="noopener external nofollow noreferrer">chris.banes.me/</a>  </p>
<p>Rss地址 ： <a href="https://chris.banes.me/rss/" target="_blank" rel="noopener external nofollow noreferrer">https://chris.banes.me/rss/</a></p>
</li>
<li><p>Android Weekly  </p>
<p>网站 ： <a href="http://androidweekly.net/" target="_blank" rel="noopener external nofollow noreferrer">androidweekly.net/</a>  </p>
<p>Rss地址 ： <a href="http://us2.campaign-archive1.com/feed?u=887caf4f48db76fd91e20a06d&amp;id=4eb677ad19" target="_blank" rel="noopener external nofollow noreferrer">http://us2.campaign-archive1.com/feed?u=887caf4f48db76fd91e20a06d&amp;id=4eb677ad19</a></p>
</li>
<li><p>Android Developer Weekly  </p>
<p>网站 :  <a href="http://androidweekly.cn/" target="_blank" rel="noopener external nofollow noreferrer">androidweekly.cn/</a>  </p>
<p>RSS地址 ： <a href="http://androidweekly.cn/rss/" target="_blank" rel="noopener external nofollow noreferrer">http://androidweekly.cn/rss/</a></p>
</li>
<li><p>Android Design Patterns  </p>
<p>网站 ： <a href="http://www.androiddesignpatterns.com/" target="_blank" rel="noopener external nofollow noreferrer">androiddesignpatterns.com/</a>  </p>
<p>RSS地： <a href="http://www.androiddesignpatterns.com/feed.atom" target="_blank" rel="noopener external nofollow noreferrer">http://www.androiddesignpatterns.com/feed.atom</a></p>
</li>
<li><p>inovex  </p>
<p>网站 : <a href="https://blog.inovex.de/" target="_blank" rel="noopener external nofollow noreferrer">blog.inovex.de/</a>  </p>
<p>Rss地址 ： <a href="https://blog.inovex.de/feed/" target="_blank" rel="noopener external nofollow noreferrer">https://blog.inovex.de/feed/</a></p>
</li>
<li><p>Android Developers Blog  </p>
<p>网站 ：<a href="android-developers.blogspot.com">android-developers.blogspot.com</a>  </p>
<p>Rss地址 : <a href="http://feeds.feedburner.com/blogspot/hsDu" target="_blank" rel="noopener external nofollow noreferrer">http://feeds.feedburner.com/blogspot/hsDu</a></p>
</li>
<li><p>Raizlabs  </p>
<p>网站 ：<a href="http://www.raizlabs.com/dev/" target="_blank" rel="noopener external nofollow noreferrer">raizlabs.com/dev/</a>  </p>
<p>RSS地址 : <a href="http://www.raizlabs.com/dev/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://www.raizlabs.com/dev/feed/</a>  </p>
</li>
<li><p>Squareup  </p>
<p>网站 ： <a href="https://corner.squareup.com/" target="_blank" rel="noopener external nofollow noreferrer">corner.squareup.com/</a>   </p>
<p>RSS地址：<a href="http://feeds.feedburner.com/corner-squareup-com" target="_blank" rel="noopener external nofollow noreferrer">http://feeds.feedburner.com/corner-squareup-com</a>  </p>
</li>
<li><p>trickyandroid  </p>
<p>网站：<a href="http://trickyandroid.com/" target="_blank" rel="noopener external nofollow noreferrer">trickyandroid.com/</a>  </p>
<p>RSS地址 ：<a href="http://trickyandroid.com/rss/" target="_blank" rel="noopener external nofollow noreferrer">http://trickyandroid.com/rss/</a>  </p>
</li>
<li><p>鸟哥 惠新宸</p>
<p>网站： <a href="http://www.laruence.com/" target="_blank" rel="noopener external nofollow noreferrer">laruence.com/</a>  </p>
<p>RSS地址: <a href="http://www.laruence.com/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://www.laruence.com/feed/</a>  </p>
</li>
<li><p>Fenng</p>
<p>网站：<a href="http://dbanotes.net/" target="_blank" rel="noopener external nofollow noreferrer">dbanotes.net/</a>  </p>
<p>RSS地址：<a href="http://dbanotes.net/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://dbanotes.net/feed/</a>  </p>
</li>
<li><p>likaiwen  </p>
<p>网站：<a href="http://likaiwen.cn" target="_blank" rel="noopener external nofollow noreferrer">likaiwen.cn</a>  </p>
<p>RSS地址：<a href="http://likaiwen.cn/feed" target="_blank" rel="noopener external nofollow noreferrer">http://likaiwen.cn/feed</a></p>
</li>
<li><p>廖祜秋liaohuqiu_秋百万  </p>
<p>英文网站：<a href="http://www.liaohuqiu.net/" target="_blank" rel="noopener external nofollow noreferrer">liaohuqiu.net/</a>  </p>
<p>中文网站：<a href="http://www.liaohuqiu.net/cn/" target="_blank" rel="noopener external nofollow noreferrer">liaohuqiu.net/cn/</a>  </p>
<p>RSS地址：<a href="http://www.liaohuqiu.net/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.liaohuqiu.net/atom.xml</a></p>
</li>
<li><p>郭霖的专栏  </p>
<p>网站：<a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/guolin_blog</a>  </p>
<p>RSS地址：<a href="http://blog.csdn.net/guolin_blog/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/guolin_blog/rss/list</a></p>
</li>
<li><p>胡凯  </p>
<p>网站：<a href="http://hukai.me/" target="_blank" rel="noopener external nofollow noreferrer">hukai.me</a>  </p>
<p>RSS地址：<a href="http://hukai.me/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://hukai.me/atom.xml</a></p>
</li>
<li><p>技术小黑屋  </p>
<p>网站：<a href="http://droidyue.com/" target="_blank" rel="noopener external nofollow noreferrer">droidyue.com/</a>  </p>
<p>RSS地址：<a href="http://droidyue.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://droidyue.com/atom.xml</a></p>
</li>
<li><p>张明云  </p>
<p>网站：<a href="http://zmywly8866.github.io/" target="_blank" rel="noopener external nofollow noreferrer">zmywly8866.github.io/</a>  </p>
<p>RSS地址：<a href="http://zmywly8866.github.io/pages/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://zmywly8866.github.io/pages/atom.xml</a></p>
</li>
<li><p>大头鬼Bruce  </p>
<p>网站：<a href="http://blog.csdn.net/lzyzsd" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/lzyzsd</a>  </p>
<p>RSS地址：<a href="http://blog.csdn.net/lzyzsd/rss/list（暂时不可用）" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/lzyzsd/rss/list（暂时不可用）</a></p>
</li>
<li><p>Jhuster的专栏  </p>
<p>网站：<a href="http://ticktick.blog.51cto.com/" target="_blank" rel="noopener external nofollow noreferrer">ticktick.blog.51cto.com/</a>  </p>
<p>RSS地址：<a href="http://ticktick.blog.51cto.com/rss.php?uid=823160" target="_blank" rel="noopener external nofollow noreferrer">http://ticktick.blog.51cto.com/rss.php?uid=823160</a></p>
</li>
<li><p>Hongyang</p>
<p>网站：<a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/lmj623565791</a></p>
<p>RSS地址：<a href="http://blog.csdn.net/lmj623565791/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/lmj623565791/rss/list</a></p>
</li>
<li><p>kymjs张涛-开源实验室</p>
<p>网站：<a href="http://www.kymjs.com/" target="_blank" rel="noopener external nofollow noreferrer">www.kymjs.com</a>  </p>
<p>RSS地址：<a href="http://www.kymjs.com/feed.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.kymjs.com/feed.xml</a></p>
</li>
<li><p>Android Central - Android Forums - News - Reviews - Help and Android Wallpapers</p>
<p>网站: <a href="http://www.androidcentral.com/" target="_blank" rel="noopener external nofollow noreferrer">www.androidcentral.com/</a></p>
<p>RSS 地址: <a href="http://www.androidcentral.com/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.androidcentral.com/feed</a></p>
</li>
<li><p>Android Cool Posts</p>
<p>网站: <a href="https://greenrobot.me" target="_blank" rel="noopener external nofollow noreferrer">greenrobot.me</a></p>
<p>RSS 地址: <a href="https://greenrobot.me/feed/" target="_blank" rel="noopener external nofollow noreferrer">https://greenrobot.me/feed/</a></p>
</li>
</ol>
<ol start="46">
<li><p>Antonio Leiva</p>
<p>网站: <a href="http://antonioleiva.com" target="_blank" rel="noopener external nofollow noreferrer">antonioleiva.com</a></p>
<p>RSS 地址: <a href="http://antonioleiva.com/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://antonioleiva.com/feed/</a></p>
</li>
<li><p>ASCE1885</p>
<p>网站: <a href="http://blog.csdn.net/ace1985" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/ace1985</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/asce1885/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/asce1885/rss/list</a></p>
</li>
<li><p>Baoyz’s Blog</p>
<p>网站: <a href="http://www.baoyz.com/" target="_blank" rel="noopener external nofollow noreferrer">www.baoyz.com/</a></p>
<p>RSS 地址: <a href="http://baoyz.com/rss.xml" target="_blank" rel="noopener external nofollow noreferrer">http://baoyz.com/rss.xml</a></p>
</li>
<li><p>Beyond0525的专栏</p>
<p>网站: <a href="http://blog.csdn.net/beyond0525" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/beyond0525</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/beyond0525/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/beyond0525/rss/list</a></p>
</li>
<li><p>coder-pig的猪栏</p>
<p>网站: <a href="http://blog.csdn.net/zpj779878443" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/zpj779878443</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/coder_pig/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/coder_pig/rss/list</a>  </p>
</li>
<li><p>Drakeet的个人博客</p>
<p>网站: <a href="http://drakeet.me" target="_blank" rel="noopener external nofollow noreferrer">drakeet.me</a></p>
<p>RSS 地址: <a href="http://drakeet.me/feed" target="_blank" rel="noopener external nofollow noreferrer">http://drakeet.me/feed</a></p>
</li>
<li><p>Loader’s Blog</p>
<p>网站: <a href="http://blog.csdn.net/qibin0506" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/qibin0506</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/qibin0506/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/qibin0506/rss/list</a></p>
</li>
<li><p>Lusfold （暂不可用）</p>
<p>网站: <a href="http://lusfold.com//" target="_blank" rel="noopener external nofollow noreferrer">lusfold.com//</a></p>
<p>RSS 地址: <a href="http://lusfold.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://lusfold.com/atom.xml</a></p>
</li>
<li><p>Mobile Internet developer</p>
<p>网站: <a href="http://blog.csdn.net/xiaanming" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/xiaanming</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/xiaanming/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/xiaanming/rss/list</a></p>
</li>
</ol>
<ol start="55">
<li><p>Performance</p>
<p>网站: <a href="http://androidperformance.com/" target="_blank" rel="noopener external nofollow noreferrer">androidperformance.com/</a></p>
<p>RSS 地址: <a href="http://androidperformance.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://androidperformance.com/atom.xml</a></p>
</li>
</ol>
<ol start="56">
<li><p>Snow Memory</p>
<p>网站: <a href="http://andrewliu.in/" target="_blank" rel="noopener external nofollow noreferrer">andrewliu.in/</a></p>
<p>RSS 地址: <a href="http://andrewliu.in/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://andrewliu.in/atom.xml</a></p>
</li>
<li><p>StackVoid （暂不可用）</p>
<p>网站: <a href="http://stackvoid.com" target="_blank" rel="noopener external nofollow noreferrer">stackvoid.com</a></p>
<p>RSS 地址: <a href="http://stackvoid.com/feed/" target="_blank" rel="noopener external nofollow noreferrer">http://stackvoid.com/feed/</a></p>
</li>
<li><p>The Cheese Factory’s Blog (English)</p>
<p>网站: <a href="http://inthecheesefactory.com/blog/en" target="_blank" rel="noopener external nofollow noreferrer">inthecheesefactory.com/blog/en</a></p>
<p>RSS 地址: <a href="http://inthecheesefactory.com/blog/en/rss.xml" target="_blank" rel="noopener external nofollow noreferrer">http://inthecheesefactory.com/blog/en/rss.xml</a></p>
</li>
<li><p>Veaer</p>
<p>网站: <a href="http://veaer.com/" target="_blank" rel="noopener external nofollow noreferrer">veaer.com/</a></p>
<p>RSS 地址: <a href="http://veaer.com/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://veaer.com/atom.xml</a></p>
</li>
<li><p>Waylenw’s BLog</p>
<p>网站: <a href="http://waylenw.github.io/" target="_blank" rel="noopener external nofollow noreferrer">waylenw.github.io/</a></p>
<p>RSS 地址: <a href="http://waylenw.github.io/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://waylenw.github.io/atom.xml</a></p>
</li>
</ol>
<ol start="63">
<li><p>子勰的博客</p>
<p>网站: <a href="http://blog.bihe0832.com" target="_blank" rel="noopener external nofollow noreferrer">blog.bihe0832.com</a></p>
<p>RSS 地址: <a href="http://blog.bihe0832.com/pages/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://blog.bihe0832.com/pages/atom.xml</a></p>
</li>
</ol>
<ol start="64">
<li><p>张兴业的博客</p>
<p>网站: <a href="http://blog.csdn.net/xyz_lmn" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/xyz_lmn</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/xyz_lmn/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/xyz_lmn/rss/list</a></p>
</li>
</ol>
<ol start="65">
<li><p>快乐de胖虎</p>
<p>网站: <a href="http://blog.csdn.net/u011133213" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/u011133213</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/u011133213/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/u011133213/rss/list</a></p>
</li>
</ol>
<ol start="66">
<li><p>杨辉的个人博客</p>
<p>网站: <a href="http://yanghui.name/" target="_blank" rel="noopener external nofollow noreferrer">yanghui.name/</a></p>
<p>RSS 地址: <a href="http://yanghui.name/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://yanghui.name/atom.xml</a></p>
</li>
<li><p>AigeStudio</p>
<p>网站: <a href="http://blog.csdn.net/aigestudio" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/aigestudio</a></p>
<p>RSS 地址: <a href="http://blog.csdn.net/aigestudio/rss/list" target="_blank" rel="noopener external nofollow noreferrer">http://blog.csdn.net/aigestudio/rss/list</a></p>
</li>
<li><p>马天宇Liter’s Blog</p>
<p>网站: <a href="http://litesuits.com/" target="_blank" rel="noopener external nofollow noreferrer">litesuits.com/</a></p>
<p>RSS 地址: <a href="http://www.vmatianyu.cn/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.vmatianyu.cn/feed</a></p>
</li>
<li><p>朱罗锋-专注Android相关技术    </p>
<p>网站: <a href="http://www.feeyan.cn/" target="_blank" rel="noopener external nofollow noreferrer">feeyan.cn/</a></p>
<p>RSS 地址: <a href="http://www.feeyan.cn/?feed=rss2" target="_blank" rel="noopener external nofollow noreferrer">http://www.feeyan.cn/?feed=rss2</a></p>
</li>
<li><p>GitYuan</p>
<p>网站: <a href="http://gityuan.com/" target="_blank" rel="noopener external nofollow noreferrer">gityuan.com/</a></p>
<p>RSS 地址: <a href="http://www.feeyan.cn/?feed=rss2" target="_blank" rel="noopener external nofollow noreferrer">http://www.feeyan.cn/?feed=rss2</a></p>
</li>
<li><p>Jlog</p>
<p>网站: <a href="http://www.race604.com/" target="_blank" rel="noopener external nofollow noreferrer">race604.com/</a></p>
<p>RSS 地址: <a href="http://www.race604.com/rss/" target="_blank" rel="noopener external nofollow noreferrer">http://www.race604.com/rss/</a></p>
</li>
<li><p>Weishu’s Note</p>
<p>网站: <a href="http://weishu.me/" target="_blank" rel="noopener external nofollow noreferrer">weishu.me/</a></p>
<p>RSS 地址: <a href="http://weishu.me/atom.xml" target="_blank" rel="noopener external nofollow noreferrer">http://weishu.me/atom.xml</a></p>
</li>
<li><p>秋水逸冰</p>
<p>  网站：<a href="https://teddysun.com/" target="_blank" rel="noopener external nofollow noreferrer">teddysun.com/</a></p>
<p>  RSS地址：<a href="https://teddysun.com/feed" target="_blank" rel="noopener external nofollow noreferrer">https://teddysun.com/feed</a></p>
</li>
<li><p>吴钧泽博客</p>
<p>网站：<a href="https://www.wujunze.com" target="_blank" rel="noopener external nofollow noreferrer">wujunze.com</a></p>
<p>RSS地址：<a href="https://www.wujunze.com/feed" target="_blank" rel="noopener external nofollow noreferrer">https://www.wujunze.com/feed</a></p>
</li>
<li><p>Xing的技术博客</p>
<p>网站：<a href="http://iluhcm.com/" target="_blank" rel="noopener external nofollow noreferrer">iluhcm.com/</a></p>
</li>
<li><p>任玉刚的技术博客</p>
<p>网站：<a href="https://blog.csdn.net/singwhatiwanna" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/singwhatiwanna</a>    </p>
</li>
<li><p>kymjs张涛的技术博客   </p>
<p>网站：<a href="https://kymjs.com/" target="_blank" rel="noopener external nofollow noreferrer">kymjs.com/</a></p>
</li>
<li><p>gcssloop的技术博客   </p>
<p>网站：<a href="http://www.gcssloop.com/timeline" target="_blank" rel="noopener external nofollow noreferrer">gcssloop.com/timeline</a></p>
</li>
<li><p>Ailurus 的个人博客</p>
<p>网站：<a href="http://www.easydone.cn/archives/" target="_blank" rel="noopener external nofollow noreferrer">easydone.cn/archives/</a></p>
</li>
<li><p>drakeet的个人站点</p>
<p>网站：<a href="https://drakeet.me/" target="_blank" rel="noopener external nofollow noreferrer">drakeet.me/</a>    </p>
</li>
<li><p>Weishu的博客（understand-plugin-framework系列作者）    </p>
<p>网站：<a href="http://weishu.me/archives/" target="_blank" rel="noopener external nofollow noreferrer">weishu.me/archives/</a></p>
</li>
<li><p>Innost的CSDN专栏    </p>
<p>网站：<a href="https://blog.csdn.net/innost" target="_blank" rel="noopener external nofollow noreferrer">blog.csdn.net/innost</a></p>
</li>
<li><p>中二病也要开发 ANDROID</p>
<p>网站：<a href="http://kaedea.com/" target="_blank" rel="noopener external nofollow noreferrer">kaedea.com/</a></p>
</li>
<li><p>tangpj的个人站点</p>
<p>网站：<a href="http://tangpj.com/" target="_blank" rel="noopener external nofollow noreferrer">tangpj.com/</a></p>
</li>
<li><p>yydcdut的个人博客</p>
<p>网站：<a href="http://yydcdut.com/" target="_blank" rel="noopener external nofollow noreferrer">yydcdut.com/</a>    </p>
</li>
<li><p>Uncle Chen的个人博客</p>
<p>网站：<a href="http://unclechen.github.io/" target="_blank" rel="noopener external nofollow noreferrer">unclechen.github.io/</a> </p>
</li>
<li><p>Gityuan (Keep on going never give up)    </p>
<p>网站：<a href="http://gityuan.com/" target="_blank" rel="noopener external nofollow noreferrer">http://gityuan.com/</a></p>
</li>
</ol>
<hr>
<h1 id="非技术博客"><a href="#非技术博客" class="headerlink" title="非技术博客"></a>非技术博客</h1><ol>
<li><p>MacTalk-池建强的随想录  </p>
<p> 网站 : <a href="http://www.macshuo.com" target="_blank" rel="noopener external nofollow noreferrer">macshuo.com</a>  </p>
<p> Rss地址 : <a href="http://macshuo.com/?feed=rss2" target="_blank" rel="noopener external nofollow noreferrer">http://macshuo.com/?feed=rss2</a></p>
</li>
<li><p>少数派 - 数字生活传道者  </p>
<p> 网站 : <a href="http://www.sspai.com" target="_blank" rel="noopener external nofollow noreferrer">sspai.com</a>  </p>
<p> Rss地址 : <a href="http://sspai.com/feed" target="_blank" rel="noopener external nofollow noreferrer">http://sspai.com/feed</a></p>
</li>
<li><p>Linux中国  </p>
<p> 网站 : <a href="http://linux.cn/" target="_blank" rel="noopener external nofollow noreferrer">linux.cn/</a>   </p>
<p> 全站RSS ： <a href="http://linux.cn/rss.xml" target="_blank" rel="noopener external nofollow noreferrer">http://linux.cn/rss.xml</a>  </p>
<p> 技术RSS ： <a href="http://linux.cn/rss-tech.xml" target="_blank" rel="noopener external nofollow noreferrer">http://linux.cn/rss-tech.xml</a>  </p>
<p> 新闻RSS ： <a href="http://linux.cn/rss-news.xml" target="_blank" rel="noopener external nofollow noreferrer">http://linux.cn/rss-news.xml</a>  </p>
<p> 评论RSS ： <a href="http://linux.cn/rss-talk.xml" target="_blank" rel="noopener external nofollow noreferrer">http://linux.cn/rss-talk.xml</a>  </p>
<p> 分享RSS ： <a href="http://linux.cn/rss-share.xml" target="_blank" rel="noopener external nofollow noreferrer">http://linux.cn/rss-share.xml</a>  </p>
</li>
<li><p>谷奥 :喜欢Google的必备。质量很高。  </p>
<p> 网站 : <a href="http://www.guao.hk" target="_blank" rel="noopener external nofollow noreferrer">guao.hk</a>  </p>
<p> Rss : <a href="http://www.guao.hk/feed" target="_blank" rel="noopener external nofollow noreferrer">http://www.guao.hk/feed</a></p>
</li>
<li><p>V2EX = way to explore :V2EX 是一个关于分享和探索的地方    </p>
<p> 网站 : <a href="http://www.v2ex.com/" target="_blank" rel="noopener external nofollow noreferrer">v2ex.com/</a>  </p>
<p> Rss : <a href="http://www.v2ex.com/index.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.v2ex.com/index.xml</a></p>
</li>
<li><p>Android Central</p>
<p> 网站：<a href="http://www.androidcentral.com" target="_blank" rel="noopener external nofollow noreferrer">http://www.androidcentral.com</a></p>
<p> RSS 地址：<a href="http://www.mobilenations.com/rss/mb.xml" target="_blank" rel="noopener external nofollow noreferrer">http://www.mobilenations.com/rss/mb.xml</a></p>
</li>
<li><p>Android Weekly 中文版</p>
<p> 网站：<a href="https://androidweekly.io/" target="_blank" rel="noopener external nofollow noreferrer">androidweekly.io/</a></p>
</li>
<li><p>Android Weekly 英文版</p>
<p> 网站：<a href="https://androidweekly.net/" target="_blank" rel="noopener external nofollow noreferrer">androidweekly.net/</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存技术整理</title>
    <url>/posts/59548.html</url>
    <content><![CDATA[<pre><code>缓存技术的基本知识、LRU、CDN、缓存问题、一致性哈希</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一缓存特征">一、缓存特征</a></li>
<li><a href="#二lru">二、LRU</a></li>
<li><a href="#三缓存位置">三、缓存位置</a></li>
<li><a href="#四cdn">四、CDN</a></li>
<li><a href="#五缓存问题">五、缓存问题</a></li>
<li><a href="#六数据分布">六、数据分布</a></li>
<li><a href="#七一致性哈希">七、一致性哈希</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、缓存特征"><a href="#一、缓存特征" class="headerlink" title="一、缓存特征"></a>一、缓存特征</h1><h2 id="命中率"><a href="#命中率" class="headerlink" title="命中率"></a>命中率</h2><p>当某个请求能够通过访问缓存而得到响应时，称为缓存命中。</p>
<p>缓存命中率越高，缓存的利用率也就越高。</p>
<h2 id="最大空间"><a href="#最大空间" class="headerlink" title="最大空间"></a>最大空间</h2><p>缓存通常位于内存中，内存的空间通常比磁盘空间小的多，因此缓存的最大空间不可能非常大。</p>
<p>当缓存存放的数据量超过最大空间时，就需要淘汰部分数据来存放新到达的数据。</p>
<h2 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h2><ul>
<li><p>FIFO（First In First Out）：先进先出策略，在实时性的场景下，需要经常访问最新的数据，那么就可以使用 FIFO，使最先进入的数据（最晚的数据）被淘汰。</p>
</li>
<li><p>LRU（Least Recently Used）：最近最久未使用策略，优先淘汰最久未使用的数据，也就是上次被访问时间距离现在最远的数据。该策略可以保证内存中的数据都是热点数据，也就是经常被访问的数据，从而保证缓存命中率。</p>
</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="https://tech.meituan.com/cache_about.html" target="_blank" rel="noopener external nofollow noreferrer">缓存那些事</a></li>
</ul>
<h1 id="二、LRU"><a href="#二、LRU" class="headerlink" title="二、LRU"></a>二、LRU</h1><p>以下是一个基于 双向队列 + HashMap 的 LRU 算法实现，对算法的解释如下：</p>
<ul>
<li>最基本的思路是当访问某个节点时，将其从原来的位置删除，并重新插入到链表头部，这样就能保证链表尾部存储的就是最近最久未使用的节点，当节点数量大于缓存最大空间时就删除链表尾部的节点。</li>
<li>为了使删除操作时间复杂度为 O(1)，那么就不能采用遍历的方式找到某个节点。HashMap 存储这 Key 到节点的映射，通过 Key 就能以 O(1) 的时间得到节点，然后再以 O(1) 的时间将其从双向队列中删除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRU</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;K, Node&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node pre;</span><br><span class="line">        Node next;</span><br><span class="line">        K k;</span><br><span class="line">        V v;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.k = k;</span><br><span class="line">            <span class="keyword">this</span>.v = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;(maxSize * <span class="number">4</span> / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> Node(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node node = map.get(key);</span><br><span class="line">        unlink(node);</span><br><span class="line">        appendHead(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            unlink(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        map.put(key, node);</span><br><span class="line">        appendHead(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt; maxSize) &#123;</span><br><span class="line">            Node toRemove = removeTail();</span><br><span class="line">            map.remove(toRemove);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlink</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        Node pre = node.pre;</span><br><span class="line">        node.pre = node.next;</span><br><span class="line">        node.next = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = tail.pre;</span><br><span class="line">        node.pre = tail;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;K&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Node cur = head.next;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cur != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Node node = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                <span class="keyword">return</span> node.k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、缓存位置"><a href="#三、缓存位置" class="headerlink" title="三、缓存位置"></a>三、缓存位置</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>当 HTTP 响应允许进行缓存时，浏览器会将 HTML、CSS、JavaScript、图片等静态资源进行缓存。</p>
<h2 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h2><p>网络服务提供商（ISP）是网络访问的第一跳，通过将数据缓存在 ISP 中能够大大提高用户的访问速度。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理位于服务器之前，请求与响应都需要经过反向代理。通过将数据缓存在反向代理，在用户请求时就可以直接使用缓存进行响应。</p>
<h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><p>使用 Guava Cache 将数据缓存在服务器本地内存中，服务器代码可以直接读取本地内存中的缓存，速度非常快。</p>
<h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><p>使用 Redis、Memcache 等分布式缓存将数据缓存在分布式缓存系统中。</p>
<p>相对于本地缓存来说，分布式缓存单独部署，可以根据需求分配硬件资源。</p>
<p>不仅如此，服务器集群都可以访问分布式缓存。而本地缓存需要在服务器集群之间进行同步，实现和性能开销上都非常大。</p>
<h2 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h2><p>MySQL 等数据库管理系统具有自己的查询缓存机制来提高 SQL 查询效率。</p>
<h1 id="四、CDN"><a href="#四、CDN" class="headerlink" title="四、CDN"></a>四、CDN</h1><p>内容分发网络（Content distribution network，CDN）是一种通过互连的网络系统，利用更靠近用户的服务器更快更可靠地将 HTML、CSS、JavaScript、音乐、图片、视频等静态资源分发给用户。</p>
<p>CDN 主要有以下优点：</p>
<ul>
<li>更快地将数据分发给用户；</li>
<li>通过部署多台服务器，从而提高系统整体的带宽性能；</li>
<li>多台服务器可以看成是一种冗余机制，从而具有高可用性。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//15313ed8-a520-4799-a300-2b6b36be314f.jpg"/> </div><br>

<p>参考资料：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF" target="_blank" rel="noopener external nofollow noreferrer">内容分发网络</a></li>
<li><a href="https://www.aspirationhosting.com/aspiration-cdn/" target="_blank" rel="noopener external nofollow noreferrer">How Aspiration CDN helps to improve your website loading speed?</a></li>
</ul>
<h1 id="五、缓存问题"><a href="#五、缓存问题" class="headerlink" title="五、缓存问题"></a>五、缓存问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>指的是对某个一定不存在的数据进行请求，该请求将会穿透缓存到达数据库。</p>
<p>解决方案：</p>
<ul>
<li>对这些不存在的数据缓存一个空数据；</li>
<li>对这类请求进行过滤。</li>
</ul>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>指的是由于数据没有被加载到缓存中，或者缓存数据在同一时间大面积失效（过期），又或者缓存服务器宕机，导致大量的请求都去到达数据库。</p>
<p>在存在缓存的系统中，系统非常依赖于缓存，缓存分担了很大一部分的数据请求。当发生缓存雪崩时，数据库无法处理这么大的请求，导致数据库崩溃。</p>
<p>解决方案：</p>
<ul>
<li>为了防止缓存在同一时间大面积过期导致的缓存雪崩，可以通过观察用户行为，合理设置缓存过期时间来实现；</li>
<li>为了防止缓存服务器宕机出现的缓存雪崩，可以使用分布式缓存，分布式缓存中每一个节点只缓存部分的数据，当某个节点宕机时可以保证其它节点的缓存仍然可用。</li>
<li>也可以在进行缓存预热，避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩。</li>
</ul>
<h2 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h2><p>缓存一致性要求数据更新的同时缓存数据也能够实时更新。</p>
<p>解决方案：</p>
<ul>
<li>在数据更新的同时立即去更新缓存；</li>
<li>在读缓存之前先判断缓存是否是最新的，如果不是最新的先进行更新。</li>
</ul>
<p>要保证缓存一致性需要付出很大的代价，缓存数据最好是那些对一致性要求不高的数据，允许缓存数据存在一些脏数据。</p>
<h1 id="六、数据分布"><a href="#六、数据分布" class="headerlink" title="六、数据分布"></a>六、数据分布</h1><h2 id="哈希分布"><a href="#哈希分布" class="headerlink" title="哈希分布"></a>哈希分布</h2><p>哈希分布就是将数据计算哈希值之后，按照哈希值分配到不同的节点上。例如有 N 个节点，数据的主键为 key，则将该数据分配的节点序号为：hash(key)%N。</p>
<p>传统的哈希分布算法存在一个问题：当节点数量变化时，也就是 N 值变化，那么几乎所有的数据都需要重新分布，将导致大量的数据迁移。</p>
<h2 id="顺序分布"><a href="#顺序分布" class="headerlink" title="顺序分布"></a>顺序分布</h2><p>将数据划分为多个连续的部分，按数据的 ID 或者时间分布到不同节点上。例如 User 表的 ID 范围为 1 ~ 7000，使用顺序分布可以将其划分成多个子表，对应的主键范围为 1 ~ 1000，1001 ~ 2000，…，6001 ~ 7000。</p>
<p>顺序分布相比于哈希分布的主要优点如下：</p>
<ul>
<li>能保持数据原有的顺序；</li>
<li>并且能够准确控制每台服务器存储的数据量，从而使得存储空间的利用率最大。</li>
</ul>
<p>参考资料：</p>
<ul>
<li>大规模分布式存储系统</li>
</ul>
<h1 id="七、一致性哈希"><a href="#七、一致性哈希" class="headerlink" title="七、一致性哈希"></a>七、一致性哈希</h1><p>Distributed Hash Table（DHT） 是一种哈希分布方式，其目的是为了克服传统哈希分布在服务器节点数量变化时大量数据失效的问题。</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>将哈希空间 [0, 2<sup>n</sup>-1] 看成一个哈希环，每个服务器节点都配置到哈希环上。每个数据对象通过哈希取模得到哈希值之后，存放到哈希环中顺时针方向第一个大于等于该哈希值的节点上。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//68b110b9-76c6-4ee2-b541-4145e65adb3e.jpg"/> </div><br>

<p>一致性哈希在增加或者删除节点时只会影响到哈希环中相邻的节点，例如下图中新增节点 X，只需要将它前一个节点 C 上的数据重新进行分布即可，对于节点 A、B、D 都没有影响。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//66402828-fb2b-418f-83f6-82153491bcfe.jpg"/> </div><br>

<h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>上面描述的一致性哈希存在数据分布不均匀的问题，节点存储的数据量有可能会存在很大的不同。</p>
<p>数据不均匀主要是因为节点在哈希环上分布的不均匀，这种情况在节点数量很少的情况下尤其明显。解决方式是通过增加虚拟节点，然后将虚拟节点映射到真实节点上。虚拟节点的数量比真实节点来得大，那么虚拟节点在哈希环上分布的均匀性就会比原来的真是节点好，从而使得数据分布也更加均匀。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://my.oschina.net/jayhu/blog/732849" target="_blank" rel="noopener external nofollow noreferrer">一致性哈希算法</a></li>
</ul>
]]></content>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/posts/8398.html</url>
    <content><![CDATA[<pre><code>有关于计算机操作系统的相关知识和内容，进程、内存、死锁、磁盘、编译等</code></pre><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><h3 id="1-并发"><a href="#1-并发" class="headerlink" title="1. 并发"></a>1. 并发</h3><p>并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p>
<p>并行需要硬件支持，如多流水线或者多处理器。</p>
<p>操作系统通过引入进程和线程，使得程序能够并发运行。</p>
<h3 id="2-共享"><a href="#2-共享" class="headerlink" title="2. 共享"></a>2. 共享</h3><p>共享是指系统中的资源可以被多个并发进程共同使用。</p>
<p>有两种共享方式：互斥共享和同时共享。</p>
<p>互斥共享的资源称为临界资源，例如打印机等，在同一时间只允许一个进程访问，需要用同步机制来实现对临界资源的访问。</p>
<h3 id="3-虚拟"><a href="#3-虚拟" class="headerlink" title="3. 虚拟"></a>3. 虚拟</h3><p>虚拟技术把一个物理实体转换为多个逻辑实体。</p>
<p>主要有两种虚拟技术：时分复用技术和空分复用技术。例如多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占有处理器，每次只执行一小个时间片并快速切换。</p>
<h3 id="4-异步"><a href="#4-异步" class="headerlink" title="4. 异步"></a>4. 异步</h3><p>异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="1-进程管理"><a href="#1-进程管理" class="headerlink" title="1. 进程管理"></a>1. 进程管理</h3><p>进程控制、进程同步、进程通信、死锁处理、处理机调度等。</p>
<h3 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2. 内存管理"></a>2. 内存管理</h3><p>内存分配、地址映射、内存保护与共享、虚拟内存等。</p>
<h3 id="3-文件管理"><a href="#3-文件管理" class="headerlink" title="3. 文件管理"></a>3. 文件管理</h3><p>文件存储空间的管理、目录管理、文件读写管理和保护等。</p>
<h3 id="4-设备管理"><a href="#4-设备管理" class="headerlink" title="4. 设备管理"></a>4. 设备管理</h3><p>完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。</p>
<p>主要包括缓冲管理、设备分配、设备处理、虛拟设备等。</p>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//tGPV0.png" width="600"/> </div><br>

<p>Linux 的系统调用主要有以下这些：</p>
<table>
<thead>
<tr>
<th align="center">Task</th>
<th>Commands</th>
</tr>
</thead>
<tbody><tr>
<td align="center">进程控制</td>
<td>fork(); exit(); wait();</td>
</tr>
<tr>
<td align="center">进程通信</td>
<td>pipe(); shmget(); mmap();</td>
</tr>
<tr>
<td align="center">文件操作</td>
<td>open(); read(); write();</td>
</tr>
<tr>
<td align="center">设备操作</td>
<td>ioctl(); read(); write();</td>
</tr>
<tr>
<td align="center">信息维护</td>
<td>getpid(); alarm(); sleep();</td>
</tr>
<tr>
<td align="center">安全</td>
<td>chmod(); umask(); chown();</td>
</tr>
</tbody></table>
<h2 id="大内核和微内核"><a href="#大内核和微内核" class="headerlink" title="大内核和微内核"></a>大内核和微内核</h2><h3 id="1-大内核"><a href="#1-大内核" class="headerlink" title="1. 大内核"></a>1. 大内核</h3><p>大内核是将操作系统功能作为一个紧密结合的整体放到内核。</p>
<p>由于各模块共享信息，因此有很高的性能。</p>
<h3 id="2-微内核"><a href="#2-微内核" class="headerlink" title="2. 微内核"></a>2. 微内核</h3><p>由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。</p>
<p>在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。</p>
<p>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//2_14_microkernelArchitecture.jpg"/> </div><br>

<h2 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h2><h3 id="1-外中断"><a href="#1-外中断" class="headerlink" title="1. 外中断"></a>1. 外中断</h3><p>由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p>
<h3 id="2-异常"><a href="#2-异常" class="headerlink" title="2. 异常"></a>2. 异常</h3><p>由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</p>
<h3 id="3-陷入"><a href="#3-陷入" class="headerlink" title="3. 陷入"></a>3. 陷入</h3><p>在用户程序中使用系统调用。</p>
<h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h3><p>进程是资源分配的基本单位。</p>
<p>进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p>
<p>下图显示了 4 个程序创建了 4 个进程，这 4 个进程可以并发地执行。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//a6ac2b08-3861-4e85-baa8-382287bfee9f.png"/> </div><br>

<h3 id="2-线程"><a href="#2-线程" class="headerlink" title="2. 线程"></a>2. 线程</h3><p>线程是独立调度的基本单位。</p>
<p>一个进程中可以有多个线程，它们共享进程资源。</p>
<p>QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//3cd630ea-017c-488d-ad1d-732b4efeddf5.png"/> </div><br>

<h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><p>（一）拥有资源</p>
<p>进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</p>
<p>（二）调度</p>
<p>线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。</p>
<p>（三）系统开销</p>
<p>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p>
<p>（四）通信方面</p>
<p>进程间通信 (IPC) 需要进程同步和互斥手段的辅助，以保证数据的一致性。而线程间可以通过直接读/写同一进程中的数据段（如全局变量）来进行通信。</p>
<h2 id="进程状态的切换"><a href="#进程状态的切换" class="headerlink" title="进程状态的切换"></a>进程状态的切换</h2><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//ProcessState.png" width="500"/> </div><br>

<ul>
<li>就绪状态（ready）：等待被调度</li>
<li>运行状态（running）</li>
<li>阻塞状态（waiting）：等待资源</li>
</ul>
<p>应该注意以下内容：</p>
<ul>
<li>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</li>
<li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</li>
</ul>
<h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p>
<h3 id="1-批处理系统"><a href="#1-批处理系统" class="headerlink" title="1. 批处理系统"></a>1. 批处理系统</h3><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>
<p><strong>1.1 先来先服务 first-come first-serverd（FCFS）</strong> </p>
<p>按照请求的顺序进行调度。</p>
<p>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p>
<p><strong>1.2 短作业优先 shortest job first（SJF）</strong> </p>
<p>按估计运行时间最短的顺序进行调度。</p>
<p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p>
<p><strong>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</strong> </p>
<p>按估计剩余时间最短的顺序进行调度。</p>
<h3 id="2-交互式系统"><a href="#2-交互式系统" class="headerlink" title="2. 交互式系统"></a>2. 交互式系统</h3><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p>
<p><strong>2.1 时间片轮转</strong> </p>
<p>将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。</p>
<p>时间片轮转算法的效率和时间片的大小有很大关系：</p>
<ul>
<li>因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。</li>
<li>而如果时间片过长，那么实时性就不能得到保证。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//8c662999-c16c-481c-9f40-1fdba5bc9167.png"/> </div><br>

<p><strong>2.2 优先级调度</strong> </p>
<p>为每个进程分配一个优先级，按优先级进行调度。</p>
<p>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>
<p><strong>2.3 多级反馈队列</strong> </p>
<p>如果一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p>
<p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p>
<p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p>
<p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//042cf928-3c8e-4815-ae9c-f2780202c68f.png"/> </div><br>

<h3 id="3-实时系统"><a href="#3-实时系统" class="headerlink" title="3. 实时系统"></a>3. 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。</p>
<p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>
<h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><h3 id="1-临界区"><a href="#1-临界区" class="headerlink" title="1. 临界区"></a>1. 临界区</h3><p>对临界资源进行访问的那段代码称为临界区。</p>
<p>为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。</p>
<pre><code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// entry section</span><br><span class="line">// critical section;</span><br><span class="line">// exit section</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-同步与互斥"><a href="#2-同步与互斥" class="headerlink" title="2. 同步与互斥"></a>2. 同步与互斥</h3><ul>
<li>同步：多个进程按一定顺序执行；</li>
<li>互斥：多个进程在同一时刻只有一个进程能进入临界区。</li>
</ul>
<h3 id="3-信号量"><a href="#3-信号量" class="headerlink" title="3. 信号量"></a>3. 信号量</h3><p>信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。</p>
<ul>
<li><strong>down</strong>  : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；</li>
<li><strong>up</strong> ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。</li>
</ul>
<p>down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。</p>
<p>如果信号量的取值只能为 0 或者 1，那么就成为了  <strong>互斥量（Mutex）</strong> ，0 表示临界区已经加锁，1 表示临界区解锁。</p>
<pre><code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><font size=3>  <strong>使用信号量实现生产者-消费者问题</strong>  </font> </br></p>
<p>问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。</p>
<p>因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。</p>
<p>为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量：empty 记录空缓冲区的数量，full 记录满缓冲区的数量。其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。</p>
<p>注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行 up(empty) 操作，empty 永远都为 0，导致生产者永远等待下，不会释放锁，消费者因此也会永远等待下去。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 100</span><br><span class="line">typedef int semaphore;</span><br><span class="line">semaphore mutex &#x3D; 1;</span><br><span class="line">semaphore empty &#x3D; N;</span><br><span class="line">semaphore full &#x3D; 0;</span><br><span class="line"></span><br><span class="line">void producer() &#123;</span><br><span class="line">    while(TRUE) &#123;</span><br><span class="line">        int item &#x3D; produce_item();</span><br><span class="line">        down(&amp;empty);</span><br><span class="line">        down(&amp;mutex);</span><br><span class="line">        insert_item(item);</span><br><span class="line">        up(&amp;mutex);</span><br><span class="line">        up(&amp;full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer() &#123;</span><br><span class="line">    while(TRUE) &#123;</span><br><span class="line">        down(&amp;full);</span><br><span class="line">        down(&amp;mutex);</span><br><span class="line">        int item &#x3D; remove_item();</span><br><span class="line">        up(&amp;mutex);</span><br><span class="line">        up(&amp;empty);</span><br><span class="line">        consume_item(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="4-管程"><a href="#4-管程" class="headerlink" title="4. 管程"></a>4. 管程</h3><p>使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</p>
<p>c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。</p>
<pre><code><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line">monitor ProducerConsumer</span><br><span class="line">    integer i;</span><br><span class="line">    condition c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">()</span>;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">remove</span><span class="params">()</span>;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> monitor;</span><br></pre></td></tr></table></figure></code></pre><p>管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否者其它进程永远不能使用管程。</p>
<p>管程引入了  <strong>条件变量</strong>  以及相关的操作：<strong>wait()</strong> 和 <strong>signal()</strong> 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。</p>
<p><font size=3> <strong>使用管程实现生产者-消费者问题</strong> </font><br></p>
<pre><code><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 管程</span></span><br><span class="line">monitor ProducerConsumer</span><br><span class="line">    condition full, empty;</span><br><span class="line">    integer count := <span class="number">0</span>;</span><br><span class="line">    condition c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(item: integer)</span>;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> count = N <span class="keyword">then</span> wait(full);</span><br><span class="line">        insert_item(item);</span><br><span class="line">        count := count + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count = <span class="number">1</span> <span class="keyword">then</span> signal(empty);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span>:</span> integer;</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> count = <span class="number">0</span> <span class="keyword">then</span> wait(empty);</span><br><span class="line">        remove = remove_item;</span><br><span class="line">        count := count - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count = N -<span class="number">1</span> <span class="keyword">then</span> signal(full);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> monitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者客户端</span></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">producer</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">while</span> <span class="title">true</span> <span class="title">do</span></span></span><br><span class="line"><span class="function">    <span class="title">begin</span></span></span><br><span class="line"><span class="function">        <span class="title">item</span> = <span class="title">produce_item</span>;</span></span><br><span class="line">        ProducerConsumer.insert(item);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者客户端</span></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">consumer</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">while</span> <span class="title">true</span> <span class="title">do</span></span></span><br><span class="line"><span class="function">    <span class="title">begin</span></span></span><br><span class="line"><span class="function">        <span class="title">item</span> = <span class="title">ProducerConsumer</span>.<span class="title">remove</span>;</span></span><br><span class="line">        consume_item(item);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></code></pre><h2 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h2><p>生产者和消费者问题前面已经讨论过了。</p>
<h3 id="1-读者-写者问题"><a href="#1-读者-写者问题" class="headerlink" title="1. 读者-写者问题"></a>1. 读者-写者问题</h3><p>允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。</p>
<p>一个整型变量 count 记录在对数据进行读操作的进程数量，一个互斥量 count_mutex 用于对 count 加锁，一个互斥量 data_mutex 用于对读写的数据加锁。</p>
<pre><code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line">semaphore count_mutex = <span class="number">1</span>;</span><br><span class="line">semaphore data_mutex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TRUE) &#123;</span><br><span class="line">        down(&amp;count_mutex);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">1</span>) down(&amp;data_mutex); <span class="comment">// 第一个读者需要对数据进行加锁，防止写进程访问</span></span><br><span class="line">        up(&amp;count_mutex);</span><br><span class="line">        <span class="built_in">read</span>();</span><br><span class="line">        down(&amp;count_mutex);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>) up(&amp;data_mutex);</span><br><span class="line">        up(&amp;count_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TRUE) &#123;</span><br><span class="line">        down(&amp;data_mutex);</span><br><span class="line">        <span class="built_in">write</span>();</span><br><span class="line">        up(&amp;data_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-哲学家进餐问题"><a href="#2-哲学家进餐问题" class="headerlink" title="2. 哲学家进餐问题"></a>2. 哲学家进餐问题</h3><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//a9077f06-7584-4f2b-8c20-3a8e46928820.jpg"/> </div><br>

<p>五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。</p>
<p>下面是一种错误的解法，考虑到如果所有哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 5</span><br><span class="line"></span><br><span class="line">void philosopher(int i) &#123;</span><br><span class="line">    while(TRUE) &#123;</span><br><span class="line">        think();</span><br><span class="line">        take(i);       &#x2F;&#x2F; 拿起左边的筷子</span><br><span class="line">        take((i+1)%N); &#x2F;&#x2F; 拿起右边的筷子</span><br><span class="line">        eat();</span><br><span class="line">        put(i);</span><br><span class="line">        put((i+1)%N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>为了防止死锁的发生，可以设置两个条件：</p>
<ul>
<li><p>必须同时拿起左右两根筷子；</p>
</li>
<li><p>只有在两个邻居都没有进餐的情况下才允许进餐。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 5</span><br><span class="line">#define LEFT (i + N - 1) % N &#x2F;&#x2F; 左邻居</span><br><span class="line">#define RIGHT (i + 1) % N    &#x2F;&#x2F; 右邻居</span><br><span class="line">#define THINKING 0</span><br><span class="line">#define HUNGRY   1</span><br><span class="line">#define EATING   2</span><br><span class="line">typedef int semaphore;</span><br><span class="line">int state[N];                &#x2F;&#x2F; 跟踪每个哲学家的状态</span><br><span class="line">semaphore mutex &#x3D; 1;         &#x2F;&#x2F; 临界区的互斥</span><br><span class="line">semaphore s[N];              &#x2F;&#x2F; 每个哲学家一个信号量</span><br><span class="line"></span><br><span class="line">void philosopher(int i) &#123;</span><br><span class="line">    while(TRUE) &#123;</span><br><span class="line">        think();</span><br><span class="line">        take_two(i);</span><br><span class="line">        eat();</span><br><span class="line">        put_tow(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void take_two(int i) &#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    state[i] &#x3D; HUNGRY;</span><br><span class="line">    test(i);</span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">    down(&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put_tow(i) &#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    state[i] &#x3D; THINKING;</span><br><span class="line">    test(LEFT);</span><br><span class="line">    test(RIGHT);</span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test(i) &#123;         &#x2F;&#x2F; 尝试拿起两把筷子</span><br><span class="line">    if(state[i] &#x3D;&#x3D; HUNGRY &amp;&amp; state[LEFT] !&#x3D; EATING &amp;&amp; state[RIGHT] !&#x3D;EATING) &#123;</span><br><span class="line">        state[i] &#x3D; EATING;</span><br><span class="line">        up(&amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>进程同步与进程通信很容易混淆，它们的区别在于：</p>
<ul>
<li>进程同步：控制多个进程按一定顺序执行；</li>
<li>进程通信：进程间传输信息。</li>
</ul>
<p>进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。</p>
<h3 id="1-管道"><a href="#1-管道" class="headerlink" title="1. 管道"></a>1. 管道</h3><p>管道是通过调用 pipe 函数创建的，fd[0] 用于读，fd[1] 用于写。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int pipe(int fd[2]);</span><br></pre></td></tr></table></figure></code></pre><p>它具有以下限制：</p>
<ul>
<li>只支持半双工通信（单向交替传输）；</li>
<li>只能在父子进程中使用。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//53cd9ade-b0a6-4399-b4de-7f1fbd06cdfb.png"/> </div><br>

<h3 id="2-FIFO"><a href="#2-FIFO" class="headerlink" title="2. FIFO"></a>2. FIFO</h3><p>也称为命名管道，去除了管道只能在父子进程中使用的限制。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">int mkfifo(const char *path, mode_t mode);</span><br><span class="line">int mkfifoat(int fd, const char *path, mode_t mode);</span><br></pre></td></tr></table></figure></code></pre><p>FIFO 常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//2ac50b81-d92a-4401-b9ec-f2113ecc3076.png"/> </div><br>

<h3 id="3-消息队列"><a href="#3-消息队列" class="headerlink" title="3. 消息队列"></a>3. 消息队列</h3><p>相比于 FIFO，消息队列具有以下优点：</p>
<ul>
<li>消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难；</li>
<li>避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；</li>
<li>读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。</li>
</ul>
<h3 id="4-信号量"><a href="#4-信号量" class="headerlink" title="4. 信号量"></a>4. 信号量</h3><p>它是一个计数器，用于为多个进程提供对共享数据对象的访问。</p>
<h3 id="5-共享存储"><a href="#5-共享存储" class="headerlink" title="5. 共享存储"></a>5. 共享存储</h3><p>允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种 IPC。</p>
<p>需要使用信号量用来同步对共享存储的访问。</p>
<p>多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外 XSI 共享内存不是使用文件，而是使用使用内存的匿名段。</p>
<h3 id="6-套接字"><a href="#6-套接字" class="headerlink" title="6. 套接字"></a>6. 套接字</h3><p>与其它通信机制不同的是，它可用于不同机器间的进程通信。</p>
<h1 id="三、死锁"><a href="#三、死锁" class="headerlink" title="三、死锁"></a>三、死锁</h1><h2 id="死锁的必要条件"><a href="#死锁的必要条件" class="headerlink" title="死锁的必要条件"></a>死锁的必要条件</h2><div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//c037c901-7eae-4e31-a1e4-9d41329e5c3e.png"/> </div><br>

<ul>
<li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li>
<li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li>
<li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li>
<li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li>
</ul>
<h2 id="死锁的处理方法"><a href="#死锁的处理方法" class="headerlink" title="死锁的处理方法"></a>死锁的处理方法</h2><h3 id="1-鸵鸟策略"><a href="#1-鸵鸟策略" class="headerlink" title="1. 鸵鸟策略"></a>1. 鸵鸟策略</h3><p>把头埋在沙子里，假装根本没发生问题。</p>
<p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p>
<p>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p>
<h3 id="2-死锁检测与死锁恢复"><a href="#2-死锁检测与死锁恢复" class="headerlink" title="2. 死锁检测与死锁恢复"></a>2. 死锁检测与死锁恢复</h3><p>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p>
<p>（一）每种类型一个资源的死锁检测</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//b1fa0453-a4b0-4eae-a352-48acca8fff74.png"/> </div><br>

<p>上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。</p>
<p>图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。</p>
<p>每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</p>
<p>（二）每种类型多个资源的死锁检测</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//e1eda3d5-5ec8-4708-8e25-1a04c5e11f48.png"/> </div><br>

<p>上图中，有三个进程四个资源，每个数据代表的含义如下：</p>
<ul>
<li>E 向量：资源总量</li>
<li>A 向量：资源剩余量</li>
<li>C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量</li>
<li>R 矩阵：每个进程请求的资源数量</li>
</ul>
<p>进程 P<sub>1</sub> 和 P<sub>2</sub> 所请求的资源都得不到满足，只有进程 P<sub>3</sub> 可以，让 P<sub>3</sub> 执行，之后释放 P<sub>3</sub> 拥有的资源，此时 A = (2 2 2 0)。P<sub>2</sub> 可以执行，执行后释放 P<sub>2</sub> 拥有的资源，A = (4 2 2 1) 。P<sub>1</sub> 也可以执行。所有进程都可以顺利执行，没有死锁。</p>
<p>算法总结如下：</p>
<p>每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。</p>
<ol>
<li>寻找一个没有标记的进程 P<sub>i</sub>，它所请求的资源小于等于 A。</li>
<li>如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。</li>
<li>如果没有这样一个进程，算法终止。</li>
</ol>
<p>（三）死锁恢复</p>
<ul>
<li>利用抢占恢复</li>
<li>利用回滚恢复</li>
<li>通过杀死进程恢复</li>
</ul>
<h3 id="3-死锁预防"><a href="#3-死锁预防" class="headerlink" title="3. 死锁预防"></a>3. 死锁预防</h3><p>在程序运行之前预防发生死锁。</p>
<p>（一）破坏互斥条件</p>
<p>例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</p>
<p>（二）破坏占有和等待条件</p>
<p>一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p>
<p>（三）破坏不可抢占条件</p>
<p>（四）破坏环路等待</p>
<p>给资源统一编号，进程只能按编号顺序来请求资源。</p>
<h3 id="4-死锁避免"><a href="#4-死锁避免" class="headerlink" title="4. 死锁避免"></a>4. 死锁避免</h3><p>在程序运行时避免发生死锁。</p>
<p>（一）安全状态</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//ed523051-608f-4c3f-b343-383e2d194470.png"/> </div><br>

<p>图 a 的第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数。从图 a 开始出发，先让 B 拥有所需的所有资源（图 b），运行结束后释放 B，此时 Free 变为 5（图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的。</p>
<p>定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。</p>
<p>安全状态的检测与死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法与死锁检测算法非常类似，可以结合着做参考对比。</p>
<p>（二）单个资源的银行家算法</p>
<p>一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//d160ec2e-cfe2-4640-bda7-62f53e58b8c0.png"/> </div><br>

<p>上图 c 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 c 中的状态。</p>
<p>（三）多个资源的银行家算法</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//62e0dd4f-44c3-43ee-bb6e-fedb9e068519.png"/> </div><br>

<p>上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源，注意这三个为向量，而不是具体数值，例如 A=(1020)，表示 4 个资源分别还剩下 1/0/2/0。</p>
<p>检查一个状态是否安全的算法如下：</p>
<ul>
<li>查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。</li>
<li>假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。</li>
<li>重复以上两步，直到所有进程都标记为终止，则状态时安全的。</li>
</ul>
<p>如果一个状态不是安全的，需要拒绝进入这个状态。</p>
<h1 id="四、内存管理"><a href="#四、内存管理" class="headerlink" title="四、内存管理"></a>四、内存管理</h1><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p>
<p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p>
<p>从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序称为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//7b281b1e-0595-402b-ae35-8c91084c33c1.png"/> </div><br>

<h2 id="分页系统地址映射"><a href="#分页系统地址映射" class="headerlink" title="分页系统地址映射"></a>分页系统地址映射</h2><p>内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。</p>
<p>下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位，也就是存储页面号，剩下 12 个比特位存储偏移量。</p>
<p>例如对于虚拟地址（0010 000000000100），前 4 位是存储页面号 2，读取表项内容为（110 1）。该页在内存中，并且页框的地址为 （110 000000000100）。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//cf4386a1-58c9-4eca-a17f-e12b1e9770eb.png" width="500"/> </div><br>

<h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。</p>
<p>页面置换算法和缓存淘汰策略类似，可以将内存看成磁盘的缓存。在缓存系统中，缓存的大小有限，当有新的缓存到达时，需要淘汰一部分已经存在的缓存，这样才有空间存放新的缓存数据。</p>
<p>页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。</p>
<h3 id="1-最佳"><a href="#1-最佳" class="headerlink" title="1. 最佳"></a>1. 最佳</h3><blockquote>
<p>Optimal</p>
</blockquote>
<p>所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。</p>
<p>是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。</p>
<p>举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：</p>
<div align="center"><img src= "/img/loading.gif" data-src="https://latex.codecogs.com/gif.latex?7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1"/></div> <br>

<p>开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。</p>
<h3 id="2-最近最久未使用"><a href="#2-最近最久未使用" class="headerlink" title="2. 最近最久未使用"></a>2. 最近最久未使用</h3><blockquote>
<p>LRU, Least Recently Used</p>
</blockquote>
<p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。</p>
<p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面时最近最久未访问的。</p>
<p>因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</p>
<div align="center"><img src= "/img/loading.gif" data-src="https://latex.codecogs.com/gif.latex?4，7，0，7，1，0，1，2，1，2，6"/></div> <br>

<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//eb859228-c0f2-4bce-910d-d9f76929352b.png"/> </div><br>

<h3 id="3-最近未使用"><a href="#3-最近未使用" class="headerlink" title="3. 最近未使用"></a>3. 最近未使用</h3><blockquote>
<p>NRU, Not Recently Used</p>
</blockquote>
<p>每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类：</p>
<ul>
<li>R=0，M=0</li>
<li>R=0，M=1</li>
<li>R=1，M=0</li>
<li>R=1，M=1</li>
</ul>
<p>当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。</p>
<p>NRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。</p>
<h3 id="4-先进先出"><a href="#4-先进先出" class="headerlink" title="4. 先进先出"></a>4. 先进先出</h3><blockquote>
<p>FIFO, First In First Out</p>
</blockquote>
<p>选择换出的页面是最先进入的页面。</p>
<p>该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。</p>
<h3 id="5-第二次机会算法"><a href="#5-第二次机会算法" class="headerlink" title="5. 第二次机会算法"></a>5. 第二次机会算法</h3><p>FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：</p>
<p>当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//ecf8ad5d-5403-48b9-b6e7-f2e20ffe8fca.png"/> </div><br>


<h3 id="6-时钟"><a href="#6-时钟" class="headerlink" title="6. 时钟"></a>6. 时钟</h3><blockquote>
<p>Clock</p>
</blockquote>
<p>第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面链接起来，再使用一个指针指向最老的页面。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//5f5ef0b6-98ea-497c-a007-f6c55288eab1.png"/> </div><br>

<h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与内存进行映射。</p>
<p>下图为一个编译器在编译过程中建立的多个表，有 4 个表是动态增长的，如果使用分页系统的一维地址空间，动态增长的特点会导致覆盖问题的出现。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//22de0538-7c6e-4365-bd3b-8ce3c5900216.png"/> </div><br>

<p>分段的做法是把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//e0900bb2-220a-43b7-9aa9-1d5cd55ff56e.png"/> </div><br>

<h2 id="段页式"><a href="#段页式" class="headerlink" title="段页式"></a>段页式</h2><p>程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</p>
<h2 id="分页与分段的比较"><a href="#分页与分段的比较" class="headerlink" title="分页与分段的比较"></a>分页与分段的比较</h2><ul>
<li><p>对程序员的透明性：分页透明，但是分段需要程序员显示划分每个段。</p>
</li>
<li><p>地址空间的维度：分页是一维地址空间，分段是二维的。</p>
</li>
<li><p>大小是否可以改变：页的大小不可变，段的大小可以动态改变。</p>
</li>
<li><p>出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。</p>
</li>
</ul>
<h1 id="五、设备管理"><a href="#五、设备管理" class="headerlink" title="五、设备管理"></a>五、设备管理</h1><h2 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h2><ul>
<li>盘面（Platter）：一个磁盘有多个盘面；</li>
<li>磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道；</li>
<li>扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4 K 两种大小；</li>
<li>磁头（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）；</li>
<li>制动手臂（Actuator arm）：用于在磁道之间移动磁头；</li>
<li>主轴（Spindle）：使整个盘面转动。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//014fbc4d-d873-4a12-b160-867ddaed9807.jpg"/> </div><br>

<h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><p>读写一个磁盘块的时间的影响因素有：</p>
<ul>
<li>旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）</li>
<li>寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）</li>
<li>实际的数据传输时间</li>
</ul>
<p>其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p>
<h3 id="1-先来先服务"><a href="#1-先来先服务" class="headerlink" title="1. 先来先服务"></a>1. 先来先服务</h3><blockquote>
<p>FCFS, First Come First Served</p>
</blockquote>
<p>按照磁盘请求的顺序进行调度。</p>
<p>优点是公平和简单。缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。</p>
<h3 id="2-最短寻道时间优先"><a href="#2-最短寻道时间优先" class="headerlink" title="2. 最短寻道时间优先"></a>2. 最短寻道时间优先</h3><blockquote>
<p>SSTF, Shortest Seek Time First</p>
</blockquote>
<p>优先调度与当前磁头所在磁道距离最近的磁道。</p>
<p>虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两边的磁道请求更容易出现饥饿现象。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//4e2485e4-34bd-4967-9f02-0c093b797aaa.png"/> </div><br>

<h3 id="3-电梯算法"><a href="#3-电梯算法" class="headerlink" title="3. 电梯算法"></a>3. 电梯算法</h3><blockquote>
<p>SCAN</p>
</blockquote>
<p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</p>
<p>电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。</p>
<p>因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//271ce08f-c124-475f-b490-be44fedc6d2e.png"/> </div><br>

<h1 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h1><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>以下是一个 hello.c 程序：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello, world\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>在 Unix 系统上，由编译器把源文件转换为目标文件。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">gcc -o hello hello.c</span><br></pre></td></tr></table></figure></code></pre><p>这个过程大致如下：</p>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//b396d726-b75f-4a32-89a2-03a7b6e19f6f.jpg" width="800"/> </div><br>

<ul>
<li>预处理阶段：处理以 # 开头的预处理命令；</li>
<li>编译阶段：翻译成汇编文件；</li>
<li>汇编阶段：将汇编文件翻译成可重定向目标文件；</li>
<li>链接阶段：将可重定向目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。</li>
</ul>
<h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>静态连接器以一组可重定向目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：</p>
<ul>
<li>符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。</li>
<li>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//47d98583-8bb0-45cc-812d-47eefa0a4a40.jpg"/> </div><br>

<h2 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h2><ul>
<li>可执行目标文件：可以直接在内存中执行；</li>
<li>可重定向目标文件：可与其它可重定向目标文件在链接阶段合并，创建一个可执行目标文件；</li>
<li>共享目标文件：这是一种特殊的可重定向目标文件，可以在运行时被动态加载进内存并链接；</li>
</ul>
<h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>静态库有以下两个问题：</p>
<ul>
<li>当静态库更新时那么整个程序都要重新进行链接；</li>
<li>对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。</li>
</ul>
<p>共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：</p>
<ul>
<li>在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；</li>
<li>在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="https://github.com/wangchuanli001/image-host/raw/master/AllImage/study-pics//76dc7769-1aac-4888-9bea-064f1caa8e77.jpg"/> </div><br>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014.</li>
<li>汤子瀛, 哲凤屏, 汤小丹. 计算机操作系统[M]. 西安电子科技大学出版社, 2001.</li>
<li>Bryant, R. E., &amp; O’Hallaron, D. R. (2004). 深入理解计算机系统.</li>
<li>史蒂文斯. UNIX 环境高级编程 [M]. 人民邮电出版社, 2014.</li>
<li><a href="https://applied-programming.github.io/Operating-Systems-Notes/" target="_blank" rel="noopener external nofollow noreferrer">Operating System Notes</a></li>
<li><a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/2_Structures.html" target="_blank" rel="noopener external nofollow noreferrer">Operating-System Structures</a></li>
<li><a href="http://cse.csusb.edu/tongyu/courses/cs460/notes/process.php" target="_blank" rel="noopener external nofollow noreferrer">Processes</a></li>
<li><a href="https://www.slideshare.net/rkolahalam/inter-process-communication-presentation1" target="_blank" rel="noopener external nofollow noreferrer">Inter Process Communication Presentation[1]</a></li>
<li><a href="https://blogs.cisco.com/datacenter/decoding-ucs-invicta-part-1" target="_blank" rel="noopener external nofollow noreferrer">Decoding UCS Invicta – Part 1</a></li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>编程系列豆瓣书单</title>
    <url>/posts/4496.html</url>
    <content><![CDATA[<pre><code>豆瓣书单    数据结构与算法、操作系统、计算机网络、数据库、java等</code></pre><hr>
<h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><ul>
<li><a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener external nofollow noreferrer">算法</a></li>
<li><a href="https://book.douban.com/subject/3351237/" target="_blank" rel="noopener external nofollow noreferrer">数据结构与算法分析</a></li>
<li><a href="https://book.douban.com/subject/3227098/" target="_blank" rel="noopener external nofollow noreferrer">编程珠玑</a></li>
<li><a href="https://book.douban.com/subject/25910559/" target="_blank" rel="noopener external nofollow noreferrer">剑指 Offer</a></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><a href="https://book.douban.com/subject/3852290/" target="_blank" rel="noopener external nofollow noreferrer">现代操作系统</a></li>
<li><a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener external nofollow noreferrer">深入理解计算机系统</a></li>
<li><a href="https://book.douban.com/subject/4889838/" target="_blank" rel="noopener external nofollow noreferrer">鸟哥的 Linux 私房菜</a></li>
<li><a href="https://book.douban.com/subject/25900403/" target="_blank" rel="noopener external nofollow noreferrer">Unix 环境高级编程</a></li>
<li><a href="https://book.douban.com/subject/1219329/" target="_blank" rel="noopener external nofollow noreferrer">Unix/Linux 编程实践教程</a></li>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener external nofollow noreferrer">Operating Systems: Three Easy Pieces (OSTEP)</a></li>
</ul>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ul>
<li><a href="https://book.douban.com/subject/2970300/" target="_blank" rel="noopener external nofollow noreferrer">计算机网络</a></li>
<li><a href="https://book.douban.com/subject/1391207/" target="_blank" rel="noopener external nofollow noreferrer">计算机网络 自顶向下方法</a></li>
<li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener external nofollow noreferrer">图解 HTTP</a></li>
<li><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener external nofollow noreferrer">TCP/IP 详解 卷 1：协议</a></li>
<li><a href="https://book.douban.com/subject/1500149/" target="_blank" rel="noopener external nofollow noreferrer">UNIX 网络编程</a></li>
<li><a href="https://book.douban.com/subject/20471211/" target="_blank" rel="noopener external nofollow noreferrer">Linux 多线程服务端编程</a></li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener external nofollow noreferrer">Head First 设计模式</a></li>
<li><a href="https://book.douban.com/subject/1052241/" target="_blank" rel="noopener external nofollow noreferrer">设计模式 可复用面向对象软件的基础</a></li>
<li><a href="https://book.douban.com/subject/1140457/" target="_blank" rel="noopener external nofollow noreferrer">敏捷软件开发 原则、模式与实践</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><a href="https://book.douban.com/subject/10548379/" target="_blank" rel="noopener external nofollow noreferrer">数据库系统概念</a></li>
<li><a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener external nofollow noreferrer">MySQL 必知必会</a></li>
<li><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener external nofollow noreferrer">高性能 MySQL</a></li>
<li><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="noopener external nofollow noreferrer">Redis 设计与实现</a></li>
<li><a href="https://book.douban.com/subject/26612779/" target="_blank" rel="noopener external nofollow noreferrer">Redis 实战</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="noopener external nofollow noreferrer">Java 编程思想</a></li>
<li><a href="https://book.douban.com/subject/3360807/" target="_blank" rel="noopener external nofollow noreferrer">Effective java 中文版</a></li>
<li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener external nofollow noreferrer">深入理解 Java 虚拟机</a></li>
<li><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener external nofollow noreferrer">Java 并发编程实战</a></li>
<li><a href="https://book.douban.com/subject/26952826/" target="_blank" rel="noopener external nofollow noreferrer">精通 Spring 4.x</a></li>
<li><a href="https://book.douban.com/subject/3897837/" target="_blank" rel="noopener external nofollow noreferrer">Spring 揭秘</a></li>
</ul>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><ul>
<li><a href="https://book.douban.com/subject/25708312/" target="_blank" rel="noopener external nofollow noreferrer">C++ Primer</a></li>
<li><a href="https://book.douban.com/subject/1842426/" target="_blank" rel="noopener external nofollow noreferrer">Effective C++</a></li>
<li><a href="https://book.douban.com/subject/1480481/" target="_blank" rel="noopener external nofollow noreferrer">C++ 编程规范</a></li>
<li><a href="https://book.douban.com/subject/1110934/" target="_blank" rel="noopener external nofollow noreferrer">STL 源码剖析</a></li>
<li><a href="https://book.douban.com/subject/1091086/" target="_blank" rel="noopener external nofollow noreferrer">深度探索 C++ 对象模型</a></li>
</ul>
<h3 id="网站架构-分布式"><a href="#网站架构-分布式" class="headerlink" title="网站架构/分布式"></a>网站架构/分布式</h3><ul>
<li><a href="https://book.douban.com/subject/25723658/" target="_blank" rel="noopener external nofollow noreferrer">大规模分布式存储系统</a></li>
<li><a href="https://book.douban.com/subject/26292004/" target="_blank" rel="noopener external nofollow noreferrer">从 Paxos 到 Zookeeper</a></li>
<li><a href="https://book.douban.com/subject/25867042/" target="_blank" rel="noopener external nofollow noreferrer">大型网站系统与 Java 中间件开发实践</a></li>
<li><a href="https://book.douban.com/subject/24335672/" target="_blank" rel="noopener external nofollow noreferrer">淘宝技术这十年</a></li>
<li><a href="https://book.douban.com/subject/22793675/" target="_blank" rel="noopener external nofollow noreferrer">深入理解 Nginx</a></li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener external nofollow noreferrer">Pro Git</a></li>
<li><a href="https://book.douban.com/subject/2269648/" target="_blank" rel="noopener external nofollow noreferrer">正则表达式必知必会</a></li>
</ul>
<h3 id="编码实践"><a href="#编码实践" class="headerlink" title="编码实践"></a>编码实践</h3><ul>
<li><a href="https://book.douban.com/subject/4262627/" target="_blank" rel="noopener external nofollow noreferrer">重构</a></li>
<li><a href="https://book.douban.com/subject/1477390/" target="_blank" rel="noopener external nofollow noreferrer">代码大全</a></li>
<li><a href="https://book.douban.com/subject/1102259/" target="_blank" rel="noopener external nofollow noreferrer">人月神话</a></li>
<li><a href="https://book.douban.com/subject/11614538/" target="_blank" rel="noopener external nofollow noreferrer">程序员的职业素养</a></li>
<li><a href="https://book.douban.com/subject/10797189/" target="_blank" rel="noopener external nofollow noreferrer">编写可读代码的艺术</a></li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li><a href="https://book.douban.com/subject/3590768/" target="_blank" rel="noopener external nofollow noreferrer">JavaScript 语言精粹</a></li>
<li><a href="https://book.douban.com/subject/25779298/" target="_blank" rel="noopener external nofollow noreferrer">利用 Python 进行数据分析</a></li>
<li><a href="https://book.douban.com/subject/2201479/" target="_blank" rel="noopener external nofollow noreferrer">概率论与数理统计</a></li>
</ul>
]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的思想</title>
    <url>/posts/16566.html</url>
    <content><![CDATA[<pre><code>面向对象    三大特性、关系类图、设计模式</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一三大特性">一、三大特性</a><ul>
<li><a href="#封装">封装</a></li>
<li><a href="#继承">继承</a></li>
<li><a href="#多态">多态</a></li>
</ul>
</li>
<li><a href="#二类图">二、类图</a><ul>
<li><a href="#泛化关系-generalization">泛化关系 (Generalization)</a></li>
<li><a href="#实现关系-realization">实现关系 (Realization)</a></li>
<li><a href="#聚合关系-aggregation">聚合关系 (Aggregation)</a></li>
<li><a href="#组合关系-composition">组合关系 (Composition)</a></li>
<li><a href="#关联关系-association">关联关系 (Association)</a></li>
<li><a href="#依赖关系-dependency">依赖关系 (Dependency)</a></li>
</ul>
</li>
<li><a href="#三设计原则">三、设计原则</a><ul>
<li><a href="#solid">S.O.L.I.D</a></li>
<li><a href="#其他常见原则">其他常见原则</a></li>
</ul>
</li>
<li><a href="#参考资料">参考资料</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、三大特性"><a href="#一、三大特性" class="headerlink" title="一、三大特性"></a>一、三大特性</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p>
<p>优点：</p>
<ul>
<li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li>
<li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li>
<li>有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能</li>
<li>提高软件的可重用性</li>
<li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li>
</ul>
<p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p>
<p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender == <span class="number">0</span> ? <span class="string">"man"</span> : <span class="string">"woman"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">18</span> &lt;= age &amp;&amp; age &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" is working very hard!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" can't work any more!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承实现了  <strong>IS-A</strong>  关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p>
<p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为  <strong>向上转型</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure>

<p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态分为编译时多态和运行时多态。编译时多态主要指方法的重载，运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定。</p>
<p>运行时多态有三个条件：</p>
<ul>
<li>继承</li>
<li>覆盖（重写）</li>
<li>向上转型</li>
</ul>
<p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Instument is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Wind is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percussion</span> <span class="keyword">extends</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Percussion is playing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Instrument&gt; instruments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        instruments.add(<span class="keyword">new</span> Wind());</span><br><span class="line">        instruments.add(<span class="keyword">new</span> Percussion());</span><br><span class="line">        <span class="keyword">for</span>(Instrument instrument : instruments) &#123;</span><br><span class="line">            instrument.play();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h1><p>以下类图使用 <a href="https://www.planttext.com/" target="_blank" rel="noopener external nofollow noreferrer">PlantUML</a> 绘制，更多语法及使用请参考：<a href="http://plantuml.com/" target="_blank" rel="noopener external nofollow noreferrer">http://plantuml.com/</a></p>
<h2 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系 (Generalization)"></a>泛化关系 (Generalization)</h2><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Generalization</span><br><span class="line"></span><br><span class="line">class Vihical</span><br><span class="line">class Car</span><br><span class="line">class Trunck</span><br><span class="line"></span><br><span class="line">Vihical &lt;|-- Car</span><br><span class="line">Vihical &lt;|-- Trunck</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="实现关系-Realization"><a href="#实现关系-Realization" class="headerlink" title="实现关系 (Realization)"></a>实现关系 (Realization)</h2><p>用来实现一个接口，在 Java 中使用 implement 关键字。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuU8goIp9ILK8IatCoQn.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Realization</span><br><span class="line"></span><br><span class="line">interface MoveBehavior</span><br><span class="line">class Fly</span><br><span class="line">class Run</span><br><span class="line"></span><br><span class="line">MoveBehavior &lt;|.. Fly</span><br><span class="line">MoveBehavior &lt;|.. Run</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系 (Aggregation)"></a>聚合关系 (Aggregation)</h2><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Aggregation</span><br><span class="line"></span><br><span class="line">class Computer</span><br><span class="line">class Keyboard</span><br><span class="line">class Mouse</span><br><span class="line">class Screen</span><br><span class="line"></span><br><span class="line">Computer o-- Keyboard</span><br><span class="line">Computer o-- Mouse</span><br><span class="line">Computer o-- Screen</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系 (Composition)"></a>组合关系 (Composition)</h2><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Composition</span><br><span class="line"></span><br><span class="line">class Company</span><br><span class="line">class DepartmentA</span><br><span class="line">class DepartmentB</span><br><span class="line"></span><br><span class="line">Company *-- DepartmentA</span><br><span class="line">Company *-- DepartmentB</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系 (Association)"></a>关联关系 (Association)</h2><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Association</span><br><span class="line"></span><br><span class="line">class School</span><br><span class="line">class Student</span><br><span class="line"></span><br><span class="line">School &quot;1&quot; - &quot;n&quot; Student</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h2 id="依赖关系-Dependency"><a href="#依赖关系-Dependency" class="headerlink" title="依赖关系 (Dependency)"></a>依赖关系 (Dependency)</h2><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p>
<ul>
<li>A 类是 B 类中的（某中方法的）局部变量；</li>
<li>A 类是 B 类方法当中的一个参数；</li>
<li>A 类向 B 类发送消息，从而影响 B 类发生变化；</li>
</ul>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//LOun2W9134NxVugmbJPp15d4LalxC4O.png"/> </div><br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">title Dependency</span><br><span class="line"></span><br><span class="line">class Vihicle &#123;</span><br><span class="line">    move(MoveBehavior)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface MoveBehavior &#123;</span><br><span class="line">    move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">note &quot;MoveBehavior.move()&quot; as N</span><br><span class="line"></span><br><span class="line">Vihicle ..&gt; MoveBehavior</span><br><span class="line"></span><br><span class="line">Vihicle .. N</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h1 id="三、设计原则"><a href="#三、设计原则" class="headerlink" title="三、设计原则"></a>三、设计原则</h1><h2 id="S-O-L-I-D"><a href="#S-O-L-I-D" class="headerlink" title="S.O.L.I.D"></a>S.O.L.I.D</h2><table>
<thead>
<tr>
<th align="center">简写</th>
<th align="center">全拼</th>
<th align="center">中文翻译</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SRP</td>
<td align="center">The Single Responsibility Principle</td>
<td align="center">单一责任原则</td>
</tr>
<tr>
<td align="center">OCP</td>
<td align="center">The Open Closed Principle</td>
<td align="center">开放封闭原则</td>
</tr>
<tr>
<td align="center">LSP</td>
<td align="center">The Liskov Substitution Principle</td>
<td align="center">里氏替换原则</td>
</tr>
<tr>
<td align="center">ISP</td>
<td align="center">The Interface Segregation Principle</td>
<td align="center">接口分离原则</td>
</tr>
<tr>
<td align="center">DIP</td>
<td align="center">The Dependency Inversion Principle</td>
<td align="center">依赖倒置原则</td>
</tr>
</tbody></table>
<h3 id="1-单一责任原则"><a href="#1-单一责任原则" class="headerlink" title="1. 单一责任原则"></a>1. 单一责任原则</h3><blockquote>
<p>修改一个类的原因应该只有一个。</p>
</blockquote>
<p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p>
<p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p>
<h3 id="2-开放封闭原则"><a href="#2-开放封闭原则" class="headerlink" title="2. 开放封闭原则"></a>2. 开放封闭原则</h3><blockquote>
<p>类应该对扩展开放，对修改关闭。</p>
</blockquote>
<p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p>
<p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p>
<h3 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3. 里氏替换原则"></a>3. 里氏替换原则</h3><blockquote>
<p>子类对象必须能够替换掉所有父类对象。</p>
</blockquote>
<p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p>
<p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p>
<h3 id="4-接口分离原则"><a href="#4-接口分离原则" class="headerlink" title="4. 接口分离原则"></a>4. 接口分离原则</h3><blockquote>
<p>不应该强迫客户依赖于它们不用的方法。</p>
</blockquote>
<p>因此使用多个专门的接口比使用单一的总接口要好。</p>
<h3 id="5-依赖倒置原则"><a href="#5-依赖倒置原则" class="headerlink" title="5. 依赖倒置原则"></a>5. 依赖倒置原则</h3><blockquote>
<p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；</br>抽象不应该依赖于细节，细节应该依赖于抽象。</p>
</blockquote>
<p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p>
<p>依赖于抽象意味着：</p>
<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用；</li>
<li>任何类都不应该从具体类派生；</li>
<li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li>
</ul>
<h2 id="其他常见原则"><a href="#其他常见原则" class="headerlink" title="其他常见原则"></a>其他常见原则</h2><p>除了上述的经典原则，在实际开发中还有下面这些常见的设计原则。</p>
<table>
<thead>
<tr>
<th align="center">简写</th>
<th align="center">全拼</th>
<th align="center">中文翻译</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LOD</td>
<td align="center">The Law of Demeter</td>
<td align="center">迪米特法则</td>
</tr>
<tr>
<td align="center">CRP</td>
<td align="center">The Composite Reuse Principle</td>
<td align="center">合成复用原则</td>
</tr>
<tr>
<td align="center">CCP</td>
<td align="center">The Common Closure Principle</td>
<td align="center">共同封闭原则</td>
</tr>
<tr>
<td align="center">SAP</td>
<td align="center">The Stable Abstractions Principle</td>
<td align="center">稳定抽象原则</td>
</tr>
<tr>
<td align="center">SDP</td>
<td align="center">The Stable Dependencies Principle</td>
<td align="center">稳定依赖原则</td>
</tr>
</tbody></table>
<h3 id="1-迪米特法则"><a href="#1-迪米特法则" class="headerlink" title="1. 迪米特法则"></a>1. 迪米特法则</h3><p>迪米特法则又叫作最少知识原则（Least Knowledge Principle，简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p>
<h3 id="2-合成复用原则"><a href="#2-合成复用原则" class="headerlink" title="2. 合成复用原则"></a>2. 合成复用原则</h3><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h3 id="3-共同封闭原则"><a href="#3-共同封闭原则" class="headerlink" title="3. 共同封闭原则"></a>3. 共同封闭原则</h3><p>一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</p>
<h3 id="4-稳定抽象原则"><a href="#4-稳定抽象原则" class="headerlink" title="4. 稳定抽象原则"></a>4. 稳定抽象原则</h3><p>最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即包的抽象程度跟它的稳定性成正比。</p>
<h3 id="5-稳定依赖原则"><a href="#5-稳定依赖原则" class="headerlink" title="5. 稳定依赖原则"></a>5. 稳定依赖原则</h3><p>包之间的依赖关系都应该是稳定方向依赖的，包要依赖的包要比自己更具有稳定性。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>Java 编程思想</li>
<li>敏捷软件开发：原则、模式与实践</li>
<li><a href="http://www.cnblogs.com/shanyou/archive/2009/09/21/1570716.html" target="_blank" rel="noopener external nofollow noreferrer">面向对象设计的 SOLID 原则</a></li>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#generalization" target="_blank" rel="noopener external nofollow noreferrer">看懂 UML 类图和时序图</a></li>
<li><a href="http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html" target="_blank" rel="noopener external nofollow noreferrer">UML 系列——时序图（顺序图）sequence diagram</a></li>
<li><a href="http://blog.csdn.net/jianyuerensheng/article/details/51602015" target="_blank" rel="noopener external nofollow noreferrer">面向对象编程三大特性 —— 封装、继承、多态</a></li>
</ul>
]]></content>
      <tags>
        <tag>OO</tag>
      </tags>
  </entry>
  <entry>
    <title>项目构建工具</title>
    <url>/posts/19844.html</url>
    <content><![CDATA[<pre><code>项目构建工具    maven\ant\Gradle 简介与使用</code></pre><!-- GFM-TOC -->
<ul>
<li><a href="#一什么是构建工具">一、什么是构建工具</a></li>
<li><a href="#二java-主流构建工具">二、Java 主流构建工具</a></li>
<li><a href="#三maven">三、Maven</a><!-- GFM-TOC -->


</li>
</ul>
<h1 id="一、什么是构建工具"><a href="#一、什么是构建工具" class="headerlink" title="一、什么是构建工具"></a>一、什么是构建工具</h1><p>构建工具是用于构建项目的自动化工具，主要包含以下工作：</p>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>不再需要手动导入 Jar 依赖包，并且可以自动处理依赖关系，也就是说某个依赖如果依赖于其它依赖，构建工具可以帮助我们自动处理这种依赖管理。</p>
<h2 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h2><p>不再需要在项目代码中添加测试代码，从而污染项目代码。</p>
<h2 id="将源代码转化为可执行文件"><a href="#将源代码转化为可执行文件" class="headerlink" title="将源代码转化为可执行文件"></a>将源代码转化为可执行文件</h2><p>包含预处理、编译、汇编、链接等步骤。</p>
<h2 id="将可执行文件进行打包"><a href="#将可执行文件进行打包" class="headerlink" title="将可执行文件进行打包"></a>将可执行文件进行打包</h2><p>不再需要使用 IDE 将应用程序打包成 Jar 包。</p>
<h2 id="发布到生产服务器上"><a href="#发布到生产服务器上" class="headerlink" title="发布到生产服务器上"></a>发布到生产服务器上</h2><p>不再需要通过 FTP 将 Jar 包上传到服务器上。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/7249871/what-is-a-build-tool" target="_blank" rel="noopener external nofollow noreferrer">What is a build tool?</a></li>
</ul>
<h1 id="二、Java-主流构建工具"><a href="#二、Java-主流构建工具" class="headerlink" title="二、Java 主流构建工具"></a>二、Java 主流构建工具</h1><p>主要包括 Ant、Maven 和 Gradle。</p>
<div align="center"> <img src= "/img/loading.gif" data-src="../pics//897503d0-59e3-4752-903d-529fbdb72fee.jpg"/> </div><br>

<p>Gradle 和 Maven 的区别是，它使用 Groovy 这种特定领域语言（DSL）来管理构建脚本，而不再使用 XML 这种标记性语言。因为项目如果庞大的话，XML 很容易就变得臃肿。</p>
<p>例如要在项目中引入 Junit，Maven 的代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jizg.study.maven.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 Gradle 只需要几行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="string">"junit:junit:4.10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<ul>
<li><a href="https://programmingmitra.blogspot.com/2016/05/java-build-tools-comparisons-ant-vs.html" target="_blank" rel="noopener external nofollow noreferrer">Java Build Tools Comparisons: Ant vs Maven vs Gradle</a></li>
<li><a href="http://sagioto.github.io/maven2gradle/" target="_blank" rel="noopener external nofollow noreferrer">maven 2 gradle</a></li>
<li><a href="https://www.imooc.com/learn/833" target="_blank" rel="noopener external nofollow noreferrer">新一代构建工具 gradle</a></li>
</ul>
<h1 id="三、Maven"><a href="#三、Maven" class="headerlink" title="三、Maven"></a>三、Maven</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>提供了项目对象模型（POM）文件来管理项目的构建。</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>仓库的搜索顺序为：本地仓库、中央仓库、远程仓库。</p>
<ul>
<li>本地仓库用来存储项目的依赖库；</li>
<li>中央仓库是下载依赖库的默认位置；</li>
<li>远程仓库，因为并非所有的库存储在中央仓库，或者中央仓库访问速度很慢，远程仓库是中央仓库的补充。</li>
</ul>
<h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><p>POM 代表项目对象模型，它是一个 XML 文件，保存在项目根目录的 pom.xml 文件中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>[groupId, artifactId, version, packaging, classfier] 称为一个项目的坐标，其中 groupId、artifactId、version 必须定义，packaging 可选（默认为 Jar），classfier 不能直接定义的，需要结合插件使用。</p>
<ul>
<li>groupId：项目组 Id，必须全球唯一；</li>
<li>artifactId：项目 Id，即项目名；</li>
<li>version：项目版本；</li>
<li>packaging：项目打包方式。</li>
</ul>
<h2 id="依赖原则"><a href="#依赖原则" class="headerlink" title="依赖原则"></a>依赖原则</h2><h3 id="依赖路径最短优先原则"><a href="#依赖路径最短优先原则" class="headerlink" title="依赖路径最短优先原则"></a>依赖路径最短优先原则</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">A -&gt; B -&gt; C -&gt; X(1.0)</span><br><span class="line">A -&gt; D -&gt; X(2.0)</span><br></pre></td></tr></table></figure>
<p>由于 X(2.0) 路径最短，所以使用 X(2.0)。</p>
<h3 id="声明顺序优先原则"><a href="#声明顺序优先原则" class="headerlink" title="声明顺序优先原则"></a>声明顺序优先原则</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">A -&gt; B -&gt; X(1.0)</span><br><span class="line">A -&gt; C -&gt; X(2.0)</span><br></pre></td></tr></table></figure>

<p>在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。</p>
<h3 id="覆写优先原则"><a href="#覆写优先原则" class="headerlink" title="覆写优先原则"></a>覆写优先原则</h3><p>子 POM 内声明的依赖优先于父 POM 中声明的依赖。</p>
<h2 id="解决依赖冲突"><a href="#解决依赖冲突" class="headerlink" title="解决依赖冲突"></a>解决依赖冲突</h2><p>找到 Maven 加载的 Jar 包版本，使用 <code>mvn dependency:tree</code> 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification" target="_blank" rel="noopener external nofollow noreferrer">POM Reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub的表情预览</title>
    <url>/posts/33955.html</url>
    <content><![CDATA[<pre><code>github的全部表情系列</code></pre><p>最新emoji大全：<a href="https://github.com/caiyongji/emoji-list" target="_blank" rel="noopener external nofollow noreferrer">emoji列表</a></p>
<h1 id="articleHeader0">emoji-list</h1>


<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#人物">人物</a></li>
<li><a href="#自然">自然</a></li>
<li><a href="#事物">事物</a></li>
<li><a href="#地点">地点</a></li>
<li><a href="#符号">符号</a></li>
</ul>
<h3 id="人物">人物</h3>

<div>
<table>
<thead><tr>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bowtie.png" class="emoji" alt="bowtie" title="bowtie"> <code>:bowtie:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smile.png" class="emoji" alt="smile" title="smile"> <code>:smile:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/laughing.png" class="emoji" alt="laughing" title="laughing"> <code>:laughing:</code>
</th>
</tr></thead>
<tbody>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blush.png" class="emoji" alt="blush" title="blush"> <code>:blush:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smiley.png" class="emoji" alt="smiley" title="smiley"> <code>:smiley:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/relaxed.png" class="emoji" alt="relaxed" title="relaxed"> <code>:relaxed:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smirk.png" class="emoji" alt="smirk" title="smirk"> <code>:smirk:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heart_eyes.png" class="emoji" alt="heart_eyes" title="heart_eyes"> <code>:heart_eyes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kissing_heart.png" class="emoji" alt="kissing_heart" title="kissing_heart"> <code>:kissing_heart:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kissing_closed_eyes.png" class="emoji" alt="kissing_closed_eyes" title="kissing_closed_eyes"> <code>:kissing_closed_eyes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/flushed.png" class="emoji" alt="flushed" title="flushed"> <code>:flushed:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/relieved.png" class="emoji" alt="relieved" title="relieved"> <code>:relieved:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/satisfied.png" class="emoji" alt="satisfied" title="satisfied"> <code>:satisfied:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grin.png" class="emoji" alt="grin" title="grin"> <code>:grin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wink.png" class="emoji" alt="wink" title="wink"> <code>:wink:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/stuck_out_tongue_winking_eye.png" class="emoji" alt="stuck_out_tongue_winking_eye" title="stuck_out_tongue_winking_eye"> <code>:stuck_out_tongue_winking_eye:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/stuck_out_tongue_closed_eyes.png" class="emoji" alt="stuck_out_tongue_closed_eyes" title="stuck_out_tongue_closed_eyes"> <code>:stuck_out_tongue_closed_eyes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grinning.png" class="emoji" alt="grinning" title="grinning"> <code>:grinning:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kissing.png" class="emoji" alt="kissing" title="kissing"> <code>:kissing:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kissing_smiling_eyes.png" class="emoji" alt="kissing_smiling_eyes" title="kissing_smiling_eyes"> <code>:kissing_smiling_eyes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/stuck_out_tongue.png" class="emoji" alt="stuck_out_tongue" title="stuck_out_tongue"> <code>:stuck_out_tongue:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sleeping.png" class="emoji" alt="sleeping" title="sleeping"> <code>:sleeping:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/worried.png" class="emoji" alt="worried" title="worried"> <code>:worried:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/frowning.png" class="emoji" alt="frowning" title="frowning"> <code>:frowning:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/anguished.png" class="emoji" alt="anguished" title="anguished"> <code>:anguished:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/open_mouth.png" class="emoji" alt="open_mouth" title="open_mouth"> <code>:open_mouth:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grimacing.png" class="emoji" alt="grimacing" title="grimacing"> <code>:grimacing:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/confused.png" class="emoji" alt="confused" title="confused"> <code>:confused:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hushed.png" class="emoji" alt="hushed" title="hushed"> <code>:hushed:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/expressionless.png" class="emoji" alt="expressionless" title="expressionless"> <code>:expressionless:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/unamused.png" class="emoji" alt="unamused" title="unamused"> <code>:unamused:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sweat_smile.png" class="emoji" alt="sweat_smile" title="sweat_smile"> <code>:sweat_smile:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sweat.png" class="emoji" alt="sweat" title="sweat"> <code>:sweat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/disappointed_relieved.png" class="emoji" alt="disappointed_relieved" title="disappointed_relieved"> <code>:disappointed_relieved:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/weary.png" class="emoji" alt="weary" title="weary"> <code>:weary:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pensive.png" class="emoji" alt="pensive" title="pensive"> <code>:pensive:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/disappointed.png" class="emoji" alt="disappointed" title="disappointed"> <code>:disappointed:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/confounded.png" class="emoji" alt="confounded" title="confounded"> <code>:confounded:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fearful.png" class="emoji" alt="fearful" title="fearful"> <code>:fearful:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cold_sweat.png" class="emoji" alt="cold_sweat" title="cold_sweat"> <code>:cold_sweat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/persevere.png" class="emoji" alt="persevere" title="persevere"> <code>:persevere:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cry.png" class="emoji" alt="cry" title="cry"> <code>:cry:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sob.png" class="emoji" alt="sob" title="sob"> <code>:sob:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/joy.png" class="emoji" alt="joy" title="joy"> <code>:joy:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/astonished.png" class="emoji" alt="astonished" title="astonished"> <code>:astonished:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/scream.png" class="emoji" alt="scream" title="scream"> <code>:scream:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/neckbeard.png" class="emoji" alt="neckbeard" title="neckbeard"> <code>:neckbeard:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tired_face.png" class="emoji" alt="tired_face" title="tired_face"> <code>:tired_face:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/angry.png" class="emoji" alt="angry" title="angry"> <code>:angry:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rage.png" class="emoji" alt="rage" title="rage"> <code>:rage:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/triumph.png" class="emoji" alt="triumph" title="triumph"> <code>:triumph:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sleepy.png" class="emoji" alt="sleepy" title="sleepy"> <code>:sleepy:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/yum.png" class="emoji" alt="yum" title="yum"> <code>:yum:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mask.png" class="emoji" alt="mask" title="mask"> <code>:mask:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sunglasses.png" class="emoji" alt="sunglasses" title="sunglasses"> <code>:sunglasses:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dizzy_face.png" class="emoji" alt="dizzy_face" title="dizzy_face"> <code>:dizzy_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/imp.png" class="emoji" alt="imp" title="imp"> <code>:imp:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smiling_imp.png" class="emoji" alt="smiling_imp" title="smiling_imp"> <code>:smiling_imp:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/neutral_face.png" class="emoji" alt="neutral_face" title="neutral_face"> <code>:neutral_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_mouth.png" class="emoji" alt="no_mouth" title="no_mouth"> <code>:no_mouth:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/innocent.png" class="emoji" alt="innocent" title="innocent"> <code>:innocent:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/alien.png" class="emoji" alt="alien" title="alien"> <code>:alien:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/yellow_heart.png" class="emoji" alt="yellow_heart" title="yellow_heart"> <code>:yellow_heart:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blue_heart.png" class="emoji" alt="blue_heart" title="blue_heart"> <code>:blue_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/purple_heart.png" class="emoji" alt="purple_heart" title="purple_heart"> <code>:purple_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heart.png" class="emoji" alt="heart" title="heart"> <code>:heart:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/green_heart.png" class="emoji" alt="green_heart" title="green_heart"> <code>:green_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/broken_heart.png" class="emoji" alt="broken_heart" title="broken_heart"> <code>:broken_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heartbeat.png" class="emoji" alt="heartbeat" title="heartbeat"> <code>:heartbeat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heartpulse.png" class="emoji" alt="heartpulse" title="heartpulse"> <code>:heartpulse:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/two_hearts.png" class="emoji" alt="two_hearts" title="two_hearts"> <code>:two_hearts:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/revolving_hearts.png" class="emoji" alt="revolving_hearts" title="revolving_hearts"> <code>:revolving_hearts:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cupid.png" class="emoji" alt="cupid" title="cupid"> <code>:cupid:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sparkling_heart.png" class="emoji" alt="sparkling_heart" title="sparkling_heart"> <code>:sparkling_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sparkles.png" class="emoji" alt="sparkles" title="sparkles"> <code>:sparkles:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/star.png" class="emoji" alt="star" title="star"> <code>:star:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/star2.png" class="emoji" alt="star2" title="star2"> <code>:star2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dizzy.png" class="emoji" alt="dizzy" title="dizzy"> <code>:dizzy:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/boom.png" class="emoji" alt="boom" title="boom"> <code>:boom:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/collision.png" class="emoji" alt="collision" title="collision"> <code>:collision:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/anger.png" class="emoji" alt="anger" title="anger"> <code>:anger:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/exclamation.png" class="emoji" alt="exclamation" title="exclamation"> <code>:exclamation:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/question.png" class="emoji" alt="question" title="question"> <code>:question:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grey_exclamation.png" class="emoji" alt="grey_exclamation" title="grey_exclamation"> <code>:grey_exclamation:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grey_question.png" class="emoji" alt="grey_question" title="grey_question"> <code>:grey_question:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/zzz.png" class="emoji" alt="zzz" title="zzz"> <code>:zzz:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dash.png" class="emoji" alt="dash" title="dash"> <code>:dash:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sweat_drops.png" class="emoji" alt="sweat_drops" title="sweat_drops"> <code>:sweat_drops:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/notes.png" class="emoji" alt="notes" title="notes"> <code>:notes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/musical_note.png" class="emoji" alt="musical_note" title="musical_note"> <code>:musical_note:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fire.png" class="emoji" alt="fire" title="fire"> <code>:fire:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hankey.png" class="emoji" alt="hankey" title="hankey"> <code>:hankey:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/poop.png" class="emoji" alt="poop" title="poop"> <code>:poop:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shit.png" class="emoji" alt="shit" title="shit"> <code>:shit:</code>
</td>
<td>:+1: <code>:+1:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/thumbsup.png" class="emoji" alt="thumbsup" title="thumbsup"> <code>:thumbsup:</code>
</td>
</tr>
<tr>
<td>:-1: <code>:-1:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/thumbsdown.png" class="emoji" alt="thumbsdown" title="thumbsdown"> <code>:thumbsdown:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ok_hand.png" class="emoji" alt="ok_hand" title="ok_hand"> <code>:ok_hand:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/punch.png" class="emoji" alt="punch" title="punch"> <code>:punch:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/facepunch.png" class="emoji" alt="facepunch" title="facepunch"> <code>:facepunch:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fist.png" class="emoji" alt="fist" title="fist"> <code>:fist:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/v.png" class="emoji" alt="v" title="v"> <code>:v:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wave.png" class="emoji" alt="wave" title="wave"> <code>:wave:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hand.png" class="emoji" alt="hand" title="hand"> <code>:hand:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/raised_hand.png" class="emoji" alt="raised_hand" title="raised_hand"> <code>:raised_hand:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/open_hands.png" class="emoji" alt="open_hands" title="open_hands"> <code>:open_hands:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/point_up.png" class="emoji" alt="point_up" title="point_up"> <code>:point_up:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/point_down.png" class="emoji" alt="point_down" title="point_down"> <code>:point_down:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/point_left.png" class="emoji" alt="point_left" title="point_left"> <code>:point_left:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/point_right.png" class="emoji" alt="point_right" title="point_right"> <code>:point_right:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/raised_hands.png" class="emoji" alt="raised_hands" title="raised_hands"> <code>:raised_hands:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pray.png" class="emoji" alt="pray" title="pray"> <code>:pray:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/point_up_2.png" class="emoji" alt="point_up_2" title="point_up_2"> <code>:point_up_2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clap.png" class="emoji" alt="clap" title="clap"> <code>:clap:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/muscle.png" class="emoji" alt="muscle" title="muscle"> <code>:muscle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/metal.png" class="emoji" alt="metal" title="metal"> <code>:metal:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fu.png" class="emoji" alt="fu" title="fu"> <code>:fu:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/walking.png" class="emoji" alt="walking" title="walking"> <code>:walking:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/runner.png" class="emoji" alt="runner" title="runner"> <code>:runner:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/running.png" class="emoji" alt="running" title="running"> <code>:running:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/couple.png" class="emoji" alt="couple" title="couple"> <code>:couple:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/family.png" class="emoji" alt="family" title="family"> <code>:family:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/two_men_holding_hands.png" class="emoji" alt="two_men_holding_hands" title="two_men_holding_hands"> <code>:two_men_holding_hands:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/two_women_holding_hands.png" class="emoji" alt="two_women_holding_hands" title="two_women_holding_hands"> <code>:two_women_holding_hands:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dancer.png" class="emoji" alt="dancer" title="dancer"> <code>:dancer:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dancers.png" class="emoji" alt="dancers" title="dancers"> <code>:dancers:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ok_woman.png" class="emoji" alt="ok_woman" title="ok_woman"> <code>:ok_woman:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_good.png" class="emoji" alt="no_good" title="no_good"> <code>:no_good:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/information_desk_person.png" class="emoji" alt="information_desk_person" title="information_desk_person"> <code>:information_desk_person:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/raising_hand.png" class="emoji" alt="raising_hand" title="raising_hand"> <code>:raising_hand:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bride_with_veil.png" class="emoji" alt="bride_with_veil" title="bride_with_veil"> <code>:bride_with_veil:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/person_with_pouting_face.png" class="emoji" alt="person_with_pouting_face" title="person_with_pouting_face"> <code>:person_with_pouting_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/person_frowning.png" class="emoji" alt="person_frowning" title="person_frowning"> <code>:person_frowning:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bow.png" class="emoji" alt="bow" title="bow"> <code>:bow:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/couplekiss.png" class="emoji" alt="couplekiss" title="couplekiss"> <code>:couplekiss:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/couple_with_heart.png" class="emoji" alt="couple_with_heart" title="couple_with_heart"> <code>:couple_with_heart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/massage.png" class="emoji" alt="massage" title="massage"> <code>:massage:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/haircut.png" class="emoji" alt="haircut" title="haircut"> <code>:haircut:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/nail_care.png" class="emoji" alt="nail_care" title="nail_care"> <code>:nail_care:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/boy.png" class="emoji" alt="boy" title="boy"> <code>:boy:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/girl.png" class="emoji" alt="girl" title="girl"> <code>:girl:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/woman.png" class="emoji" alt="woman" title="woman"> <code>:woman:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/man.png" class="emoji" alt="man" title="man"> <code>:man:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baby.png" class="emoji" alt="baby" title="baby"> <code>:baby:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/older_woman.png" class="emoji" alt="older_woman" title="older_woman"> <code>:older_woman:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/older_man.png" class="emoji" alt="older_man" title="older_man"> <code>:older_man:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/person_with_blond_hair.png" class="emoji" alt="person_with_blond_hair" title="person_with_blond_hair"> <code>:person_with_blond_hair:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/man_with_gua_pi_mao.png" class="emoji" alt="man_with_gua_pi_mao" title="man_with_gua_pi_mao"> <code>:man_with_gua_pi_mao:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/man_with_turban.png" class="emoji" alt="man_with_turban" title="man_with_turban"> <code>:man_with_turban:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/construction_worker.png" class="emoji" alt="construction_worker" title="construction_worker"> <code>:construction_worker:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cop.png" class="emoji" alt="cop" title="cop"> <code>:cop:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/angel.png" class="emoji" alt="angel" title="angel"> <code>:angel:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/princess.png" class="emoji" alt="princess" title="princess"> <code>:princess:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smiley_cat.png" class="emoji" alt="smiley_cat" title="smiley_cat"> <code>:smiley_cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smile_cat.png" class="emoji" alt="smile_cat" title="smile_cat"> <code>:smile_cat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heart_eyes_cat.png" class="emoji" alt="heart_eyes_cat" title="heart_eyes_cat"> <code>:heart_eyes_cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kissing_cat.png" class="emoji" alt="kissing_cat" title="kissing_cat"> <code>:kissing_cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smirk_cat.png" class="emoji" alt="smirk_cat" title="smirk_cat"> <code>:smirk_cat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/scream_cat.png" class="emoji" alt="scream_cat" title="scream_cat"> <code>:scream_cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/crying_cat_face.png" class="emoji" alt="crying_cat_face" title="crying_cat_face"> <code>:crying_cat_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/joy_cat.png" class="emoji" alt="joy_cat" title="joy_cat"> <code>:joy_cat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pouting_cat.png" class="emoji" alt="pouting_cat" title="pouting_cat"> <code>:pouting_cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/japanese_ogre.png" class="emoji" alt="japanese_ogre" title="japanese_ogre"> <code>:japanese_ogre:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/japanese_goblin.png" class="emoji" alt="japanese_goblin" title="japanese_goblin"> <code>:japanese_goblin:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/see_no_evil.png" class="emoji" alt="see_no_evil" title="see_no_evil"> <code>:see_no_evil:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hear_no_evil.png" class="emoji" alt="hear_no_evil" title="hear_no_evil"> <code>:hear_no_evil:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/speak_no_evil.png" class="emoji" alt="speak_no_evil" title="speak_no_evil"> <code>:speak_no_evil:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/guardsman.png" class="emoji" alt="guardsman" title="guardsman"> <code>:guardsman:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/skull.png" class="emoji" alt="skull" title="skull"> <code>:skull:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/feet.png" class="emoji" alt="feet" title="feet"> <code>:feet:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lips.png" class="emoji" alt="lips" title="lips"> <code>:lips:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kiss.png" class="emoji" alt="kiss" title="kiss"> <code>:kiss:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/droplet.png" class="emoji" alt="droplet" title="droplet"> <code>:droplet:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ear.png" class="emoji" alt="ear" title="ear"> <code>:ear:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eyes.png" class="emoji" alt="eyes" title="eyes"> <code>:eyes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/nose.png" class="emoji" alt="nose" title="nose"> <code>:nose:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tongue.png" class="emoji" alt="tongue" title="tongue"> <code>:tongue:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/love_letter.png" class="emoji" alt="love_letter" title="love_letter"> <code>:love_letter:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bust_in_silhouette.png" class="emoji" alt="bust_in_silhouette" title="bust_in_silhouette"> <code>:bust_in_silhouette:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/busts_in_silhouette.png" class="emoji" alt="busts_in_silhouette" title="busts_in_silhouette"> <code>:busts_in_silhouette:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/speech_balloon.png" class="emoji" alt="speech_balloon" title="speech_balloon"> <code>:speech_balloon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/thought_balloon.png" class="emoji" alt="thought_balloon" title="thought_balloon"> <code>:thought_balloon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/feelsgood.png" class="emoji" alt="feelsgood" title="feelsgood"> <code>:feelsgood:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/finnadie.png" class="emoji" alt="finnadie" title="finnadie"> <code>:finnadie:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/goberserk.png" class="emoji" alt="goberserk" title="goberserk"> <code>:goberserk:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/godmode.png" class="emoji" alt="godmode" title="godmode"> <code>:godmode:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hurtrealbad.png" class="emoji" alt="hurtrealbad" title="hurtrealbad"> <code>:hurtrealbad:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rage1.png" class="emoji" alt="rage1" title="rage1"> <code>:rage1:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rage2.png" class="emoji" alt="rage2" title="rage2"> <code>:rage2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rage3.png" class="emoji" alt="rage3" title="rage3"> <code>:rage3:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rage4.png" class="emoji" alt="rage4" title="rage4"> <code>:rage4:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/suspect.png" class="emoji" alt="suspect" title="suspect"> <code>:suspect:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/trollface.png" class="emoji" alt="trollface" title="trollface"> <code>:trollface:</code>
</td>
</tr>
</tbody>
</table>
</div>

<h3 id="自然">自然</h3>

<div>
<table>
<thead><tr>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sunny.png" class="emoji" alt="sunny" title="sunny"> <code>:sunny:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/umbrella.png" class="emoji" alt="umbrella" title="umbrella"> <code>:umbrella:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cloud.png" class="emoji" alt="cloud" title="cloud"> <code>:cloud:</code>
</th>
</tr></thead>
<tbody>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/snowflake.png" class="emoji" alt="snowflake" title="snowflake"> <code>:snowflake:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/snowman.png" class="emoji" alt="snowman" title="snowman"> <code>:snowman:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/zap.png" class="emoji" alt="zap" title="zap"> <code>:zap:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cyclone.png" class="emoji" alt="cyclone" title="cyclone"> <code>:cyclone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/foggy.png" class="emoji" alt="foggy" title="foggy"> <code>:foggy:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ocean.png" class="emoji" alt="ocean" title="ocean"> <code>:ocean:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cat.png" class="emoji" alt="cat" title="cat"> <code>:cat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dog.png" class="emoji" alt="dog" title="dog"> <code>:dog:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mouse.png" class="emoji" alt="mouse" title="mouse"> <code>:mouse:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hamster.png" class="emoji" alt="hamster" title="hamster"> <code>:hamster:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rabbit.png" class="emoji" alt="rabbit" title="rabbit"> <code>:rabbit:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wolf.png" class="emoji" alt="wolf" title="wolf"> <code>:wolf:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/frog.png" class="emoji" alt="frog" title="frog"> <code>:frog:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tiger.png" class="emoji" alt="tiger" title="tiger"> <code>:tiger:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/koala.png" class="emoji" alt="koala" title="koala"> <code>:koala:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bear.png" class="emoji" alt="bear" title="bear"> <code>:bear:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pig.png" class="emoji" alt="pig" title="pig"> <code>:pig:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pig_nose.png" class="emoji" alt="pig_nose" title="pig_nose"> <code>:pig_nose:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cow.png" class="emoji" alt="cow" title="cow"> <code>:cow:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/boar.png" class="emoji" alt="boar" title="boar"> <code>:boar:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/monkey_face.png" class="emoji" alt="monkey_face" title="monkey_face"> <code>:monkey_face:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/monkey.png" class="emoji" alt="monkey" title="monkey"> <code>:monkey:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/horse.png" class="emoji" alt="horse" title="horse"> <code>:horse:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/racehorse.png" class="emoji" alt="racehorse" title="racehorse"> <code>:racehorse:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/camel.png" class="emoji" alt="camel" title="camel"> <code>:camel:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sheep.png" class="emoji" alt="sheep" title="sheep"> <code>:sheep:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/elephant.png" class="emoji" alt="elephant" title="elephant"> <code>:elephant:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/panda_face.png" class="emoji" alt="panda_face" title="panda_face"> <code>:panda_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/snake.png" class="emoji" alt="snake" title="snake"> <code>:snake:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bird.png" class="emoji" alt="bird" title="bird"> <code>:bird:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baby_chick.png" class="emoji" alt="baby_chick" title="baby_chick"> <code>:baby_chick:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hatched_chick.png" class="emoji" alt="hatched_chick" title="hatched_chick"> <code>:hatched_chick:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hatching_chick.png" class="emoji" alt="hatching_chick" title="hatching_chick"> <code>:hatching_chick:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chicken.png" class="emoji" alt="chicken" title="chicken"> <code>:chicken:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/penguin.png" class="emoji" alt="penguin" title="penguin"> <code>:penguin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/turtle.png" class="emoji" alt="turtle" title="turtle"> <code>:turtle:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bug.png" class="emoji" alt="bug" title="bug"> <code>:bug:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/honeybee.png" class="emoji" alt="honeybee" title="honeybee"> <code>:honeybee:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ant.png" class="emoji" alt="ant" title="ant"> <code>:ant:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/beetle.png" class="emoji" alt="beetle" title="beetle"> <code>:beetle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/snail.png" class="emoji" alt="snail" title="snail"> <code>:snail:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/octopus.png" class="emoji" alt="octopus" title="octopus"> <code>:octopus:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tropical_fish.png" class="emoji" alt="tropical_fish" title="tropical_fish"> <code>:tropical_fish:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fish.png" class="emoji" alt="fish" title="fish"> <code>:fish:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/whale.png" class="emoji" alt="whale" title="whale"> <code>:whale:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/whale2.png" class="emoji" alt="whale2" title="whale2"> <code>:whale2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dolphin.png" class="emoji" alt="dolphin" title="dolphin"> <code>:dolphin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cow2.png" class="emoji" alt="cow2" title="cow2"> <code>:cow2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ram.png" class="emoji" alt="ram" title="ram"> <code>:ram:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rat.png" class="emoji" alt="rat" title="rat"> <code>:rat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/water_buffalo.png" class="emoji" alt="water_buffalo" title="water_buffalo"> <code>:water_buffalo:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tiger2.png" class="emoji" alt="tiger2" title="tiger2"> <code>:tiger2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rabbit2.png" class="emoji" alt="rabbit2" title="rabbit2"> <code>:rabbit2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dragon.png" class="emoji" alt="dragon" title="dragon"> <code>:dragon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/goat.png" class="emoji" alt="goat" title="goat"> <code>:goat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rooster.png" class="emoji" alt="rooster" title="rooster"> <code>:rooster:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dog2.png" class="emoji" alt="dog2" title="dog2"> <code>:dog2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pig2.png" class="emoji" alt="pig2" title="pig2"> <code>:pig2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mouse2.png" class="emoji" alt="mouse2" title="mouse2"> <code>:mouse2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ox.png" class="emoji" alt="ox" title="ox"> <code>:ox:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dragon_face.png" class="emoji" alt="dragon_face" title="dragon_face"> <code>:dragon_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blowfish.png" class="emoji" alt="blowfish" title="blowfish"> <code>:blowfish:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/crocodile.png" class="emoji" alt="crocodile" title="crocodile"> <code>:crocodile:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dromedary_camel.png" class="emoji" alt="dromedary_camel" title="dromedary_camel"> <code>:dromedary_camel:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/leopard.png" class="emoji" alt="leopard" title="leopard"> <code>:leopard:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cat2.png" class="emoji" alt="cat2" title="cat2"> <code>:cat2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/poodle.png" class="emoji" alt="poodle" title="poodle"> <code>:poodle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/paw_prints.png" class="emoji" alt="paw_prints" title="paw_prints"> <code>:paw_prints:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bouquet.png" class="emoji" alt="bouquet" title="bouquet"> <code>:bouquet:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cherry_blossom.png" class="emoji" alt="cherry_blossom" title="cherry_blossom"> <code>:cherry_blossom:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tulip.png" class="emoji" alt="tulip" title="tulip"> <code>:tulip:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/four_leaf_clover.png" class="emoji" alt="four_leaf_clover" title="four_leaf_clover"> <code>:four_leaf_clover:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rose.png" class="emoji" alt="rose" title="rose"> <code>:rose:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sunflower.png" class="emoji" alt="sunflower" title="sunflower"> <code>:sunflower:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hibiscus.png" class="emoji" alt="hibiscus" title="hibiscus"> <code>:hibiscus:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/maple_leaf.png" class="emoji" alt="maple_leaf" title="maple_leaf"> <code>:maple_leaf:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/leaves.png" class="emoji" alt="leaves" title="leaves"> <code>:leaves:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fallen_leaf.png" class="emoji" alt="fallen_leaf" title="fallen_leaf"> <code>:fallen_leaf:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/herb.png" class="emoji" alt="herb" title="herb"> <code>:herb:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mushroom.png" class="emoji" alt="mushroom" title="mushroom"> <code>:mushroom:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cactus.png" class="emoji" alt="cactus" title="cactus"> <code>:cactus:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/palm_tree.png" class="emoji" alt="palm_tree" title="palm_tree"> <code>:palm_tree:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/evergreen_tree.png" class="emoji" alt="evergreen_tree" title="evergreen_tree"> <code>:evergreen_tree:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/deciduous_tree.png" class="emoji" alt="deciduous_tree" title="deciduous_tree"> <code>:deciduous_tree:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chestnut.png" class="emoji" alt="chestnut" title="chestnut"> <code>:chestnut:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/seedling.png" class="emoji" alt="seedling" title="seedling"> <code>:seedling:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blossom.png" class="emoji" alt="blossom" title="blossom"> <code>:blossom:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ear_of_rice.png" class="emoji" alt="ear_of_rice" title="ear_of_rice"> <code>:ear_of_rice:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shell.png" class="emoji" alt="shell" title="shell"> <code>:shell:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/globe_with_meridians.png" class="emoji" alt="globe_with_meridians" title="globe_with_meridians"> <code>:globe_with_meridians:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sun_with_face.png" class="emoji" alt="sun_with_face" title="sun_with_face"> <code>:sun_with_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/full_moon_with_face.png" class="emoji" alt="full_moon_with_face" title="full_moon_with_face"> <code>:full_moon_with_face:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/new_moon_with_face.png" class="emoji" alt="new_moon_with_face" title="new_moon_with_face"> <code>:new_moon_with_face:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/new_moon.png" class="emoji" alt="new_moon" title="new_moon"> <code>:new_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/waxing_crescent_moon.png" class="emoji" alt="waxing_crescent_moon" title="waxing_crescent_moon"> <code>:waxing_crescent_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/first_quarter_moon.png" class="emoji" alt="first_quarter_moon" title="first_quarter_moon"> <code>:first_quarter_moon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/waxing_gibbous_moon.png" class="emoji" alt="waxing_gibbous_moon" title="waxing_gibbous_moon"> <code>:waxing_gibbous_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/full_moon.png" class="emoji" alt="full_moon" title="full_moon"> <code>:full_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/waning_gibbous_moon.png" class="emoji" alt="waning_gibbous_moon" title="waning_gibbous_moon"> <code>:waning_gibbous_moon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/last_quarter_moon.png" class="emoji" alt="last_quarter_moon" title="last_quarter_moon"> <code>:last_quarter_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/waning_crescent_moon.png" class="emoji" alt="waning_crescent_moon" title="waning_crescent_moon"> <code>:waning_crescent_moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/last_quarter_moon_with_face.png" class="emoji" alt="last_quarter_moon_with_face" title="last_quarter_moon_with_face"> <code>:last_quarter_moon_with_face:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/first_quarter_moon_with_face.png" class="emoji" alt="first_quarter_moon_with_face" title="first_quarter_moon_with_face"> <code>:first_quarter_moon_with_face:</code>
</td>
<td>:moon: <code>:moon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/earth_africa.png" class="emoji" alt="earth_africa" title="earth_africa"> <code>:earth_africa:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/earth_americas.png" class="emoji" alt="earth_americas" title="earth_americas"> <code>:earth_americas:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/earth_asia.png" class="emoji" alt="earth_asia" title="earth_asia"> <code>:earth_asia:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/volcano.png" class="emoji" alt="volcano" title="volcano"> <code>:volcano:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/milky_way.png" class="emoji" alt="milky_way" title="milky_way"> <code>:milky_way:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/partly_sunny.png" class="emoji" alt="partly_sunny" title="partly_sunny"> <code>:partly_sunny:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/octocat.png" class="emoji" alt="octocat" title="octocat"> <code>:octocat:</code>
</td>
</tr>
<tr><td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/squirrel.png" class="emoji" alt="squirrel" title="squirrel"> <code>:squirrel:</code>
</td></tr>
</tbody>
</table>
</div>
<h3 id="事物">事物</h3>
<div>
<table>
<thead><tr>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bamboo.png" class="emoji" alt="bamboo" title="bamboo"> <code>:bamboo:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gift_heart.png" class="emoji" alt="gift_heart" title="gift_heart"> <code>:gift_heart:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dolls.png" class="emoji" alt="dolls" title="dolls"> <code>:dolls:</code>
</th>
</tr></thead>
<tbody>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/school_satchel.png" class="emoji" alt="school_satchel" title="school_satchel"> <code>:school_satchel:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mortar_board.png" class="emoji" alt="mortar_board" title="mortar_board"> <code>:mortar_board:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/flags.png" class="emoji" alt="flags" title="flags"> <code>:flags:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fireworks.png" class="emoji" alt="fireworks" title="fireworks"> <code>:fireworks:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sparkler.png" class="emoji" alt="sparkler" title="sparkler"> <code>:sparkler:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wind_chime.png" class="emoji" alt="wind_chime" title="wind_chime"> <code>:wind_chime:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rice_scene.png" class="emoji" alt="rice_scene" title="rice_scene"> <code>:rice_scene:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/jack_o_lantern.png" class="emoji" alt="jack_o_lantern" title="jack_o_lantern"> <code>:jack_o_lantern:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ghost.png" class="emoji" alt="ghost" title="ghost"> <code>:ghost:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/santa.png" class="emoji" alt="santa" title="santa"> <code>:santa:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/christmas_tree.png" class="emoji" alt="christmas_tree" title="christmas_tree"> <code>:christmas_tree:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gift.png" class="emoji" alt="gift" title="gift"> <code>:gift:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bell.png" class="emoji" alt="bell" title="bell"> <code>:bell:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_bell.png" class="emoji" alt="no_bell" title="no_bell"> <code>:no_bell:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tanabata_tree.png" class="emoji" alt="tanabata_tree" title="tanabata_tree"> <code>:tanabata_tree:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tada.png" class="emoji" alt="tada" title="tada"> <code>:tada:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/confetti_ball.png" class="emoji" alt="confetti_ball" title="confetti_ball"> <code>:confetti_ball:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/balloon.png" class="emoji" alt="balloon" title="balloon"> <code>:balloon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/crystal_ball.png" class="emoji" alt="crystal_ball" title="crystal_ball"> <code>:crystal_ball:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cd.png" class="emoji" alt="cd" title="cd"> <code>:cd:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dvd.png" class="emoji" alt="dvd" title="dvd"> <code>:dvd:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/floppy_disk.png" class="emoji" alt="floppy_disk" title="floppy_disk"> <code>:floppy_disk:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/camera.png" class="emoji" alt="camera" title="camera"> <code>:camera:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/video_camera.png" class="emoji" alt="video_camera" title="video_camera"> <code>:video_camera:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/movie_camera.png" class="emoji" alt="movie_camera" title="movie_camera"> <code>:movie_camera:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/computer.png" class="emoji" alt="computer" title="computer"> <code>:computer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tv.png" class="emoji" alt="tv" title="tv"> <code>:tv:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/iphone.png" class="emoji" alt="iphone" title="iphone"> <code>:iphone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/phone.png" class="emoji" alt="phone" title="phone"> <code>:phone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/telephone.png" class="emoji" alt="telephone" title="telephone"> <code>:telephone:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/telephone_receiver.png" class="emoji" alt="telephone_receiver" title="telephone_receiver"> <code>:telephone_receiver:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pager.png" class="emoji" alt="pager" title="pager"> <code>:pager:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fax.png" class="emoji" alt="fax" title="fax"> <code>:fax:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/minidisc.png" class="emoji" alt="minidisc" title="minidisc"> <code>:minidisc:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/vhs.png" class="emoji" alt="vhs" title="vhs"> <code>:vhs:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sound.png" class="emoji" alt="sound" title="sound"> <code>:sound:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/speaker.png" class="emoji" alt="speaker" title="speaker"> <code>:speaker:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mute.png" class="emoji" alt="mute" title="mute"> <code>:mute:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/loudspeaker.png" class="emoji" alt="loudspeaker" title="loudspeaker"> <code>:loudspeaker:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mega.png" class="emoji" alt="mega" title="mega"> <code>:mega:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hourglass.png" class="emoji" alt="hourglass" title="hourglass"> <code>:hourglass:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hourglass_flowing_sand.png" class="emoji" alt="hourglass_flowing_sand" title="hourglass_flowing_sand"> <code>:hourglass_flowing_sand:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/alarm_clock.png" class="emoji" alt="alarm_clock" title="alarm_clock"> <code>:alarm_clock:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/watch.png" class="emoji" alt="watch" title="watch"> <code>:watch:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/radio.png" class="emoji" alt="radio" title="radio"> <code>:radio:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/satellite.png" class="emoji" alt="satellite" title="satellite"> <code>:satellite:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/loop.png" class="emoji" alt="loop" title="loop"> <code>:loop:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mag.png" class="emoji" alt="mag" title="mag"> <code>:mag:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mag_right.png" class="emoji" alt="mag_right" title="mag_right"> <code>:mag_right:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/unlock.png" class="emoji" alt="unlock" title="unlock"> <code>:unlock:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lock.png" class="emoji" alt="lock" title="lock"> <code>:lock:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lock_with_ink_pen.png" class="emoji" alt="lock_with_ink_pen" title="lock_with_ink_pen"> <code>:lock_with_ink_pen:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/closed_lock_with_key.png" class="emoji" alt="closed_lock_with_key" title="closed_lock_with_key"> <code>:closed_lock_with_key:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/key.png" class="emoji" alt="key" title="key"> <code>:key:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bulb.png" class="emoji" alt="bulb" title="bulb"> <code>:bulb:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/flashlight.png" class="emoji" alt="flashlight" title="flashlight"> <code>:flashlight:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/high_brightness.png" class="emoji" alt="high_brightness" title="high_brightness"> <code>:high_brightness:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/low_brightness.png" class="emoji" alt="low_brightness" title="low_brightness"> <code>:low_brightness:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/electric_plug.png" class="emoji" alt="electric_plug" title="electric_plug"> <code>:electric_plug:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/battery.png" class="emoji" alt="battery" title="battery"> <code>:battery:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/calling.png" class="emoji" alt="calling" title="calling"> <code>:calling:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/email.png" class="emoji" alt="email" title="email"> <code>:email:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mailbox.png" class="emoji" alt="mailbox" title="mailbox"> <code>:mailbox:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/postbox.png" class="emoji" alt="postbox" title="postbox"> <code>:postbox:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bath.png" class="emoji" alt="bath" title="bath"> <code>:bath:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bathtub.png" class="emoji" alt="bathtub" title="bathtub"> <code>:bathtub:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shower.png" class="emoji" alt="shower" title="shower"> <code>:shower:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/toilet.png" class="emoji" alt="toilet" title="toilet"> <code>:toilet:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wrench.png" class="emoji" alt="wrench" title="wrench"> <code>:wrench:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/nut_and_bolt.png" class="emoji" alt="nut_and_bolt" title="nut_and_bolt"> <code>:nut_and_bolt:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hammer.png" class="emoji" alt="hammer" title="hammer"> <code>:hammer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/seat.png" class="emoji" alt="seat" title="seat"> <code>:seat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/moneybag.png" class="emoji" alt="moneybag" title="moneybag"> <code>:moneybag:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/yen.png" class="emoji" alt="yen" title="yen"> <code>:yen:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dollar.png" class="emoji" alt="dollar" title="dollar"> <code>:dollar:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pound.png" class="emoji" alt="pound" title="pound"> <code>:pound:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/euro.png" class="emoji" alt="euro" title="euro"> <code>:euro:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/credit_card.png" class="emoji" alt="credit_card" title="credit_card"> <code>:credit_card:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/money_with_wings.png" class="emoji" alt="money_with_wings" title="money_with_wings"> <code>:money_with_wings:</code>
</td>
<td>:e-mail: <code>:e-mail:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/inbox_tray.png" class="emoji" alt="inbox_tray" title="inbox_tray"> <code>:inbox_tray:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/outbox_tray.png" class="emoji" alt="outbox_tray" title="outbox_tray"> <code>:outbox_tray:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/envelope.png" class="emoji" alt="envelope" title="envelope"> <code>:envelope:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/incoming_envelope.png" class="emoji" alt="incoming_envelope" title="incoming_envelope"> <code>:incoming_envelope:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/postal_horn.png" class="emoji" alt="postal_horn" title="postal_horn"> <code>:postal_horn:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mailbox_closed.png" class="emoji" alt="mailbox_closed" title="mailbox_closed"> <code>:mailbox_closed:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mailbox_with_mail.png" class="emoji" alt="mailbox_with_mail" title="mailbox_with_mail"> <code>:mailbox_with_mail:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mailbox_with_no_mail.png" class="emoji" alt="mailbox_with_no_mail" title="mailbox_with_no_mail"> <code>:mailbox_with_no_mail:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/door.png" class="emoji" alt="door" title="door"> <code>:door:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/smoking.png" class="emoji" alt="smoking" title="smoking"> <code>:smoking:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bomb.png" class="emoji" alt="bomb" title="bomb"> <code>:bomb:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gun.png" class="emoji" alt="gun" title="gun"> <code>:gun:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hocho.png" class="emoji" alt="hocho" title="hocho"> <code>:hocho:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pill.png" class="emoji" alt="pill" title="pill"> <code>:pill:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/syringe.png" class="emoji" alt="syringe" title="syringe"> <code>:syringe:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/page_facing_up.png" class="emoji" alt="page_facing_up" title="page_facing_up"> <code>:page_facing_up:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/page_with_curl.png" class="emoji" alt="page_with_curl" title="page_with_curl"> <code>:page_with_curl:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bookmark_tabs.png" class="emoji" alt="bookmark_tabs" title="bookmark_tabs"> <code>:bookmark_tabs:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bar_chart.png" class="emoji" alt="bar_chart" title="bar_chart"> <code>:bar_chart:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chart_with_upwards_trend.png" class="emoji" alt="chart_with_upwards_trend" title="chart_with_upwards_trend"> <code>:chart_with_upwards_trend:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chart_with_downwards_trend.png" class="emoji" alt="chart_with_downwards_trend" title="chart_with_downwards_trend"> <code>:chart_with_downwards_trend:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/scroll.png" class="emoji" alt="scroll" title="scroll"> <code>:scroll:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clipboard.png" class="emoji" alt="clipboard" title="clipboard"> <code>:clipboard:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/calendar.png" class="emoji" alt="calendar" title="calendar"> <code>:calendar:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/date.png" class="emoji" alt="date" title="date"> <code>:date:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/card_index.png" class="emoji" alt="card_index" title="card_index"> <code>:card_index:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/file_folder.png" class="emoji" alt="file_folder" title="file_folder"> <code>:file_folder:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/open_file_folder.png" class="emoji" alt="open_file_folder" title="open_file_folder"> <code>:open_file_folder:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/scissors.png" class="emoji" alt="scissors" title="scissors"> <code>:scissors:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pushpin.png" class="emoji" alt="pushpin" title="pushpin"> <code>:pushpin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/paperclip.png" class="emoji" alt="paperclip" title="paperclip"> <code>:paperclip:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/black_nib.png" class="emoji" alt="black_nib" title="black_nib"> <code>:black_nib:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pencil2.png" class="emoji" alt="pencil2" title="pencil2"> <code>:pencil2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/straight_ruler.png" class="emoji" alt="straight_ruler" title="straight_ruler"> <code>:straight_ruler:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/triangular_ruler.png" class="emoji" alt="triangular_ruler" title="triangular_ruler"> <code>:triangular_ruler:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/closed_book.png" class="emoji" alt="closed_book" title="closed_book"> <code>:closed_book:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/green_book.png" class="emoji" alt="green_book" title="green_book"> <code>:green_book:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blue_book.png" class="emoji" alt="blue_book" title="blue_book"> <code>:blue_book:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/orange_book.png" class="emoji" alt="orange_book" title="orange_book"> <code>:orange_book:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/notebook.png" class="emoji" alt="notebook" title="notebook"> <code>:notebook:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/notebook_with_decorative_cover.png" class="emoji" alt="notebook_with_decorative_cover" title="notebook_with_decorative_cover"> <code>:notebook_with_decorative_cover:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ledger.png" class="emoji" alt="ledger" title="ledger"> <code>:ledger:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/books.png" class="emoji" alt="books" title="books"> <code>:books:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bookmark.png" class="emoji" alt="bookmark" title="bookmark"> <code>:bookmark:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/name_badge.png" class="emoji" alt="name_badge" title="name_badge"> <code>:name_badge:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/microscope.png" class="emoji" alt="microscope" title="microscope"> <code>:microscope:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/telescope.png" class="emoji" alt="telescope" title="telescope"> <code>:telescope:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/newspaper.png" class="emoji" alt="newspaper" title="newspaper"> <code>:newspaper:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/football.png" class="emoji" alt="football" title="football"> <code>:football:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/basketball.png" class="emoji" alt="basketball" title="basketball"> <code>:basketball:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/soccer.png" class="emoji" alt="soccer" title="soccer"> <code>:soccer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baseball.png" class="emoji" alt="baseball" title="baseball"> <code>:baseball:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tennis.png" class="emoji" alt="tennis" title="tennis"> <code>:tennis:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/8ball.png" class="emoji" alt="8ball" title="8ball"> <code>:8ball:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rugby_football.png" class="emoji" alt="rugby_football" title="rugby_football"> <code>:rugby_football:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bowling.png" class="emoji" alt="bowling" title="bowling"> <code>:bowling:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/golf.png" class="emoji" alt="golf" title="golf"> <code>:golf:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mountain_bicyclist.png" class="emoji" alt="mountain_bicyclist" title="mountain_bicyclist"> <code>:mountain_bicyclist:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bicyclist.png" class="emoji" alt="bicyclist" title="bicyclist"> <code>:bicyclist:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/horse_racing.png" class="emoji" alt="horse_racing" title="horse_racing"> <code>:horse_racing:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/snowboarder.png" class="emoji" alt="snowboarder" title="snowboarder"> <code>:snowboarder:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/swimmer.png" class="emoji" alt="swimmer" title="swimmer"> <code>:swimmer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/surfer.png" class="emoji" alt="surfer" title="surfer"> <code>:surfer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ski.png" class="emoji" alt="ski" title="ski"> <code>:ski:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/spades.png" class="emoji" alt="spades" title="spades"> <code>:spades:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hearts.png" class="emoji" alt="hearts" title="hearts"> <code>:hearts:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clubs.png" class="emoji" alt="clubs" title="clubs"> <code>:clubs:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/diamonds.png" class="emoji" alt="diamonds" title="diamonds"> <code>:diamonds:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gem.png" class="emoji" alt="gem" title="gem"> <code>:gem:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ring.png" class="emoji" alt="ring" title="ring"> <code>:ring:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/trophy.png" class="emoji" alt="trophy" title="trophy"> <code>:trophy:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/musical_score.png" class="emoji" alt="musical_score" title="musical_score"> <code>:musical_score:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/musical_keyboard.png" class="emoji" alt="musical_keyboard" title="musical_keyboard"> <code>:musical_keyboard:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/violin.png" class="emoji" alt="violin" title="violin"> <code>:violin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/space_invader.png" class="emoji" alt="space_invader" title="space_invader"> <code>:space_invader:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/video_game.png" class="emoji" alt="video_game" title="video_game"> <code>:video_game:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/black_joker.png" class="emoji" alt="black_joker" title="black_joker"> <code>:black_joker:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/flower_playing_cards.png" class="emoji" alt="flower_playing_cards" title="flower_playing_cards"> <code>:flower_playing_cards:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/game_die.png" class="emoji" alt="game_die" title="game_die"> <code>:game_die:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dart.png" class="emoji" alt="dart" title="dart"> <code>:dart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mahjong.png" class="emoji" alt="mahjong" title="mahjong"> <code>:mahjong:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clapper.png" class="emoji" alt="clapper" title="clapper"> <code>:clapper:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/memo.png" class="emoji" alt="memo" title="memo"> <code>:memo:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pencil.png" class="emoji" alt="pencil" title="pencil"> <code>:pencil:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/book.png" class="emoji" alt="book" title="book"> <code>:book:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/art.png" class="emoji" alt="art" title="art"> <code>:art:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/microphone.png" class="emoji" alt="microphone" title="microphone"> <code>:microphone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/headphones.png" class="emoji" alt="headphones" title="headphones"> <code>:headphones:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/trumpet.png" class="emoji" alt="trumpet" title="trumpet"> <code>:trumpet:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/saxophone.png" class="emoji" alt="saxophone" title="saxophone"> <code>:saxophone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/guitar.png" class="emoji" alt="guitar" title="guitar"> <code>:guitar:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shoe.png" class="emoji" alt="shoe" title="shoe"> <code>:shoe:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sandal.png" class="emoji" alt="sandal" title="sandal"> <code>:sandal:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/high_heel.png" class="emoji" alt="high_heel" title="high_heel"> <code>:high_heel:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lipstick.png" class="emoji" alt="lipstick" title="lipstick"> <code>:lipstick:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/boot.png" class="emoji" alt="boot" title="boot"> <code>:boot:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shirt.png" class="emoji" alt="shirt" title="shirt"> <code>:shirt:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tshirt.png" class="emoji" alt="tshirt" title="tshirt"> <code>:tshirt:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/necktie.png" class="emoji" alt="necktie" title="necktie"> <code>:necktie:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/womans_clothes.png" class="emoji" alt="womans_clothes" title="womans_clothes"> <code>:womans_clothes:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dress.png" class="emoji" alt="dress" title="dress"> <code>:dress:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/running_shirt_with_sash.png" class="emoji" alt="running_shirt_with_sash" title="running_shirt_with_sash"> <code>:running_shirt_with_sash:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/jeans.png" class="emoji" alt="jeans" title="jeans"> <code>:jeans:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kimono.png" class="emoji" alt="kimono" title="kimono"> <code>:kimono:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bikini.png" class="emoji" alt="bikini" title="bikini"> <code>:bikini:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ribbon.png" class="emoji" alt="ribbon" title="ribbon"> <code>:ribbon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tophat.png" class="emoji" alt="tophat" title="tophat"> <code>:tophat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/crown.png" class="emoji" alt="crown" title="crown"> <code>:crown:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/womans_hat.png" class="emoji" alt="womans_hat" title="womans_hat"> <code>:womans_hat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mans_shoe.png" class="emoji" alt="mans_shoe" title="mans_shoe"> <code>:mans_shoe:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/closed_umbrella.png" class="emoji" alt="closed_umbrella" title="closed_umbrella"> <code>:closed_umbrella:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/briefcase.png" class="emoji" alt="briefcase" title="briefcase"> <code>:briefcase:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/handbag.png" class="emoji" alt="handbag" title="handbag"> <code>:handbag:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pouch.png" class="emoji" alt="pouch" title="pouch"> <code>:pouch:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/purse.png" class="emoji" alt="purse" title="purse"> <code>:purse:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eyeglasses.png" class="emoji" alt="eyeglasses" title="eyeglasses"> <code>:eyeglasses:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fishing_pole_and_fish.png" class="emoji" alt="fishing_pole_and_fish" title="fishing_pole_and_fish"> <code>:fishing_pole_and_fish:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/coffee.png" class="emoji" alt="coffee" title="coffee"> <code>:coffee:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tea.png" class="emoji" alt="tea" title="tea"> <code>:tea:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sake.png" class="emoji" alt="sake" title="sake"> <code>:sake:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baby_bottle.png" class="emoji" alt="baby_bottle" title="baby_bottle"> <code>:baby_bottle:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/beer.png" class="emoji" alt="beer" title="beer"> <code>:beer:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/beers.png" class="emoji" alt="beers" title="beers"> <code>:beers:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cocktail.png" class="emoji" alt="cocktail" title="cocktail"> <code>:cocktail:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tropical_drink.png" class="emoji" alt="tropical_drink" title="tropical_drink"> <code>:tropical_drink:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wine_glass.png" class="emoji" alt="wine_glass" title="wine_glass"> <code>:wine_glass:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fork_and_knife.png" class="emoji" alt="fork_and_knife" title="fork_and_knife"> <code>:fork_and_knife:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pizza.png" class="emoji" alt="pizza" title="pizza"> <code>:pizza:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hamburger.png" class="emoji" alt="hamburger" title="hamburger"> <code>:hamburger:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fries.png" class="emoji" alt="fries" title="fries"> <code>:fries:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/poultry_leg.png" class="emoji" alt="poultry_leg" title="poultry_leg"> <code>:poultry_leg:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/meat_on_bone.png" class="emoji" alt="meat_on_bone" title="meat_on_bone"> <code>:meat_on_bone:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/spaghetti.png" class="emoji" alt="spaghetti" title="spaghetti"> <code>:spaghetti:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/curry.png" class="emoji" alt="curry" title="curry"> <code>:curry:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fried_shrimp.png" class="emoji" alt="fried_shrimp" title="fried_shrimp"> <code>:fried_shrimp:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bento.png" class="emoji" alt="bento" title="bento"> <code>:bento:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sushi.png" class="emoji" alt="sushi" title="sushi"> <code>:sushi:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fish_cake.png" class="emoji" alt="fish_cake" title="fish_cake"> <code>:fish_cake:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rice_ball.png" class="emoji" alt="rice_ball" title="rice_ball"> <code>:rice_ball:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rice_cracker.png" class="emoji" alt="rice_cracker" title="rice_cracker"> <code>:rice_cracker:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rice.png" class="emoji" alt="rice" title="rice"> <code>:rice:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ramen.png" class="emoji" alt="ramen" title="ramen"> <code>:ramen:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/stew.png" class="emoji" alt="stew" title="stew"> <code>:stew:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/oden.png" class="emoji" alt="oden" title="oden"> <code>:oden:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/dango.png" class="emoji" alt="dango" title="dango"> <code>:dango:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/egg.png" class="emoji" alt="egg" title="egg"> <code>:egg:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bread.png" class="emoji" alt="bread" title="bread"> <code>:bread:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/doughnut.png" class="emoji" alt="doughnut" title="doughnut"> <code>:doughnut:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/custard.png" class="emoji" alt="custard" title="custard"> <code>:custard:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/icecream.png" class="emoji" alt="icecream" title="icecream"> <code>:icecream:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ice_cream.png" class="emoji" alt="ice_cream" title="ice_cream"> <code>:ice_cream:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shaved_ice.png" class="emoji" alt="shaved_ice" title="shaved_ice"> <code>:shaved_ice:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/birthday.png" class="emoji" alt="birthday" title="birthday"> <code>:birthday:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cake.png" class="emoji" alt="cake" title="cake"> <code>:cake:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cookie.png" class="emoji" alt="cookie" title="cookie"> <code>:cookie:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chocolate_bar.png" class="emoji" alt="chocolate_bar" title="chocolate_bar"> <code>:chocolate_bar:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/candy.png" class="emoji" alt="candy" title="candy"> <code>:candy:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lollipop.png" class="emoji" alt="lollipop" title="lollipop"> <code>:lollipop:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/honey_pot.png" class="emoji" alt="honey_pot" title="honey_pot"> <code>:honey_pot:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/apple.png" class="emoji" alt="apple" title="apple"> <code>:apple:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/green_apple.png" class="emoji" alt="green_apple" title="green_apple"> <code>:green_apple:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tangerine.png" class="emoji" alt="tangerine" title="tangerine"> <code>:tangerine:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/lemon.png" class="emoji" alt="lemon" title="lemon"> <code>:lemon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cherries.png" class="emoji" alt="cherries" title="cherries"> <code>:cherries:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/grapes.png" class="emoji" alt="grapes" title="grapes"> <code>:grapes:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/watermelon.png" class="emoji" alt="watermelon" title="watermelon"> <code>:watermelon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/strawberry.png" class="emoji" alt="strawberry" title="strawberry"> <code>:strawberry:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/peach.png" class="emoji" alt="peach" title="peach"> <code>:peach:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/melon.png" class="emoji" alt="melon" title="melon"> <code>:melon:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/banana.png" class="emoji" alt="banana" title="banana"> <code>:banana:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pear.png" class="emoji" alt="pear" title="pear"> <code>:pear:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pineapple.png" class="emoji" alt="pineapple" title="pineapple"> <code>:pineapple:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sweet_potato.png" class="emoji" alt="sweet_potato" title="sweet_potato"> <code>:sweet_potato:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eggplant.png" class="emoji" alt="eggplant" title="eggplant"> <code>:eggplant:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tomato.png" class="emoji" alt="tomato" title="tomato"> <code>:tomato:</code>
</td>
</tr>
<tr><td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/corn.png" class="emoji" alt="corn" title="corn"> <code>:corn:</code>
</td></tr>
</tbody>
</table>
</div>
<h3 id="地点">地点</h3>
</div>
<table>
<thead><tr>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/house.png" class="emoji" alt="house" title="house"> <code>:house:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/house_with_garden.png" class="emoji" alt="house_with_garden" title="house_with_garden"> <code>:house_with_garden:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/school.png" class="emoji" alt="school" title="school"> <code>:school:</code>
</th>
</tr></thead>
<tbody>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/office.png" class="emoji" alt="office" title="office"> <code>:office:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/post_office.png" class="emoji" alt="post_office" title="post_office"> <code>:post_office:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hospital.png" class="emoji" alt="hospital" title="hospital"> <code>:hospital:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bank.png" class="emoji" alt="bank" title="bank"> <code>:bank:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/convenience_store.png" class="emoji" alt="convenience_store" title="convenience_store"> <code>:convenience_store:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/love_hotel.png" class="emoji" alt="love_hotel" title="love_hotel"> <code>:love_hotel:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hotel.png" class="emoji" alt="hotel" title="hotel"> <code>:hotel:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wedding.png" class="emoji" alt="wedding" title="wedding"> <code>:wedding:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/church.png" class="emoji" alt="church" title="church"> <code>:church:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/department_store.png" class="emoji" alt="department_store" title="department_store"> <code>:department_store:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/european_post_office.png" class="emoji" alt="european_post_office" title="european_post_office"> <code>:european_post_office:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/city_sunrise.png" class="emoji" alt="city_sunrise" title="city_sunrise"> <code>:city_sunrise:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/city_sunset.png" class="emoji" alt="city_sunset" title="city_sunset"> <code>:city_sunset:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/japanese_castle.png" class="emoji" alt="japanese_castle" title="japanese_castle"> <code>:japanese_castle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/european_castle.png" class="emoji" alt="european_castle" title="european_castle"> <code>:european_castle:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tent.png" class="emoji" alt="tent" title="tent"> <code>:tent:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/factory.png" class="emoji" alt="factory" title="factory"> <code>:factory:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tokyo_tower.png" class="emoji" alt="tokyo_tower" title="tokyo_tower"> <code>:tokyo_tower:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/japan.png" class="emoji" alt="japan" title="japan"> <code>:japan:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mount_fuji.png" class="emoji" alt="mount_fuji" title="mount_fuji"> <code>:mount_fuji:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sunrise_over_mountains.png" class="emoji" alt="sunrise_over_mountains" title="sunrise_over_mountains"> <code>:sunrise_over_mountains:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sunrise.png" class="emoji" alt="sunrise" title="sunrise"> <code>:sunrise:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/stars.png" class="emoji" alt="stars" title="stars"> <code>:stars:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/statue_of_liberty.png" class="emoji" alt="statue_of_liberty" title="statue_of_liberty"> <code>:statue_of_liberty:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bridge_at_night.png" class="emoji" alt="bridge_at_night" title="bridge_at_night"> <code>:bridge_at_night:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/carousel_horse.png" class="emoji" alt="carousel_horse" title="carousel_horse"> <code>:carousel_horse:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rainbow.png" class="emoji" alt="rainbow" title="rainbow"> <code>:rainbow:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ferris_wheel.png" class="emoji" alt="ferris_wheel" title="ferris_wheel"> <code>:ferris_wheel:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fountain.png" class="emoji" alt="fountain" title="fountain"> <code>:fountain:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/roller_coaster.png" class="emoji" alt="roller_coaster" title="roller_coaster"> <code>:roller_coaster:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ship.png" class="emoji" alt="ship" title="ship"> <code>:ship:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/speedboat.png" class="emoji" alt="speedboat" title="speedboat"> <code>:speedboat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/boat.png" class="emoji" alt="boat" title="boat"> <code>:boat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sailboat.png" class="emoji" alt="sailboat" title="sailboat"> <code>:sailboat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rowboat.png" class="emoji" alt="rowboat" title="rowboat"> <code>:rowboat:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/anchor.png" class="emoji" alt="anchor" title="anchor"> <code>:anchor:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rocket.png" class="emoji" alt="rocket" title="rocket"> <code>:rocket:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/airplane.png" class="emoji" alt="airplane" title="airplane"> <code>:airplane:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/helicopter.png" class="emoji" alt="helicopter" title="helicopter"> <code>:helicopter:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/steam_locomotive.png" class="emoji" alt="steam_locomotive" title="steam_locomotive"> <code>:steam_locomotive:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tram.png" class="emoji" alt="tram" title="tram"> <code>:tram:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mountain_railway.png" class="emoji" alt="mountain_railway" title="mountain_railway"> <code>:mountain_railway:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bike.png" class="emoji" alt="bike" title="bike"> <code>:bike:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/aerial_tramway.png" class="emoji" alt="aerial_tramway" title="aerial_tramway"> <code>:aerial_tramway:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/suspension_railway.png" class="emoji" alt="suspension_railway" title="suspension_railway"> <code>:suspension_railway:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mountain_cableway.png" class="emoji" alt="mountain_cableway" title="mountain_cableway"> <code>:mountain_cableway:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tractor.png" class="emoji" alt="tractor" title="tractor"> <code>:tractor:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/blue_car.png" class="emoji" alt="blue_car" title="blue_car"> <code>:blue_car:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/oncoming_automobile.png" class="emoji" alt="oncoming_automobile" title="oncoming_automobile"> <code>:oncoming_automobile:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/car.png" class="emoji" alt="car" title="car"> <code>:car:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/red_car.png" class="emoji" alt="red_car" title="red_car"> <code>:red_car:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/taxi.png" class="emoji" alt="taxi" title="taxi"> <code>:taxi:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/oncoming_taxi.png" class="emoji" alt="oncoming_taxi" title="oncoming_taxi"> <code>:oncoming_taxi:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/articulated_lorry.png" class="emoji" alt="articulated_lorry" title="articulated_lorry"> <code>:articulated_lorry:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bus.png" class="emoji" alt="bus" title="bus"> <code>:bus:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/oncoming_bus.png" class="emoji" alt="oncoming_bus" title="oncoming_bus"> <code>:oncoming_bus:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rotating_light.png" class="emoji" alt="rotating_light" title="rotating_light"> <code>:rotating_light:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/police_car.png" class="emoji" alt="police_car" title="police_car"> <code>:police_car:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/oncoming_police_car.png" class="emoji" alt="oncoming_police_car" title="oncoming_police_car"> <code>:oncoming_police_car:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fire_engine.png" class="emoji" alt="fire_engine" title="fire_engine"> <code>:fire_engine:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ambulance.png" class="emoji" alt="ambulance" title="ambulance"> <code>:ambulance:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/minibus.png" class="emoji" alt="minibus" title="minibus"> <code>:minibus:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/truck.png" class="emoji" alt="truck" title="truck"> <code>:truck:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/train.png" class="emoji" alt="train" title="train"> <code>:train:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/station.png" class="emoji" alt="station" title="station"> <code>:station:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/train2.png" class="emoji" alt="train2" title="train2"> <code>:train2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bullettrain_front.png" class="emoji" alt="bullettrain_front" title="bullettrain_front"> <code>:bullettrain_front:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bullettrain_side.png" class="emoji" alt="bullettrain_side" title="bullettrain_side"> <code>:bullettrain_side:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/light_rail.png" class="emoji" alt="light_rail" title="light_rail"> <code>:light_rail:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/monorail.png" class="emoji" alt="monorail" title="monorail"> <code>:monorail:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/railway_car.png" class="emoji" alt="railway_car" title="railway_car"> <code>:railway_car:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/trolleybus.png" class="emoji" alt="trolleybus" title="trolleybus"> <code>:trolleybus:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ticket.png" class="emoji" alt="ticket" title="ticket"> <code>:ticket:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fuelpump.png" class="emoji" alt="fuelpump" title="fuelpump"> <code>:fuelpump:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/vertical_traffic_light.png" class="emoji" alt="vertical_traffic_light" title="vertical_traffic_light"> <code>:vertical_traffic_light:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/traffic_light.png" class="emoji" alt="traffic_light" title="traffic_light"> <code>:traffic_light:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/warning.png" class="emoji" alt="warning" title="warning"> <code>:warning:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/construction.png" class="emoji" alt="construction" title="construction"> <code>:construction:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/beginner.png" class="emoji" alt="beginner" title="beginner"> <code>:beginner:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/atm.png" class="emoji" alt="atm" title="atm"> <code>:atm:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/slot_machine.png" class="emoji" alt="slot_machine" title="slot_machine"> <code>:slot_machine:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/busstop.png" class="emoji" alt="busstop" title="busstop"> <code>:busstop:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/barber.png" class="emoji" alt="barber" title="barber"> <code>:barber:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hotsprings.png" class="emoji" alt="hotsprings" title="hotsprings"> <code>:hotsprings:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/checkered_flag.png" class="emoji" alt="checkered_flag" title="checkered_flag"> <code>:checkered_flag:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/crossed_flags.png" class="emoji" alt="crossed_flags" title="crossed_flags"> <code>:crossed_flags:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/izakaya_lantern.png" class="emoji" alt="izakaya_lantern" title="izakaya_lantern"> <code>:izakaya_lantern:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/moyai.png" class="emoji" alt="moyai" title="moyai"> <code>:moyai:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/circus_tent.png" class="emoji" alt="circus_tent" title="circus_tent"> <code>:circus_tent:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/performing_arts.png" class="emoji" alt="performing_arts" title="performing_arts"> <code>:performing_arts:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/round_pushpin.png" class="emoji" alt="round_pushpin" title="round_pushpin"> <code>:round_pushpin:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/triangular_flag_on_post.png" class="emoji" alt="triangular_flag_on_post" title="triangular_flag_on_post"> <code>:triangular_flag_on_post:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/jp.png" class="emoji" alt="jp" title="jp"> <code>:jp:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/kr.png" class="emoji" alt="kr" title="kr"> <code>:kr:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cn.png" class="emoji" alt="cn" title="cn"> <code>:cn:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/us.png" class="emoji" alt="us" title="us"> <code>:us:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fr.png" class="emoji" alt="fr" title="fr"> <code>:fr:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/es.png" class="emoji" alt="es" title="es"> <code>:es:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/it.png" class="emoji" alt="it" title="it"> <code>:it:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ru.png" class="emoji" alt="ru" title="ru"> <code>:ru:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gb.png" class="emoji" alt="gb" title="gb"> <code>:gb:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/uk.png" class="emoji" alt="uk" title="uk"> <code>:uk:</code>
</td>
</tr>
<tr><td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/de.png" class="emoji" alt="de" title="de"> <code>:de:</code>
</td></tr>
</tbody>
</table>
</div>
<h3 id="符号">符号</h3>
<div>
<table>
<thead><tr>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/one.png" class="emoji" alt="one" title="one"> <code>:one:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/two.png" class="emoji" alt="two" title="two"> <code>:two:</code>
</th>
<th>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/three.png" class="emoji" alt="three" title="three"> <code>:three:</code>
</th>
</tr></thead>
<tbody>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/four.png" class="emoji" alt="four" title="four"> <code>:four:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/five.png" class="emoji" alt="five" title="five"> <code>:five:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/six.png" class="emoji" alt="six" title="six"> <code>:six:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/seven.png" class="emoji" alt="seven" title="seven"> <code>:seven:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eight.png" class="emoji" alt="eight" title="eight"> <code>:eight:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/nine.png" class="emoji" alt="nine" title="nine"> <code>:nine:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/keycap_ten.png" class="emoji" alt="keycap_ten" title="keycap_ten"> <code>:keycap_ten:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/1234.png" class="emoji" alt="1234" title="1234"> <code>:1234:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/zero.png" class="emoji" alt="zero" title="zero"> <code>:zero:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/hash.png" class="emoji" alt="hash" title="hash"> <code>:hash:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/symbols.png" class="emoji" alt="symbols" title="symbols"> <code>:symbols:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_backward.png" class="emoji" alt="arrow_backward" title="arrow_backward"> <code>:arrow_backward:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_down.png" class="emoji" alt="arrow_down" title="arrow_down"> <code>:arrow_down:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_forward.png" class="emoji" alt="arrow_forward" title="arrow_forward"> <code>:arrow_forward:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_left.png" class="emoji" alt="arrow_left" title="arrow_left"> <code>:arrow_left:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/capital_abcd.png" class="emoji" alt="capital_abcd" title="capital_abcd"> <code>:capital_abcd:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/abcd.png" class="emoji" alt="abcd" title="abcd"> <code>:abcd:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/abc.png" class="emoji" alt="abc" title="abc"> <code>:abc:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_lower_left.png" class="emoji" alt="arrow_lower_left" title="arrow_lower_left"> <code>:arrow_lower_left:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_lower_right.png" class="emoji" alt="arrow_lower_right" title="arrow_lower_right"> <code>:arrow_lower_right:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_right.png" class="emoji" alt="arrow_right" title="arrow_right"> <code>:arrow_right:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_up.png" class="emoji" alt="arrow_up" title="arrow_up"> <code>:arrow_up:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_upper_left.png" class="emoji" alt="arrow_upper_left" title="arrow_upper_left"> <code>:arrow_upper_left:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_upper_right.png" class="emoji" alt="arrow_upper_right" title="arrow_upper_right"> <code>:arrow_upper_right:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_double_down.png" class="emoji" alt="arrow_double_down" title="arrow_double_down"> <code>:arrow_double_down:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_double_up.png" class="emoji" alt="arrow_double_up" title="arrow_double_up"> <code>:arrow_double_up:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_down_small.png" class="emoji" alt="arrow_down_small" title="arrow_down_small"> <code>:arrow_down_small:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_heading_down.png" class="emoji" alt="arrow_heading_down" title="arrow_heading_down"> <code>:arrow_heading_down:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_heading_up.png" class="emoji" alt="arrow_heading_up" title="arrow_heading_up"> <code>:arrow_heading_up:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/leftwards_arrow_with_hook.png" class="emoji" alt="leftwards_arrow_with_hook" title="leftwards_arrow_with_hook"> <code>:leftwards_arrow_with_hook:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_right_hook.png" class="emoji" alt="arrow_right_hook" title="arrow_right_hook"> <code>:arrow_right_hook:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/left_right_arrow.png" class="emoji" alt="left_right_arrow" title="left_right_arrow"> <code>:left_right_arrow:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_up_down.png" class="emoji" alt="arrow_up_down" title="arrow_up_down"> <code>:arrow_up_down:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrow_up_small.png" class="emoji" alt="arrow_up_small" title="arrow_up_small"> <code>:arrow_up_small:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrows_clockwise.png" class="emoji" alt="arrows_clockwise" title="arrows_clockwise"> <code>:arrows_clockwise:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/arrows_counterclockwise.png" class="emoji" alt="arrows_counterclockwise" title="arrows_counterclockwise"> <code>:arrows_counterclockwise:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/rewind.png" class="emoji" alt="rewind" title="rewind"> <code>:rewind:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/fast_forward.png" class="emoji" alt="fast_forward" title="fast_forward"> <code>:fast_forward:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/information_source.png" class="emoji" alt="information_source" title="information_source"> <code>:information_source:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ok.png" class="emoji" alt="ok" title="ok"> <code>:ok:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/twisted_rightwards_arrows.png" class="emoji" alt="twisted_rightwards_arrows" title="twisted_rightwards_arrows"> <code>:twisted_rightwards_arrows:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/repeat.png" class="emoji" alt="repeat" title="repeat"> <code>:repeat:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/repeat_one.png" class="emoji" alt="repeat_one" title="repeat_one"> <code>:repeat_one:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/new.png" class="emoji" alt="new" title="new"> <code>:new:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/top.png" class="emoji" alt="top" title="top"> <code>:top:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/up.png" class="emoji" alt="up" title="up"> <code>:up:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cool.png" class="emoji" alt="cool" title="cool"> <code>:cool:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/free.png" class="emoji" alt="free" title="free"> <code>:free:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ng.png" class="emoji" alt="ng" title="ng"> <code>:ng:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cinema.png" class="emoji" alt="cinema" title="cinema"> <code>:cinema:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/koko.png" class="emoji" alt="koko" title="koko"> <code>:koko:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/signal_strength.png" class="emoji" alt="signal_strength" title="signal_strength"> <code>:signal_strength:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u5272.png" class="emoji" alt="u5272" title="u5272"> <code>:u5272:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u5408.png" class="emoji" alt="u5408" title="u5408"> <code>:u5408:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u55b6.png" class="emoji" alt="u55b6" title="u55b6"> <code>:u55b6:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u6307.png" class="emoji" alt="u6307" title="u6307"> <code>:u6307:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u6708.png" class="emoji" alt="u6708" title="u6708"> <code>:u6708:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u6709.png" class="emoji" alt="u6709" title="u6709"> <code>:u6709:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u6e80.png" class="emoji" alt="u6e80" title="u6e80"> <code>:u6e80:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u7121.png" class="emoji" alt="u7121" title="u7121"> <code>:u7121:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u7533.png" class="emoji" alt="u7533" title="u7533"> <code>:u7533:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u7a7a.png" class="emoji" alt="u7a7a" title="u7a7a"> <code>:u7a7a:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/u7981.png" class="emoji" alt="u7981" title="u7981"> <code>:u7981:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sa.png" class="emoji" alt="sa" title="sa"> <code>:sa:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/restroom.png" class="emoji" alt="restroom" title="restroom"> <code>:restroom:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mens.png" class="emoji" alt="mens" title="mens"> <code>:mens:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/womens.png" class="emoji" alt="womens" title="womens"> <code>:womens:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baby_symbol.png" class="emoji" alt="baby_symbol" title="baby_symbol"> <code>:baby_symbol:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_smoking.png" class="emoji" alt="no_smoking" title="no_smoking"> <code>:no_smoking:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/parking.png" class="emoji" alt="parking" title="parking"> <code>:parking:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wheelchair.png" class="emoji" alt="wheelchair" title="wheelchair"> <code>:wheelchair:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/metro.png" class="emoji" alt="metro" title="metro"> <code>:metro:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/baggage_claim.png" class="emoji" alt="baggage_claim" title="baggage_claim"> <code>:baggage_claim:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/accept.png" class="emoji" alt="accept" title="accept"> <code>:accept:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wc.png" class="emoji" alt="wc" title="wc"> <code>:wc:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/potable_water.png" class="emoji" alt="potable_water" title="potable_water"> <code>:potable_water:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/put_litter_in_its_place.png" class="emoji" alt="put_litter_in_its_place" title="put_litter_in_its_place"> <code>:put_litter_in_its_place:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/secret.png" class="emoji" alt="secret" title="secret"> <code>:secret:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/congratulations.png" class="emoji" alt="congratulations" title="congratulations"> <code>:congratulations:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/m.png" class="emoji" alt="m" title="m"> <code>:m:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/passport_control.png" class="emoji" alt="passport_control" title="passport_control"> <code>:passport_control:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/left_luggage.png" class="emoji" alt="left_luggage" title="left_luggage"> <code>:left_luggage:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/customs.png" class="emoji" alt="customs" title="customs"> <code>:customs:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ideograph_advantage.png" class="emoji" alt="ideograph_advantage" title="ideograph_advantage"> <code>:ideograph_advantage:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cl.png" class="emoji" alt="cl" title="cl"> <code>:cl:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sos.png" class="emoji" alt="sos" title="sos"> <code>:sos:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/id.png" class="emoji" alt="id" title="id"> <code>:id:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_entry_sign.png" class="emoji" alt="no_entry_sign" title="no_entry_sign"> <code>:no_entry_sign:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/underage.png" class="emoji" alt="underage" title="underage"> <code>:underage:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_mobile_phones.png" class="emoji" alt="no_mobile_phones" title="no_mobile_phones"> <code>:no_mobile_phones:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/do_not_litter.png" class="emoji" alt="do_not_litter" title="do_not_litter"> <code>:do_not_litter:</code>
</td>
<td>:non-potable_water: <code>:non-potable_water:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_bicycles.png" class="emoji" alt="no_bicycles" title="no_bicycles"> <code>:no_bicycles:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_pedestrians.png" class="emoji" alt="no_pedestrians" title="no_pedestrians"> <code>:no_pedestrians:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/children_crossing.png" class="emoji" alt="children_crossing" title="children_crossing"> <code>:children_crossing:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/no_entry.png" class="emoji" alt="no_entry" title="no_entry"> <code>:no_entry:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eight_spoked_asterisk.png" class="emoji" alt="eight_spoked_asterisk" title="eight_spoked_asterisk"> <code>:eight_spoked_asterisk:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/eight_pointed_black_star.png" class="emoji" alt="eight_pointed_black_star" title="eight_pointed_black_star"> <code>:eight_pointed_black_star:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heart_decoration.png" class="emoji" alt="heart_decoration" title="heart_decoration"> <code>:heart_decoration:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/vs.png" class="emoji" alt="vs" title="vs"> <code>:vs:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/vibration_mode.png" class="emoji" alt="vibration_mode" title="vibration_mode"> <code>:vibration_mode:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/mobile_phone_off.png" class="emoji" alt="mobile_phone_off" title="mobile_phone_off"> <code>:mobile_phone_off:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/chart.png" class="emoji" alt="chart" title="chart"> <code>:chart:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/currency_exchange.png" class="emoji" alt="currency_exchange" title="currency_exchange"> <code>:currency_exchange:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/aries.png" class="emoji" alt="aries" title="aries"> <code>:aries:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/taurus.png" class="emoji" alt="taurus" title="taurus"> <code>:taurus:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/gemini.png" class="emoji" alt="gemini" title="gemini"> <code>:gemini:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/cancer.png" class="emoji" alt="cancer" title="cancer"> <code>:cancer:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/leo.png" class="emoji" alt="leo" title="leo"> <code>:leo:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/virgo.png" class="emoji" alt="virgo" title="virgo"> <code>:virgo:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/libra.png" class="emoji" alt="libra" title="libra"> <code>:libra:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/scorpius.png" class="emoji" alt="scorpius" title="scorpius"> <code>:scorpius:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/sagittarius.png" class="emoji" alt="sagittarius" title="sagittarius"> <code>:sagittarius:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/capricorn.png" class="emoji" alt="capricorn" title="capricorn"> <code>:capricorn:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/aquarius.png" class="emoji" alt="aquarius" title="aquarius"> <code>:aquarius:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/pisces.png" class="emoji" alt="pisces" title="pisces"> <code>:pisces:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ophiuchus.png" class="emoji" alt="ophiuchus" title="ophiuchus"> <code>:ophiuchus:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/six_pointed_star.png" class="emoji" alt="six_pointed_star" title="six_pointed_star"> <code>:six_pointed_star:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/negative_squared_cross_mark.png" class="emoji" alt="negative_squared_cross_mark" title="negative_squared_cross_mark"> <code>:negative_squared_cross_mark:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/a.png" class="emoji" alt="a" title="a"> <code>:a:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/b.png" class="emoji" alt="b" title="b"> <code>:b:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ab.png" class="emoji" alt="ab" title="ab"> <code>:ab:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/o2.png" class="emoji" alt="o2" title="o2"> <code>:o2:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/diamond_shape_with_a_dot_inside.png" class="emoji" alt="diamond_shape_with_a_dot_inside" title="diamond_shape_with_a_dot_inside"> <code>:diamond_shape_with_a_dot_inside:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/recycle.png" class="emoji" alt="recycle" title="recycle"> <code>:recycle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/end.png" class="emoji" alt="end" title="end"> <code>:end:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/on.png" class="emoji" alt="on" title="on"> <code>:on:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/soon.png" class="emoji" alt="soon" title="soon"> <code>:soon:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock1.png" class="emoji" alt="clock1" title="clock1"> <code>:clock1:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock130.png" class="emoji" alt="clock130" title="clock130"> <code>:clock130:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock10.png" class="emoji" alt="clock10" title="clock10"> <code>:clock10:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock1030.png" class="emoji" alt="clock1030" title="clock1030"> <code>:clock1030:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock11.png" class="emoji" alt="clock11" title="clock11"> <code>:clock11:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock1130.png" class="emoji" alt="clock1130" title="clock1130"> <code>:clock1130:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock12.png" class="emoji" alt="clock12" title="clock12"> <code>:clock12:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock1230.png" class="emoji" alt="clock1230" title="clock1230"> <code>:clock1230:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock2.png" class="emoji" alt="clock2" title="clock2"> <code>:clock2:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock230.png" class="emoji" alt="clock230" title="clock230"> <code>:clock230:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock3.png" class="emoji" alt="clock3" title="clock3"> <code>:clock3:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock330.png" class="emoji" alt="clock330" title="clock330"> <code>:clock330:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock4.png" class="emoji" alt="clock4" title="clock4"> <code>:clock4:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock430.png" class="emoji" alt="clock430" title="clock430"> <code>:clock430:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock5.png" class="emoji" alt="clock5" title="clock5"> <code>:clock5:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock530.png" class="emoji" alt="clock530" title="clock530"> <code>:clock530:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock6.png" class="emoji" alt="clock6" title="clock6"> <code>:clock6:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock630.png" class="emoji" alt="clock630" title="clock630"> <code>:clock630:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock7.png" class="emoji" alt="clock7" title="clock7"> <code>:clock7:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock730.png" class="emoji" alt="clock730" title="clock730"> <code>:clock730:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock8.png" class="emoji" alt="clock8" title="clock8"> <code>:clock8:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock830.png" class="emoji" alt="clock830" title="clock830"> <code>:clock830:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock9.png" class="emoji" alt="clock9" title="clock9"> <code>:clock9:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/clock930.png" class="emoji" alt="clock930" title="clock930"> <code>:clock930:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_dollar_sign.png" class="emoji" alt="heavy_dollar_sign" title="heavy_dollar_sign"> <code>:heavy_dollar_sign:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/copyright.png" class="emoji" alt="copyright" title="copyright"> <code>:copyright:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/registered.png" class="emoji" alt="registered" title="registered"> <code>:registered:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/tm.png" class="emoji" alt="tm" title="tm"> <code>:tm:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/x.png" class="emoji" alt="x" title="x"> <code>:x:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_exclamation_mark.png" class="emoji" alt="heavy_exclamation_mark" title="heavy_exclamation_mark"> <code>:heavy_exclamation_mark:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/bangbang.png" class="emoji" alt="bangbang" title="bangbang"> <code>:bangbang:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/interrobang.png" class="emoji" alt="interrobang" title="interrobang"> <code>:interrobang:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/o.png" class="emoji" alt="o" title="o"> <code>:o:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_multiplication_x.png" class="emoji" alt="heavy_multiplication_x" title="heavy_multiplication_x"> <code>:heavy_multiplication_x:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_plus_sign.png" class="emoji" alt="heavy_plus_sign" title="heavy_plus_sign"> <code>:heavy_plus_sign:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_minus_sign.png" class="emoji" alt="heavy_minus_sign" title="heavy_minus_sign"> <code>:heavy_minus_sign:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_division_sign.png" class="emoji" alt="heavy_division_sign" title="heavy_division_sign"> <code>:heavy_division_sign:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/white_flower.png" class="emoji" alt="white_flower" title="white_flower"> <code>:white_flower:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/100.png" class="emoji" alt="100" title="100"> <code>:100:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/heavy_check_mark.png" class="emoji" alt="heavy_check_mark" title="heavy_check_mark"> <code>:heavy_check_mark:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/ballot_box_with_check.png" class="emoji" alt="ballot_box_with_check" title="ballot_box_with_check"> <code>:ballot_box_with_check:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/radio_button.png" class="emoji" alt="radio_button" title="radio_button"> <code>:radio_button:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/link.png" class="emoji" alt="link" title="link"> <code>:link:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/curly_loop.png" class="emoji" alt="curly_loop" title="curly_loop"> <code>:curly_loop:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/wavy_dash.png" class="emoji" alt="wavy_dash" title="wavy_dash"> <code>:wavy_dash:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/part_alternation_mark.png" class="emoji" alt="part_alternation_mark" title="part_alternation_mark"> <code>:part_alternation_mark:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/trident.png" class="emoji" alt="trident" title="trident"> <code>:trident:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/black_square.png" class="emoji" alt="black_square" title="black_square"> <code>:black_square:</code>
</td>
<td>:white_square: <code>:white_square:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/white_check_mark.png" class="emoji" alt="white_check_mark" title="white_check_mark"> <code>:white_check_mark:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/black_square_button.png" class="emoji" alt="black_square_button" title="black_square_button"> <code>:black_square_button:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/white_square_button.png" class="emoji" alt="white_square_button" title="white_square_button"> <code>:white_square_button:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/black_circle.png" class="emoji" alt="black_circle" title="black_circle"> <code>:black_circle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/white_circle.png" class="emoji" alt="white_circle" title="white_circle"> <code>:white_circle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/red_circle.png" class="emoji" alt="red_circle" title="red_circle"> <code>:red_circle:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/large_blue_circle.png" class="emoji" alt="large_blue_circle" title="large_blue_circle"> <code>:large_blue_circle:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/large_blue_diamond.png" class="emoji" alt="large_blue_diamond" title="large_blue_diamond"> <code>:large_blue_diamond:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/large_orange_diamond.png" class="emoji" alt="large_orange_diamond" title="large_orange_diamond"> <code>:large_orange_diamond:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/small_blue_diamond.png" class="emoji" alt="small_blue_diamond" title="small_blue_diamond"> <code>:small_blue_diamond:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/small_orange_diamond.png" class="emoji" alt="small_orange_diamond" title="small_orange_diamond"> <code>:small_orange_diamond:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/small_red_triangle.png" class="emoji" alt="small_red_triangle" title="small_red_triangle"> <code>:small_red_triangle:</code>
</td>
</tr>
<tr>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/small_red_triangle_down.png" class="emoji" alt="small_red_triangle_down" title="small_red_triangle_down"> <code>:small_red_triangle_down:</code>
</td>
<td>
<img src= "/img/loading.gif" data-src="https://static.segmentfault.com/v-5c03a88e/global/img/emojis/shipit.png" class="emoji" alt="shipit" title="shipit"> <code>:shipit:</code>
</td>
</tr>
</tbody>
</table>
</div>]]></content>
      <tags>
        <tag>Star</tag>
      </tags>
  </entry>
</search>
